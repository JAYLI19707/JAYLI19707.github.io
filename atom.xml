<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Justin的技术博客</title>
  
  <subtitle>比世界先发现你发光</subtitle>
  <link href="https://jayli19707.github.io/atom.xml" rel="self"/>
  
  <link href="https://jayli19707.github.io/"/>
  <updated>2025-08-13T22:57:12.025Z</updated>
  <id>https://jayli19707.github.io/</id>
  
  <author>
    <name>Justin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL</title>
    <link href="https://jayli19707.github.io/2025/08/14/SQL/"/>
    <id>https://jayli19707.github.io/2025/08/14/SQL/</id>
    <published>2025-08-13T22:57:00.000Z</published>
    <updated>2025-08-13T22:57:12.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250814063235154.png" alt="image.png"></p><h1 id="Selecting-literals"><a href="#Selecting-literals" class="headerlink" title="Selecting literals"></a>Selecting literals</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813032048160.png" alt="image.png"><br> SQL 中 <strong>用 SELECT 直接选取字面值（literals）并用 AS 起列别名</strong>，然后用 <code>UNION</code> 把多条 <code>SELECT</code> 的结果合并成一个表。具体解析如下：</p><ol><li><p><strong>基本语法</strong></p><ul><li><p><code>SELECT [表达式] AS [列名], [表达式] AS [列名]</code><br>  这里 <code>[表达式]</code> 可以是字面值（如字符串 <code>"daisy"</code>）、列名或计算式。</p></li><li><p>如果你直接选字面值，不是从已有表里取数据，那么结果就是**一行一列（或多列）**的临时表。</p></li><li><p>在这个场景里，<code>expression</code> 就是你“写进去”的值，而 <code>AS name</code> 就是告诉 SQL：<strong>把这个值放到结果表里并命名这一列为 name</strong>。</p></li></ul></li></ol><p>举个对应的直观解释：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> "daisy" <span class="keyword">AS</span> parent, "hank" <span class="keyword">AS</span> child</span><br></pre></td></tr></table></figure><p>也就是说：</p><ul><li><p><code>"daisy"</code> → 写入到 <code>parent</code> 列</p></li><li><p><code>"hank"</code> → 写入到 <code>child</code> 列</p></li><li><p>如果后面有 <code>UNION</code>，就会把下一条 <code>SELECT</code> 的行追加到这个结果表中</p></li></ul><p>不过要注意，它并不是向数据库的物理表“插入”数据（那是 <code>INSERT</code> 的工作），而只是生成一个<strong>临时查询结果集</strong>，查询结束它就不存在了。</p><ol start="2"><li><p><strong>例子含义</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> "daisy" <span class="keyword">AS</span> parent, "hank" <span class="keyword">AS</span> child <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> "ace"  , "bella" <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> "ace"  , "charlie" <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> "finn" , "ace" <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> "finn" , "dixie" <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> "finn" , "ginger" <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> "ellie", "finn";</span><br></pre></td></tr></table></figure><ul><li><p>每一条 <code>SELECT</code> 表示一个 <strong>(parent, child)</strong> 对，即“父节点”与“子节点”的关系。</p></li><li><p><code>UNION</code> 会把多条查询结果合并成一个结果集，并去重。</p></li></ul></li><li><p><strong>核心要点</strong></p><ul><li><p><strong>Selecting literals</strong>：直接用字符串常量生成数据行，不依赖数据库已有表。</p></li><li><p><strong>AS 别名</strong>：给每列起一个名字，方便后续引用或理解。</p></li><li><p><strong>UNION</strong>：合并多条 <code>SELECT</code> 结果，最终得到一张完整的映射表。</p></li><li><p>这种技巧在构造小规模测试数据、临时映射表、或不依赖原有表的查询时很方便。</p></li></ul></li></ol><h1 id="SQL的语法逻辑："><a href="#SQL的语法逻辑：" class="headerlink" title="SQL的语法逻辑："></a>SQL的语法逻辑：</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813033113488.png" alt="image.png"><br>SQL 的执行的顺序：</p><ol><li><p><strong>FROM</strong></p><ul><li>先从 <code>parents</code> 这个表里取出所有数据（也就是它的全部行）。</li></ul></li><li><p><strong>WHERE</strong></p><ul><li><p>对每一行，判断 <code>parent &gt; child</code> 是否为真（用字符串的字典序比较）。</p></li><li><p>只保留条件成立的行，其余的行被过滤掉。</p></li></ul></li><li><p><strong>SELECT</strong></p><ul><li>在保留下来的行里，只取 <code>parent</code> 这一列作为输出。</li></ul></li><li><p><strong>返回结果</strong></p><ul><li>最终得到一列（<code>parent</code>），每一行都是满足 <code>parent &gt; child</code> 条件的值。</li></ul></li></ol><hr><h1 id="计算（Arithmetic）"><a href="#计算（Arithmetic）" class="headerlink" title="计算（Arithmetic）"></a>计算（Arithmetic）</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813034050029.png" alt="image.png"></p><h2 id="1-基本算术运算符"><a href="#1-基本算术运算符" class="headerlink" title="1. 基本算术运算符"></a>1. 基本算术运算符</h2><p>你可以直接在 SQL 查询中使用这些运算符：</p><ul><li><p><code>+</code> 加法</p></li><li><p><code>-</code> 减法</p></li><li><p><code>*</code> 乘法</p></li><li><p><code>/</code> 除法（结果通常是浮点数）</p></li><li><p><code>%</code> 取余（某些数据库用 <code>MOD()</code> 函数代替）</p></li></ul><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">5</span> <span class="keyword">AS</span> sum, <span class="number">10</span> <span class="operator">-</span> <span class="number">4</span> <span class="keyword">AS</span> difference, <span class="number">6</span> <span class="operator">*</span> <span class="number">7</span> <span class="keyword">AS</span> product, <span class="number">8</span> <span class="operator">/</span> <span class="number">2</span> <span class="keyword">AS</span> quotient, <span class="number">10</span> <span class="operator">%</span> <span class="number">3</span> <span class="keyword">AS</span> remainder;</span><br></pre></td></tr></table></figure><p>返回结果就是一行五列，分别显示加、减、乘、除、取余的结果。</p><hr><h2 id="2-在表的列上运算"><a href="#2-在表的列上运算" class="headerlink" title="2. 在表的列上运算"></a>2. 在表的列上运算</h2><p>你可以对列的数据做运算，比如工资加奖金、价格打折等：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> price, price <span class="operator">*</span> <span class="number">0.9</span> <span class="keyword">AS</span> discounted_price</span><br><span class="line"><span class="keyword">FROM</span> products;</span><br></pre></td></tr></table></figure><p>这会返回 <code>products</code> 表中的 <code>price</code> 列，以及按 9 折计算的新列。</p><hr><h2 id="3-数学函数"><a href="#3-数学函数" class="headerlink" title="3. 数学函数"></a>3. 数学函数</h2><p>SQL 还提供了很多数学函数（不同数据库可能有差异）：</p><ul><li><p><code>ABS(x)</code> 绝对值</p></li><li><p><code>ROUND(x, n)</code> 四舍五入到 <code>n</code> 位小数</p></li><li><p><code>CEIL(x)</code> / <code>FLOOR(x)</code> 向上/向下取整</p></li><li><p><code>POWER(x, y)</code> 幂运算</p></li><li><p><code>SQRT(x)</code> 平方根</p></li></ul><p><strong>例子</strong>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-5</span>), ROUND(<span class="number">3.14159</span>, <span class="number">2</span>), <span class="built_in">POWER</span>(<span class="number">2</span>, <span class="number">3</span>), <span class="built_in">SQRT</span>(<span class="number">16</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="4-与其他子句配合"><a href="#4-与其他子句配合" class="headerlink" title="4. 与其他子句配合"></a>4. 与其他子句配合</h2><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813194400493.png" alt="image.png"></p><p>算术运算不仅能在 <code>SELECT</code> 里用，还能在 <code>WHERE</code>、<code>ORDER BY</code> 等地方用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, price, quantity, price <span class="operator">*</span> quantity <span class="keyword">AS</span> total_cost</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> price <span class="operator">*</span> quantity <span class="operator">&gt;</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> total_cost <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>这会筛选总价大于 100 的订单，并按总价从高到低排序。</p><h1 id="Union"><a href="#Union" class="headerlink" title="Union:"></a>Union:</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813035000045.png" alt="image.png"></p><p>在关系代数里查询结果本质是一个（多重）集合，<strong>没有顺序的语义</strong>；<br><code>UNION</code>（去重并集）只是把两边的行合到一起并做去重（通常内部会做排序或哈希以去重，但这<strong>不构成对外可依赖的顺序</strong>），所以如果你不写 <code>ORDER BY</code>，显示顺序就是“乱序/未定义”；</p><h1 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813164338173.png" alt="image.png"></p><p> SQL 中 <strong>隐式连接 (Implicit Join)</strong> 和 <strong>显式连接 (Explicit Join)</strong> 的写法区别：</p><ol><li><p><strong>连接的本质</strong></p><ul><li><p>一个 JOIN 操作会把两张（或更多）表的行匹配起来。</p></li><li><p>匹配的条件需要你指定，比如 <code>child = name</code> 表示把 <code>parents</code> 表里 <code>child</code> 列的值，和 <code>dogs</code> 表里 <code>name</code> 列的值相等的行配对。</p></li><li><p>额外条件（如 <code>fur = "curly"</code>）会进一步筛选结果。</p></li></ul></li><li><p><strong>隐式连接（Implicit Join）</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> parent</span><br><span class="line"><span class="keyword">FROM</span> parents, dogs</span><br><span class="line"><span class="keyword">WHERE</span> child <span class="operator">=</span> name</span><br><span class="line">  <span class="keyword">AND</span> fur <span class="operator">=</span> "curly";</span><br></pre></td></tr></table></figure><ul><li><p>语法：<code>FROM 表1, 表2</code>（用逗号分隔）</p></li><li><p>所有匹配条件都放在 <code>WHERE</code> 子句里。</p></li><li><p>缺点：多表连接时可读性差，不易区分匹配条件和过滤条件。</p></li></ul></li><li><p><strong>显式连接（Explicit Join）</strong></p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> parent</span><br><span class="line"><span class="keyword">FROM</span> parents</span><br><span class="line"><span class="keyword">JOIN</span> dogs <span class="keyword">ON</span> child <span class="operator">=</span> name</span><br><span class="line"><span class="keyword">WHERE</span> fur <span class="operator">=</span> "curly";</span><br></pre></td></tr></table></figure><ul><li><p>语法：<code>FROM 表1 JOIN 表2 ON 匹配条件</code></p></li><li><p>匹配条件紧跟 <code>ON</code>，过滤条件放在 <code>WHERE</code>。</p></li><li><p>优点：更清晰地区分<strong>连接条件</strong>和<strong>过滤条件</strong>，可读性更好，也更符合 SQL 标准。</p></li></ul></li><li><p><strong>总结</strong></p><ul><li><p><strong>隐式</strong>：用逗号 + <code>WHERE</code>，匹配和过滤混在一起。</p></li><li><p><strong>显式</strong>：用 <code>JOIN ... ON ...</code>，匹配条件和过滤条件分开。</p></li><li><p>现代 SQL 推荐用显式 JOIN，因为结构清晰、维护方便。</p></li></ul></li></ol><h1 id="Sibling"><a href="#Sibling" class="headerlink" title="Sibling"></a>Sibling</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813170505693.png" alt="image.png"></p><p>这 <strong>SQL 自连接（self join）</strong>，也就是<strong>把一张表当成两张表来用</strong>，然后在它们之间做匹配。</p><hr><h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h2><ul><li><p>有一张 <code>parents</code> 表，记录 <code>(parent, child)</code> 关系，比如家谱、树结构中的父子节点。</p></li><li><p>目标是：<strong>找出所有兄弟姐妹的成对组合</strong>（同一个父亲/母亲，但名字不一样）。</p></li></ul><hr><h2 id="2-关键-SQL"><a href="#2-关键-SQL" class="headerlink" title="2. 关键 SQL"></a>2. 关键 SQL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.child <span class="keyword">AS</span> <span class="keyword">first</span>, b.child <span class="keyword">AS</span> <span class="keyword">second</span></span><br><span class="line"><span class="keyword">FROM</span> parents <span class="keyword">AS</span> a, parents <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.parent <span class="operator">=</span> b.parent </span><br><span class="line">  <span class="keyword">AND</span> a.child <span class="operator">&lt;</span> b.child;</span><br></pre></td></tr></table></figure><p> 解释：</p><ol><li><p><strong><code>FROM parents AS a, parents AS b</code></strong></p><ul><li><p>把同一张 <code>parents</code> 表当成两个表来看，起别名 <code>a</code> 和 <code>b</code>。</p></li><li><p>这样 <code>a</code> 表和 <code>b</code> 表的列可以区分开（<code>a.child</code> vs <code>b.child</code>）。</p></li></ul></li><li><p><strong><code>a.parent = b.parent</code></strong></p><ul><li>条件 1：父亲（parent）相同，表示他们是兄弟姐妹。</li></ul></li><li><p><strong><code>a.child &lt; b.child</code></strong></p><ul><li>条件 2：用字典序（或数值）比较，让 <code>first</code> 永远比 <code>second</code> 小，这样避免重复（<code>bella,charlie</code> 和 <code>charlie,bella</code> 只保留一个）。</li></ul></li><li><p><strong><code>SELECT a.child AS first, b.child AS second</code></strong></p><ul><li>只输出兄弟姐妹的名字对，分别叫 <code>first</code> 和 <code>second</code>。</li></ul></li></ol><hr><h2 id="3-执行逻辑"><a href="#3-执行逻辑" class="headerlink" title="3. 执行逻辑"></a>3. 执行逻辑</h2><ol><li><p><code>FROM</code> 会生成 <code>parents</code> 和 <code>parents</code> 的笛卡尔积（所有组合）。</p></li><li><p><code>WHERE</code> 会过滤，只留下同父母的不同孩子组合。</p></li><li><p><code>a.child &lt; b.child</code> 保证每对兄弟姐妹只出现一次，不会重复倒置。</p></li><li><p>最终输出兄弟姐妹的配对列表。</p></li></ol><hr><h2 id="4-图和结果表"><a href="#4-图和结果表" class="headerlink" title="4. 图和结果表"></a>4. 图和结果表</h2><ul><li><p>右边树图是节点关系。</p></li><li><p>左下表格：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">first    second</span><br><span class="line">bella    charlie</span><br><span class="line">ace      daisy</span><br><span class="line">ace      ginger</span><br><span class="line">daisy    ginger</span><br></pre></td></tr></table></figure><pre><code>表示：- `bella` 和 `charlie` 是兄弟姐妹（父母是 `ace`）。    - `ace`、`daisy`、`ginger` 是同一个父母 `finn` 的不同孩子，因此有多对组合。    </code></pre><h2 id="5-例题"><a href="#5-例题" class="headerlink" title="5.例题"></a>5.例题</h2><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813193232920.png" alt="image.png"></p><ul><li><p><strong>a 表</strong>：用来表示 <strong>祖父母 → 父母</strong> 这一跳</p><ul><li><p><code>a.parent</code> 是祖父母</p></li><li><p><code>a.child</code> 是父母</p></li></ul></li><li><p><strong>b 表</strong>：用来表示 <strong>父母 → 孙子女</strong> 这一跳</p><ul><li><p><code>b.parent</code> 是父母</p></li><li><p><code>b.child</code> 是孙子女</p></li></ul></li></ul><p>有了这个默认角色分工，WHERE 条件就必须把这两跳连起来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.child <span class="operator">=</span> b.parent</span><br></pre></td></tr></table></figure><p>这样才能形成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.parent（祖父母） → a.child<span class="operator">/</span>b.parent（父母） → b.child（孙子女）</span><br></pre></td></tr></table></figure><p>选项 3 正好符合这个逻辑；而选项 2 反过来匹配了 <code>a.parent = b.child</code>，就相当于把辈分链路倒着走了。</p><h1 id="笛卡尔积："><a href="#笛卡尔积：" class="headerlink" title="笛卡尔积："></a>笛卡尔积：</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250813194112608.png" alt="image.png"></p><p>这段 SQL 的运行过程，其实就是 <strong>多表连接（join）+ 条件过滤</strong>，只是这里两个 <code>dogs</code> 表是同一张表起了两个别名。</p><h2 id="1-代码结构"><a href="#1-代码结构" class="headerlink" title="1. 代码结构"></a>1. 代码结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> grandog</span><br><span class="line"><span class="keyword">FROM</span> grandparents, dogs <span class="keyword">AS</span> c, dogs <span class="keyword">AS</span> d</span><br><span class="line"><span class="keyword">WHERE</span> grandog <span class="operator">=</span> c.name</span><br><span class="line">  <span class="keyword">AND</span> granpup <span class="operator">=</span> d.name</span><br><span class="line">  <span class="keyword">AND</span> c.fur <span class="operator">=</span> d.fur;</span><br></pre></td></tr></table></figure><ul><li><p><strong><code>grandparents</code></strong>：表 1，里面有 <code>grandog</code>（祖狗）和 <code>granpup</code>（孙狗）列。</p></li><li><p><strong><code>dogs AS c</code></strong>：表 2，是 <code>dogs</code> 表的第一份，别名叫 <code>c</code>，用来表示祖狗的详细信息。</p></li><li><p><strong><code>dogs AS d</code></strong>：表 3，是 <code>dogs</code> 表的第二份，别名叫 <code>d</code>，用来表示孙狗的详细信息。</p></li></ul><hr><h2 id="2-FROM-的含义"><a href="#2-FROM-的含义" class="headerlink" title="2. FROM 的含义"></a>2. FROM 的含义</h2><p><code>FROM grandparents, dogs AS c, dogs AS d</code></p><ul><li><p>会生成三个表的笛卡尔积（所有行组合），但后面会用 WHERE 条件把不匹配的组合去掉。</p></li><li><p>因为 <code>dogs</code> 被引用了两次，所以需要起别名 <code>c</code> 和 <code>d</code>，以区分是祖狗信息还是孙狗信息。</p></li></ul><hr><h2 id="3-WHERE-条件的作用"><a href="#3-WHERE-条件的作用" class="headerlink" title="3. WHERE 条件的作用"></a>3. WHERE 条件的作用</h2><ol><li><p><code>grandog = c.name</code></p><ul><li>把 <code>grandparents</code> 表里的 <code>grandog</code> 和 <code>dogs c</code> 表的 <code>name</code> 匹配，找到祖狗的那一行狗数据。</li></ul></li><li><p><code>granpup = d.name</code></p><ul><li>把 <code>grandparents</code> 表里的 <code>granpup</code> 和 <code>dogs d</code> 表的 <code>name</code> 匹配，找到孙狗的那一行狗数据。</li></ul></li><li><p><code>c.fur = d.fur</code></p><ul><li>要求祖狗和孙狗的毛色 (<code>fur</code>) 一样。</li></ul></li></ol><hr><h2 id="4-SELECT-的输出"><a href="#4-SELECT-的输出" class="headerlink" title="4. SELECT 的输出"></a>4. SELECT 的输出</h2><p><code>SELECT grandog</code></p><ul><li>只输出祖狗的名字，结果中每一行都是满足条件（毛色相同的祖狗–孙狗配对）中的祖狗。</li></ul><hr><h2 id="5-总体执行流程"><a href="#5-总体执行流程" class="headerlink" title="5. 总体执行流程"></a>5. 总体执行流程</h2><ol><li><p>先生成 <code>grandparents × dogs(c) × dogs(d)</code> 的组合（笛卡尔积）。</p></li><li><p>用 <code>WHERE</code> 把：</p><ul><li><p><code>grandog</code> 对应到 <code>c.name</code></p></li><li><p><code>granpup</code> 对应到 <code>d.name</code></p></li><li><p><code>c.fur = d.fur</code><br>  这三个条件都满足的组合留下。</p></li></ul></li><li><p>从这些组合里取出 <code>grandog</code> 列作为最终结果。</p></li></ol><h1 id="SQL流程"><a href="#SQL流程" class="headerlink" title="SQL流程"></a>SQL流程</h1><p>A <code>SELECT</code> statement describes an output table based on input rows. To write one:</p><ol><li>Describe the <strong>input rows</strong> using <code>FROM</code> and <code>WHERE</code> clauses.</li><li><strong>Group</strong> those rows and determine which groups should appear as output rows using <code>GROUP BY</code> and <code>HAVING</code> clauses.</li><li>Format and order the <strong>output rows</strong> and columns using <code>SELECT</code> and <code>ORDER BY</code> clauses.</li></ol><p><code>SELECT</code> <em>(Step 3)</em> <code>FROM</code> <em>(Step 1)</em> <code>WHERE</code> <em>(Step 1)</em> <code>GROUP BY</code> <em>(Step 2)</em> <code>HAVING</code> <em>(Step 2)</em> <code>ORDER BY</code> <em>(Step 3)</em>;</p><p>Step 1 may involve joining tables (using commas) to form input rows that consist of two or more rows from existing tables.</p><p>The <code>WHERE</code>, <code>GROUP BY</code>, <code>HAVING</code>, and <code>ORDER BY</code> clauses are optional.</p><p>当然，这里是关于“SQL中的聚合函数”视频的博客笔记：</p><h1 id="SQL聚合函数"><a href="#SQL聚合函数" class="headerlink" title="SQL聚合函数"></a>SQL聚合函数</h1><p>深入了解SQL中的聚合函数，解释它们如何对成组的行进行操作，而不是处理单个行。</p><h4 id="聚合函数与标准SQL表达式的区别"><a href="#聚合函数与标准SQL表达式的区别" class="headerlink" title="聚合函数与标准SQL表达式的区别"></a><strong>聚合函数与标准SQL表达式的区别</strong></h4><p>首先对比了聚合函数和标准SQL表达式。通常，<code>SELECT</code>、<code>WHERE</code>和<code>ORDER BY</code>子句中的SQL表达式是逐行处理的。例如，<code>WHERE</code>子句根据每一行的条件来过滤数据。</p><p>然而，聚合函数则不同，它会从一组行中计算出一个单一的值。为了更好地说明这一点，视频引入了一个“动物”数据集，其中包含各种动物的腿数和重量。</p><p>第一个演示的聚合函数是<code>MAX(legs)</code>，它返回了“腿数”列中的最大值4。这与逐行处理的方式形成了鲜明对比，后者会输出六行数据。</p><h4 id="深入了解各种聚合函数"><a href="#深入了解各种聚合函数" class="headerlink" title="深入了解各种聚合函数"></a><strong>深入了解各种聚合函数</strong></h4><p>接下来，详细介绍了多种聚合函数：</p><ul><li><p><strong><code>MIN</code>和<code>SUM</code></strong>: <code>SUM(weight)</code>计算了所有动物的总重量（12,056）。值得注意的是，传递给<code>MAX</code>的参数可以是任意表达式，比如<code>MAX(legs - weight + 5)</code>，这会在聚合前对列值进行组合计算。</p></li><li><p><strong>多重聚合</strong>: 您可以在一个<code>SELECT</code>语句中组合多个聚合函数，例如<code>MAX(legs)</code>和<code>MIN(weight)</code>，它们是独立计算的。</p></li><li><p><strong>与<code>WHERE</code>子句结合使用</strong>: 聚合函数可以与<code>WHERE</code>子句一同使用，以便在聚合前过滤行。例如，可以只选择“种类”不是“霸王龙”的动物来计算<code>MIN(legs)</code>和<code>MAX(weight)</code>。</p></li><li><p><strong><code>AVG</code>和<code>COUNT</code></strong>: <code>AVG(legs)</code>得出的平均腿数为3.0，而<code>COUNT(*)</code>（或<code>COUNT(column_name)</code>）返回的总行数为6。</p></li></ul><h4 id="DISTINCT在聚合函数中的应用"><a href="#DISTINCT在聚合函数中的应用" class="headerlink" title="DISTINCT在聚合函数中的应用"></a><strong><code>DISTINCT</code>在聚合函数中的应用</strong></h4><p>讲解了<code>DISTINCT</code>关键字在聚合函数中的用法：</p><ul><li><p><strong><code>COUNT(DISTINCT legs)</code></strong>: 这个表达式返回了唯一的腿数值（2和4），结果为2。</p></li><li><p><strong><code>SUM(DISTINCT weight)</code></strong>: 这个表达式只对唯一的重量值求和，排除了重复值。</p></li></ul><h4 id="聚合函数与非聚合列的混合使用"><a href="#聚合函数与非聚合列的混合使用" class="headerlink" title="聚合函数与非聚合列的混合使用"></a><strong>聚合函数与非聚合列的混合使用</strong></h4><p>最后，探讨了在<code>SELECT</code>语句中混合使用聚合函数和非聚合列的情况。</p><ul><li><p>当<code>MAX(weight)</code>与<code>kind</code>（种类）一起被选中时，输出结果会包含与最大重量值相关联的<code>kind</code>（霸王龙），因为聚合操作选择了与最大值对应的整行。</p></li><li><p>然而，也提醒我们，这种行为在某些情况下可能会产生误导，例如对于<code>AVG</code>函数，或者当多行共享相同的聚合值时（如<code>MAX(legs)</code>）。在这种情况下，返回的<code>kind</code>可能是任意的，或者不能真正代表平均值。例如，选择<code>AVG(weight)</code>和<code>kind</code>会返回“霸王龙”作为种类，尽管它并不是“平均”的动物。</p></li></ul><h1 id="Grouping-Rows"><a href="#Grouping-Rows" class="headerlink" title="Grouping Rows"></a>Grouping Rows</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250814062348720.png" alt="image.png"></p><h2 id="分组聚合的艺术"><a href="#分组聚合的艺术" class="headerlink" title="分组聚合的艺术"></a>分组聚合的艺术</h2><h3 id="GROUP-BY-的基本概念"><a href="#GROUP-BY-的基本概念" class="headerlink" title="GROUP BY 的基本概念"></a><strong><code>GROUP BY</code> 的基本概念</strong></h3><p>首先介绍了聚合函数的核心思想，即对一组行中的所有表达式值进行操作。在默认情况下，最终表中的所有行构成一个大组，因此应用聚合函数后只会产生单行结果。</p><p>然而，SQL允许在<code>SELECT</code>语句中定义多个组，从而对每个组分别执行聚合。这通过引入<code>GROUP BY</code>和<code>HAVING</code>子句的新形式<code>SELECT</code>语句得以实现。分组的数量由<code>GROUP BY</code>子句中指定表达式的唯一值决定。</p><p>通过一个“动物”表示例，展示了<code>GROUP BY legs</code>如何根据<code>legs</code>列中的唯一值（例如4条腿和2条腿）对行进行分区。每个分区（组）随后在输出中产生单独的行，并对每个组应用聚合函数（如<code>MAX weight</code>）。</p><h3 id="GROUP-BY-的进阶用法"><a href="#GROUP-BY-的进阶用法" class="headerlink" title="GROUP BY 的进阶用法"></a><strong><code>GROUP BY</code> 的进阶用法</strong></h3><p>接着展示了更多<code>GROUP BY</code>的应用实例：</p><ul><li><p><strong>多维度分析</strong>: 您可以轻松选择每个组中的腿数，统计具有特定腿数的动物数量，并计算每个腿类别中动物的最大重量。</p></li><li><p><strong>多列分组</strong>: <code>GROUP BY</code>不仅限于单列，还可以按多个列进行分组。例如，通过<code>GROUP BY legs, weight</code>，可以得到腿数和重量的唯一组合。</p><p>  例如，所有4条腿的动物在一组，所有2条腿的动物在另一组。</p><p>  <strong>但是，当你<code>GROUP BY</code>两个东西（比如 <code>GROUP BY legs, weight</code>）时，分组的规则就更严格了：</strong></p><p>  <strong>只有当两行数据的 <code>legs</code>列的值相同，</strong> <strong><em>并且</em></strong> <strong><code>weight</code>列的值也相同时，它们才会被分到同一个组里。</strong></p><p>  举个例子：</p><ul><li><p>一只4条腿、重100公斤的动物。</p></li><li><p>另一只4条腿、重150公斤的动物。</p></li><li><p>还有一只4条腿、重100公斤的动物。</p></li></ul><p>  如果执行 <code>GROUP BY legs, weight</code>，那么第一只和第三只动物会成为一个组（因为它们都是4条腿且100公斤），而第二只动物会自己成为另一个独立的组（因为它虽然也是4条腿，但重量是150公斤）。</p></li><li><p><strong>任意表达式分组</strong>: 您甚至可以按任意表达式进行分组。视频中演示了按<code>weight / legs</code>的结果进行分组，并强调了SQL默认执行整数除法。</p></li></ul><h3 id="使用-HAVING-子句过滤分组"><a href="#使用-HAVING-子句过滤分组" class="headerlink" title="使用 HAVING 子句过滤分组"></a><strong>使用 <code>HAVING</code> 子句过滤分组</strong></h3><p>引入了<code>HAVING</code>子句，它作为一种在聚合后过滤分组的方法。与<code>WHERE</code>子句过滤单个行不同，<code>HAVING</code>子句本身可以包含聚合函数。</p><p>通过一个例子进行了说明：使用<code>weight / legs</code>作为分组表达式，然后利用<code>HAVING COUNT(*) &gt; 1</code>来筛选出那些组内行数大于1的分组。</p><ul><li><p><strong>SELECT</strong>：决定最终结果表里显示哪些列，以及它们的列名（也就是输出每行包含的值和列标签）。</p></li><li><p><strong>FROM</strong>：指定数据来源表（或子查询），也就是要从哪张表里取数据。</p></li><li><p><strong>WHERE</strong>：先在原始数据里筛选出符合条件的行（作用在输入行上）。</p></li><li><p><strong>GROUP BY</strong>：按照某些字段对筛选后的数据分组，从而形成输出的分组行（通常和聚合函数一起用，比如 <code>COUNT</code>、<code>SUM</code>）。</p></li><li><p><strong>HAVING</strong>：对分组后的结果再进行一次条件筛选（作用在输出行上，通常配合聚合函数）。</p></li></ul><p>换句话说，<code>WHERE</code> 是在分组之前过滤原始数据，<code>HAVING</code> 是在分组之后过滤聚合结果。</p><p>你问到了一个非常关键的点！这是一个常见的混淆，我来帮你理清楚。</p><p><code>CREATE TABLE</code> <strong>不一定</strong>要加 <code>AS</code>。<code>AS</code> 只是在<strong>特定的一种创建方式</strong>下才需要。</p><p>你可以通过以下<strong>两种主要方式</strong>来创建表：</p><hr><h1 id="使用CREATE-TABLE和DROP-TABLE管理你的数据表"><a href="#使用CREATE-TABLE和DROP-TABLE管理你的数据表" class="headerlink" title="使用CREATE TABLE和DROP TABLE管理你的数据表**"></a>使用<code>CREATE TABLE</code>和<code>DROP TABLE</code>管理你的数据表**</h1><h2 id="CREATE-TABLE：创建你的数据表"><a href="#CREATE-TABLE：创建你的数据表" class="headerlink" title="CREATE TABLE：创建你的数据表"></a><strong><code>CREATE TABLE</code>：创建你的数据表</strong></h2><p>首先详细讲解了如何使用<code>CREATE TABLE</code>语句来创建新的数据表。</p><ul><li><p><strong>基本语法</strong>: <code>CREATE TABLE</code>语句用于为你的表命名。虽然完整的语法相当复杂（视频中展示了SQLite的文档作为例子），但核心用法非常直观。</p></li><li><p><strong>避免错误</strong>: 你可以在语句中加入<code>IF NOT EXISTS</code>选项。这样做的好处是，只有在不存在同名表的情况下，SQL才会执行创建操作，从而避免了因表已存在而导致的错误。</p></li><li><p><strong>两种创建方式</strong>:</p><ol><li><p><strong>从查询结果创建</strong>: 你可以使用<code>AS SELECT</code>语句来创建一个新表，这个新表的内容是<code>SELECT</code>查询返回的结果。</p></li><li><p><strong>直接定义列</strong>: 更常见的方式是在括号内直接指定表的列定义。你需要为每一列命名，并可以为其添加一个或多个“列约束”。</p></li></ol></li><li><p><strong>重要的列约束</strong>:</p><ul><li><p><strong><code>UNIQUE</code></strong>: 确保该列中的所有值都是唯一的，不允许出现重复值。</p></li><li><p><strong><code>DEFAULT</code></strong>: 为列设置一个默认值。当插入新行但没有为该列提供值时，将自动使用这个默认值。</p></li></ul></li><li><p><strong>实用示例</strong>:</p><ul><li><p>创建一个名为<code>numbers</code>的表，包含<code>N</code>和<code>note</code>两列。</p></li><li><p>为<code>N</code>列添加<code>UNIQUE</code>约束，使其唯一。</p></li><li><p>为<code>note</code>列设置<code>DEFAULT</code>值为’no comment’。</p></li><li><p>创建一个空表也很有用，因为你可以在之后随时向其中添加数据行。</p></li></ul></li></ul><h3 id="方式一：直接定义表的结构（不使用-AS）"><a href="#方式一：直接定义表的结构（不使用-AS）" class="headerlink" title="方式一：直接定义表的结构（不使用 AS）"></a>方式一：直接定义表的结构（<strong>不使用 AS</strong>）</h3><p>这是最常见、最基础的创建方式。你明确地告诉数据库，这个新表叫什么名字，里面有哪些列，每一列叫什么名字，以及存储什么类型的数据。</p><p><strong>语法结构：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 表名 (</span><br><span class="line">    列名<span class="number">1</span> 数据类型 [约束],</span><br><span class="line">    列名<span class="number">2</span> 数据类型 [约束],</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> numbers (</span><br><span class="line">    N <span class="type">INT</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">    note TEXT <span class="keyword">DEFAULT</span> <span class="string">'no comment'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 当你从零开始，手动定义一个全新的、空的表结构时，<strong>不需要</strong> <code>AS</code>。</p><h4 id="一次添加多行的语法"><a href="#一次添加多行的语法" class="headerlink" title="一次添加多行的语法"></a>一次添加多行的语法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> 表名 (列<span class="number">1</span>, 列<span class="number">2</span>) <span class="keyword">VALUES</span></span><br><span class="line">    (第一行的值<span class="number">1</span>, 第一行的值<span class="number">2</span>),</span><br><span class="line">    (第二行的值<span class="number">1</span>, 第二行的值<span class="number">2</span>),</span><br><span class="line">    (第三行的值<span class="number">1</span>, 第三行的值<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>实际操作示例：</strong></p><p>我们要往 <code>numbers</code> 表里一次性加入三条新记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT INTO</span> numbers (N, note) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">100</span>, <span class="string">'Entry A'</span>),</span><br><span class="line">    (<span class="number">200</span>, <span class="string">'Entry B'</span>),</span><br><span class="line">    (<span class="number">300</span>, <span class="string">'Entry C'</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="方式二：从一个查询结果来创建表（需要使用-AS）"><a href="#方式二：从一个查询结果来创建表（需要使用-AS）" class="headerlink" title="方式二：从一个查询结果来创建表（需要使用 AS）"></a>方式二：从一个查询结果来创建表（<strong>需要使用 AS</strong>）</h3><p>有时候，你希望新表的内容和结构直接来自于一个 <code>SELECT</code> 查询的结果。这时，<code>AS</code> 就派上用场了。<code>AS</code> 在这里的意思是“作为…”，即“将这个查询的结果作为新表的内容”。</p><p><strong>语法结构：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> 新表名 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> 列<span class="number">1</span>, 列<span class="number">2</span>, ... <span class="keyword">FROM</span> 现有表名 <span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure><p>示例：</p><p>假设我们有一个 animals 表，我们想创建一个只包含4条腿动物的新表 four_legged_animals。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> four_legged_animals <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> animals <span class="keyword">WHERE</span> legs <span class="operator">=</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong> 当你想<strong>复制</strong>另一个查询的结果来快速创建一个带有数据的新表时，<strong>才需要</strong> <code>AS</code>。</p><hr><h2 id="DROP-TABLE：移除你的数据表"><a href="#DROP-TABLE：移除你的数据表" class="headerlink" title="DROP TABLE：移除你的数据表"></a><strong><code>DROP TABLE</code>：移除你的数据表</strong></h2><p>接下来，讲解了如何使用<code>DROP TABLE</code>语句来删除一个已经存在的表。</p><ul><li><p><strong>基本语法</strong>: <code>DROP TABLE</code>的用法非常简单，只需在语句后面跟上你想要删除的表名即可。</p></li><li><p><strong>安全删除</strong>: 为了防止因尝试删除一个不存在的表而引发错误，你可以使用<code>DROP TABLE IF EXISTS</code>。这样，只有当表确实存在时，删除操作才会被执行，否则SQL会直接跳过，不会报错。</p></li></ul><h1 id="：精通INSERT、UPDATE和DELETE"><a href="#：精通INSERT、UPDATE和DELETE" class="headerlink" title="：精通INSERT、UPDATE和DELETE"></a>：精通INSERT、UPDATE和DELETE</h1><h4 id="INSERT：向表中添加新生命"><a href="#INSERT：向表中添加新生命" class="headerlink" title="INSERT：向表中添加新生命"></a><strong><code>INSERT</code>：向表中添加新生命</strong></h4><p>首先详细讲解了如何向表中插入新的数据行。</p><ul><li><p><strong>灵活的插入方式</strong>：<code>INSERT</code>语句非常灵活。你可以明确指定要为哪些列插入数据，也可以省略列名（此时需要为所有列按顺序提供值）。数据来源既可以是直接提供的<code>VALUES</code>，也可以是另一个<code>SELECT</code>查询的结果。</p></li><li><p><strong>添加多行</strong>：在<code>VALUES</code>子句后面使用多个由括号括起来并用逗号分隔的值集，可以一次性高效地插入多行数据。</p></li><li><p><strong>实战演练</strong>：</p><ul><li><p>通过创建一个<code>Primes</code>（素数）表示例。这个表有两列：<code>n</code>（用于存放整数）和<code>prime</code>（用于标记<code>n</code>是否为素数）。</p></li><li><p>为了演示，表被先删除再重建，并为<code>n</code>列添加了<code>UNIQUE</code>约束，同时为<code>prime</code>列设置了默认值<code>1</code>（在SQLite中，<code>1</code>通常代表“真”）。</p></li><li><p>演示了如何只插入<code>n</code>的值，此时<code>prime</code>列会自动使用默认值<code>1</code>。这很方便，但也导致像4和6这样的合数最初被错误地标记为素数。</p></li><li><p>接着，展示了一种更高效的填充方法：通过<code>INSERT INTO ... SELECT</code>语句，利用表中已有的数据快速生成并插入更多整数（例如，通过<code>SELECT N + 6 FROM Primes</code>）。</p></li></ul></li></ul><h4 id="UPDATE：修改现有数据"><a href="#UPDATE：修改现有数据" class="headerlink" title="UPDATE：修改现有数据"></a><strong><code>UPDATE</code>：修改现有数据</strong></h4><p>接下来，转向如何更新表中已经存在的行。</p><ul><li><p><strong><code>UPDATE</code>语句的威力</strong>：其基本语法是 <code>UPDATE 表名 SET 列名 = 新表达式 WHERE 条件</code>。</p></li><li><p><strong><code>WHERE</code>子句至关重要</strong>：<code>WHERE</code>条件是<code>UPDATE</code>的灵魂。它精确地指定了<strong>哪些行</strong>需要被更新。如果没有<code>WHERE</code>子句，表中<strong>所有行</strong>的指定列都会被更新，这通常是灾难性的。</p></li><li><p><strong>修正数据</strong>：在<code>Primes</code>表的例子中，<code>UPDATE</code>语句被用来纠正之前插入的错误数据。通过一系列的<code>UPDATE</code>操作，将所有大于2的2的倍数、大于3的3的倍数、以及大于5的5的倍数的<code>prime</code>值都更新为<code>0</code>（假），从而正确地将合数标记出来。</p></li></ul><h4 id="DELETE：移除不再需要的数据"><a href="#DELETE：移除不再需要的数据" class="headerlink" title="DELETE：移除不再需要的数据"></a><strong><code>DELETE</code>：移除不再需要的数据</strong></h4><p>最后一部分讲解了如何使用<code>DELETE</code>语句从表中删除行。</p><ul><li><p><strong>精确删除</strong>：与<code>UPDATE</code>类似，<code>DELETE</code>语句通常与<code>WHERE</code>子句结合使用，以删除满足特定条件的行。语法是 <code>DELETE FROM 表名 WHERE 条件</code>。</p></li><li><p><strong>清空表的风险</strong>：如果<code>DELETE</code>语句后面<strong>没有<code>WHERE</code>子句</strong>，它将删除表中的<strong>所有行</strong>。这会留下一个空表（表结构还在），这与<code>DROP TABLE</code>（直接删除整个表，包括结构）是不同的。</p></li><li><p><strong>最终清理</strong>：在示例的最后，一条<code>DELETE</code>语句被用来删除<code>Primes</code>表中所有<code>prime</code>值为<code>0</code>的行。执行后，表中就只剩下干净的素数了。</p></li></ul><h3 id="Python与SQL的强强联合：用代码轻松操控数据库"><a href="#Python与SQL的强强联合：用代码轻松操控数据库" class="headerlink" title="Python与SQL的强强联合：用代码轻松操控数据库"></a><strong>Python与SQL的强强联合：用代码轻松操控数据库</strong></h3><h4 id="第一步：连接Python与SQL数据库"><a href="#第一步：连接Python与SQL数据库" class="headerlink" title="第一步：连接Python与SQL数据库"></a><strong>第一步：连接Python与SQL数据库</strong></h4><p>视频的核心是介绍了Python内置的<code>sqlite3</code>模块。这个模块让你无需安装任何额外的库，就能直接使用SQLite数据库。</p><ul><li><strong>建立连接</strong>: 一切始于建立一个“连接”。通过<code>sqlite3.Connection()</code>这个类，并向它传递一个数据库文件名（例如 <code>n.DB</code>），你就可以创建一个连接对象。如果这个文件不存在，Python会自动为你创建它。这个连接对象就是你之后执行所有SQL操作的“遥控器”。</li></ul><h4 id="第二步：创建和修改表"><a href="#第二步：创建和修改表" class="headerlink" title="第二步：创建和修改表"></a><strong>第二步：创建和修改表</strong></h4><p>一旦连接建立，你就可以像在SQL客户端里一样，用Python来执行SQL命令了。</p><ul><li><p><strong>创建表</strong>: 你可以将一个完整的SQL <code>CREATE TABLE</code>语句写成一个Python字符串，然后通过连接对象来执行它。视频中演示了 <code>CREATE TABLE nums AS SELECT 2 UNION SELECT 3</code>，这种方式利用一个<code>SELECT</code>查询的结果快速创建了一个名为<code>nums</code>的新表。</p></li><li><p><strong>插入数据</strong>: 插入数据时，Python的编程能力开始大放异彩。你可以利用Python的表达式（例如 <code>range(4, 7)</code>）来批量生成你想插入的数据。为了安全地将这些Python变量放入SQL语句中，我们使用占位符 <code>?</code> 来预留“空位”，然后将变量值传递进去。这不仅方便，还能有效防止SQL注入攻击。</p></li></ul><h4 id="第三步：读取和验证数据"><a href="#第三步：读取和验证数据" class="headerlink" title="第三步：读取和验证数据"></a><strong>第三步：读取和验证数据</strong></h4><p>从数据库中取回数据同样简单。</p><ul><li><p><strong>读取数据</strong>: 执行<code>SELECT</code>语句（例如 <code>SELECT * FROM nums</code>）会返回一个“游标”（cursor）对象。这个游标就像一个指向你查询结果的指针。</p></li><li><p><strong>获取结果</strong>: 调用游标的 <code>fetchall()</code> 方法，就可以将查询结果一次性取回，其格式是一个由元组（tuple）组成的列表，列表中的每个元组就代表一行数据。</p></li></ul><h4 id="关键步骤：提交更改"><a href="#关键步骤：提交更改" class="headerlink" title="关键步骤：提交更改"></a><strong>关键步骤：提交更改</strong></h4><p>这是最容易被忽略但又至关重要的一步。</p><ul><li><p><strong>提交事务</strong>: 当你对数据库进行了修改（如<code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>）之后，这些改动最初只是保存在内存中。你<strong>必须</strong>调用连接对象的 <code>commit()</code> 方法，例如 <code>DB.commit()</code>，来将所有挂起的更改永久地写入到数据库文件中。不这样做的话，你的所有修改都会在程序结束时丢失。</p></li><li><p><strong>验证数据</strong>: 视频最后通过一个SQLite客户端直接打开了<code>n.DB</code>文件，查询<code>nums</code>表，验证了通过Python代码插入的数据（2, 3, 4, 5, 6）确实已经被成功并持久地保存了。</p></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;数据库管理系统&quot;&gt;&lt;a href=&quot;#数据库管理系统&quot; class=&quot;headerlink&quot; title=&quot;数据库管理系统&quot;&gt;&lt;/a&gt;数据库管理系统&lt;/h1&gt;&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="计算机" scheme="https://jayli19707.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-138. 复制带随机指针的链表</title>
    <link href="https://jayli19707.github.io/2025/08/12/Leetcode-138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/08/12/Leetcode-138.%20%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</id>
    <published>2025-08-12T14:34:26.000Z</published>
    <updated>2025-08-12T14:35:05.014Z</updated>
    
    <content type="html"><![CDATA[<p>我们用哈希表来解决这个问题<br>首先创建一个哈希表，再遍历原链表，遍历的同时再不断创建新节点<br>我们将原节点作为<strong>key</strong>，新节点作为<strong>value</strong>放入哈希表中</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250812223352301.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.val = int(x)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        self.random = random</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyRandomList</span>(<span class="params">self, head: <span class="string">'Optional[Node]'</span></span>) -&gt; <span class="string">'Optional[Node]'</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:  <span class="comment"># 关键补充</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        d=<span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        p=head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line"></span><br><span class="line">            new_node=Node(p.val,<span class="literal">None</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">            d[p]=new_node</span><br><span class="line"></span><br><span class="line">            p=p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        p=head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> p.<span class="built_in">next</span>:</span><br><span class="line"></span><br><span class="line">                d[p].<span class="built_in">next</span>=d[p.<span class="built_in">next</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> p.random:    </span><br><span class="line"></span><br><span class="line">                d[p].random=d[p.random]</span><br><span class="line"></span><br><span class="line">            p=p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> d[head]</span><br></pre></td></tr></table></figure><h3 id="第一次循环（建映射，创建“影子节点”）"><a href="#第一次循环（建映射，创建“影子节点”）" class="headerlink" title="第一次循环（建映射，创建“影子节点”）"></a><strong>第一次循环（建映射，创建“影子节点”）</strong></h3><ul><li><p><strong>p</strong> 是原链表的当前节点（原节点对象）</p></li><li><p>在字典 <code>d</code> 中：</p><ul><li><p><strong>key</strong> = <code>p</code>（原节点的引用）</p></li><li><p><strong>value</strong> = <code>Node(p.val, None, None)</code>（一个新建节点对象的引用）</p></li></ul></li><li><p>此时新建节点的 <code>next</code> 和 <code>random</code> 都是 <code>None</code>，所以这些新节点是“孤立点”</p></li></ul><p><strong>例子：</strong><br>原链表： <code>A → B → C</code><br>哈希表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d[A] = A'(next=None, random=None)</span><br><span class="line">d[B] = B'(next=None, random=None)</span><br><span class="line">d[C] = C'(next=None, random=None)</span><br></pre></td></tr></table></figure><hr><h3 id="第二次循环（接指针，补全结构）"><a href="#第二次循环（接指针，补全结构）" class="headerlink" title="第二次循环（接指针，补全结构）"></a><strong>第二次循环（接指针，补全结构）</strong></h3><ul><li><p>目的：把 <code>d[p]</code>（新节点）内部的 <code>next</code> / <code>random</code> 指针补好</p></li><li><p><strong>补 next：</strong></p><ul><li><p>原链表： <code>p.next</code> 是原节点的下一个</p></li><li><p>新链表： <code>d[p].next</code> 应该指向 <code>d[p.next]</code>（下一个原节点对应的新节点）</p></li></ul></li><li><p><strong>补 random：</strong></p><ul><li><p>原链表： <code>p.random</code> 是原节点的随机指向</p></li><li><p>新链表： <code>d[p].random</code> 应该指向 <code>d[p.random]</code>（原节点随机指向对应的新节点）</p></li></ul></li></ul><p><strong>例子（假设 A.random → C）：</strong><br>第二次循环后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A'.next = B'</span><br><span class="line">B'.next = C'</span><br><span class="line">A'.random = C'</span><br></pre></td></tr></table></figure><p>这样，新链表的节点之间关系和原链表完全一致，但对象是全新的。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们用哈希表来解决这个问题&lt;br&gt;首先创建一个哈希表，再遍历原链表，遍历的同时再不断创建新节点&lt;br&gt;我们将原节点作为&lt;strong&gt;key&lt;/strong&gt;，新节点作为&lt;strong&gt;value&lt;/strong&gt;放入哈希表中&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>基本面分析</title>
    <link href="https://jayli19707.github.io/2025/08/12/%E5%9F%BA%E6%9C%AC%E9%9D%A2%E5%88%86%E6%9E%90/"/>
    <id>https://jayli19707.github.io/2025/08/12/%E5%9F%BA%E6%9C%AC%E9%9D%A2%E5%88%86%E6%9E%90/</id>
    <published>2025-08-12T11:17:02.000Z</published>
    <updated>2025-08-12T11:17:29.916Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TTM"><a href="#TTM" class="headerlink" title="TTM"></a>TTM</h1><p>TTM 是 <strong>Trailing Twelve Months</strong> 的缩写，意思是<strong>过去连续 12 个月</strong></p><h2 id="1-计算方法"><a href="#1-计算方法" class="headerlink" title="1. 计算方法"></a>1. <strong>计算方法</strong></h2><p>TTM 不是按自然年（1 月到 12 月），而是取<strong>最近连续的四个季度</strong>的数据相加。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.72ex;" xmlns="http://www.w3.org/2000/svg" width="46.923ex" height="2.313ex" role="img" focusable="false" viewBox="0 -704 20740 1022.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="msub" transform="translate(1408,0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1003,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g></g></g><g data-mml-node="mo" transform="translate(4153,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(5208.8,0)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="TeXAtom" transform="translate(824,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g></g></g><g data-mml-node="mo" transform="translate(7719.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(8719.4,0)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="TeXAtom" transform="translate(824,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mo" transform="translate(2000,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12133.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(13133.8,0)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="TeXAtom" transform="translate(824,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mo" transform="translate(2000,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2778,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(16547.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(17548.1,0)"><g data-mml-node="mi"><path data-c="1D444" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="TeXAtom" transform="translate(824,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mo" transform="translate(2000,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2778,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(20740,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g></g></g></svg></mjx-container></p><p>其中 Q表示季度数据，可以是净利润、营收、EPS 等。</p><h2 id="2-为什么用-TTM"><a href="#2-为什么用-TTM" class="headerlink" title="2. 为什么用 TTM"></a>2. <strong>为什么用 TTM</strong></h2><ul><li><p><strong>最新性</strong>：比上一完整财年更及时，反映公司最近 12 个月的实际表现。</p></li><li><p><strong>去季节性影响</strong>：比如零售业第四季度旺季，TTM 结合四个季度消除了单季波动影响。</p></li><li><p><strong>可比性</strong>：投资分析中常用 TTM 数据来比较不同公司的盈利能力，因为它都是“滚动 12 个月”的概念。</p></li></ul><h2 id="3-例子"><a href="#3-例子" class="headerlink" title="3. 例子"></a>3. <strong>例子</strong></h2><p>假设今天是 2025 年 8 月，某公司最近四个季度净利润分别是：</p><ul><li><p>2025 Q2：280 亿美元</p></li><li><p>2025 Q1：270 亿美元</p></li><li><p>2024 Q4：300 亿美元</p></li><li><p>2024 Q3：260 亿美元</p></li></ul><p>则：</p><p>TTM 净利润=280+270+300+260=1110 亿美元</p><hr><h1 id="每股收益（EPS-Earnings-Per-Share）"><a href="#每股收益（EPS-Earnings-Per-Share）" class="headerlink" title="每股收益（EPS, Earnings Per Share）"></a>每股收益（EPS, Earnings Per Share）</h1><ul><li><strong>公式</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex;" xmlns="http://www.w3.org/2000/svg" width="28.714ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 12691.6 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="45" d="M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(681,0)"></path><path data-c="53" d="M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z" transform="translate(1362,0)"></path></g><g data-mml-node="mo" transform="translate(2195.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3251.6,0)"><g data-mml-node="mtext" transform="translate(3220,676)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">净</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">利</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">润</text></g><g data-mml-node="mtext" transform="translate(220,-710)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">通</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">在</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">外</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">普</text><text data-variant="normal" transform="translate(5000,0) scale(1,-1)" font-size="884px" font-family="serif">通</text><text data-variant="normal" transform="translate(6000,0) scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(7000,0) scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(8000,0) scale(1,-1)" font-size="884px" font-family="serif">数</text></g><rect width="9200" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(12691.6,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g></g></g></svg></mjx-container></li></ul><p>其中净利润用过去 12 个月（TTM）或预计未来 12 个月的数值。</p><ul><li><strong>反映的含义</strong><br>  EPS 表示公司每一股普通股带来的盈利能力，是衡量公司盈利水平的最基础单位指标。EPS 高，意味着每一股的盈利贡献大；EPS 低，说明盈利摊薄或盈利能力弱。</li></ul><h1 id="市盈率（P-E-Price-to-Earnings-Ratio）"><a href="#市盈率（P-E-Price-to-Earnings-Ratio）" class="headerlink" title="市盈率（P/E, Price-to-Earnings Ratio）"></a>市盈率（P/E, Price-to-Earnings Ratio）</h1><ul><li><strong>公式</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.602ex;" xmlns="http://www.w3.org/2000/svg" width="12.75ex" height="4.828ex" role="img" focusable="false" viewBox="0 -1426 5635.6 2134"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z"></path><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" transform="translate(681,0)"></path><path data-c="45" d="M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z" transform="translate(1181,0)"></path></g><g data-mml-node="mo" transform="translate(2139.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3195.6,0)"><g data-mml-node="mtext" transform="translate(220,676)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mtext" transform="translate(261,-686)"><path data-c="45" d="M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(681,0)"></path><path data-c="53" d="M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z" transform="translate(1362,0)"></path></g><rect width="2200" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br>或者写成：</li></ul><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex;" xmlns="http://www.w3.org/2000/svg" width="17.275ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 7635.6 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z"></path><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" transform="translate(681,0)"></path><path data-c="45" d="M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z" transform="translate(1181,0)"></path></g><g data-mml-node="mo" transform="translate(2139.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3195.6,0)"><g data-mml-node="mtext" transform="translate(220,676)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">公</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">司</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">市</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mtext" transform="translate(720,-710)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">净</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">利</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">润</text></g><rect width="4200" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><ul><li><p><strong>反映的含义</strong><br>  P/E 表示投资者愿意为公司每 1 美元的盈利支付多少倍的价格。</p></li><li><p>P/E 高 → 投资者对未来增长预期高（但也可能是被高估）。</p></li><li><p>P/E 低 → 可能被低估，或者增长前景差。</p></li></ul><h1 id="盈利收益率（Earnings-Yield）"><a href="#盈利收益率（Earnings-Yield）" class="headerlink" title="盈利收益率（Earnings Yield）"></a>盈利收益率（Earnings Yield）</h1><ul><li><strong>公式</strong></li></ul><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex;" xmlns="http://www.w3.org/2000/svg" width="30.65ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 13547.1 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">盈</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">利</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">收</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">益</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(5277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(6333.6,0)"><g data-mml-node="mtext" transform="translate(261,676)"><path data-c="45" d="M128 619Q121 626 117 628T101 631T58 634H25V680H597V676Q599 670 611 560T625 444V440H585V444Q584 447 582 465Q578 500 570 526T553 571T528 601T498 619T457 629T411 633T353 634Q266 634 251 633T233 622Q233 622 233 621Q232 619 232 497V376H286Q359 378 377 385Q413 401 416 469Q416 471 416 473V493H456V213H416V233Q415 268 408 288T383 317T349 328T297 330Q290 330 286 330H232V196V114Q232 57 237 52Q243 47 289 47H340H391Q428 47 452 50T505 62T552 92T584 146Q594 172 599 200T607 247T612 270V273H652V270Q651 267 632 137T610 3V0H25V46H58Q100 47 109 49T128 61V619Z"></path><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z" transform="translate(681,0)"></path><path data-c="53" d="M55 507Q55 590 112 647T243 704H257Q342 704 405 641L426 672Q431 679 436 687T446 700L449 704Q450 704 453 704T459 705H463Q466 705 472 699V462L466 456H448Q437 456 435 459T430 479Q413 605 329 646Q292 662 254 662Q201 662 168 626T135 542Q135 508 152 480T200 435Q210 431 286 412T370 389Q427 367 463 314T500 191Q500 110 448 45T301 -21Q245 -21 201 -4T140 27L122 41Q118 36 107 21T87 -7T78 -21Q76 -22 68 -22H64Q61 -22 55 -16V101Q55 220 56 222Q58 227 76 227H89Q95 221 95 214Q95 182 105 151T139 90T205 42T305 24Q352 24 386 62T420 155Q420 198 398 233T340 281Q284 295 266 300Q261 301 239 306T206 314T174 325T141 343T112 367T85 402Q55 451 55 507Z" transform="translate(1362,0)"></path></g><g data-mml-node="mtext" transform="translate(220,-710)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">价</text></g><rect width="2200" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9051.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(10107.1,0)"><g data-mml-node="mtext" transform="translate(220,676)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">净</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">利</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">润</text></g><g data-mml-node="mtext" transform="translate(720,-710)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">市</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">值</text></g><rect width="3200" height="60" x="120" y="220"></rect></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(13547.1,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g></g></g></svg></mjx-container></p><ul><li><p><strong>反映的含义</strong><br>  它是 P/E 的倒数，直接告诉你“买下这家公司，每投入 1 美元，按当前盈利能得到多少美元的利润”。</p></li><li><p>可以和<strong>无风险利率</strong>（如美债收益率）对比：高于无风险利率 → 相对有吸引力。</p></li></ul><h1 id="市净率（P-B-Price-to-Book-Ratio）"><a href="#市净率（P-B-Price-to-Book-Ratio）" class="headerlink" title="市净率（P/B, Price-to-Book Ratio）"></a>市净率（P/B, Price-to-Book Ratio）</h1><ul><li><strong>公式</strong></li></ul><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex;" xmlns="http://www.w3.org/2000/svg" width="19.599ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 8662.6 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><path data-c="50" d="M130 622Q123 629 119 631T103 634T60 637H27V683H214Q237 683 276 683T331 684Q419 684 471 671T567 616Q624 563 624 489Q624 421 573 372T451 307Q429 302 328 301H234V181Q234 62 237 58Q245 47 304 46H337V0H326Q305 3 182 3Q47 3 38 0H27V46H60Q102 47 111 49T130 61V622ZM507 488Q507 514 506 528T500 564T483 597T450 620T397 635Q385 637 307 637H286Q237 637 234 628Q231 624 231 483V342H302H339Q390 342 423 349T481 382Q507 411 507 488Z"></path><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z" transform="translate(681,0)"></path><path data-c="42" d="M131 622Q124 629 120 631T104 634T61 637H28V683H229H267H346Q423 683 459 678T531 651Q574 627 599 590T624 512Q624 461 583 419T476 360L466 357Q539 348 595 302T651 187Q651 119 600 67T469 3Q456 1 242 0H28V46H61Q103 47 112 49T131 61V622ZM511 513Q511 560 485 594T416 636Q415 636 403 636T371 636T333 637Q266 637 251 636T232 628Q229 624 229 499V374H312L396 375L406 377Q410 378 417 380T442 393T474 417T499 456T511 513ZM537 188Q537 239 509 282T430 336L329 337H229V200V116Q229 57 234 52Q240 47 334 47H383Q425 47 443 53Q486 67 511 104T537 188Z" transform="translate(1181,0)"></path></g><g data-mml-node="mo" transform="translate(2166.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3222.6,0)"><g data-mml-node="mtext" transform="translate(1720,676)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mtext" transform="translate(220,-710)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">净</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">资</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">产</text></g><rect width="5200" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>​</p><p>每股净资产 = （总资产 − 总负债） ÷ 流通股数。</p><ul><li><p><strong>反映的含义</strong><br>  P/B 表示市场价格与账面价值的比值。</p></li><li><p>P/B &lt; 1 → 市场价格低于账面价值，可能被低估。</p></li><li><p>P/B 高 → 市场对其资产的盈利能力和未来价值预期高。</p></li></ul><h1 id="PEG-比率（Price-Earnings-to-Growth）"><a href="#PEG-比率（Price-Earnings-to-Growth）" class="headerlink" title="PEG 比率（Price/Earnings to Growth）"></a><strong>PEG 比率（Price/Earnings to Growth）</strong></h1><ul><li><p><strong>公式</strong>：<br>  PEG = 市盈率（P/E） ÷ 盈利增长率（按百分比取值）</p></li><li><p><strong>含义</strong>：<br>  PEG 把估值（P/E）和盈利增长结合起来看。</p><ul><li><p>PEG ≈ 1 → 估值和增长基本匹配</p></li><li><p>PEG &lt; 1 → 可能低估（盈利增长快、股价不算贵）</p></li><li><p>PEG &gt; 1 → 可能高估（股价高，但增长慢）</p></li></ul></li></ul><h1 id="股息收益率（Dividend-Yield）"><a href="#股息收益率（Dividend-Yield）" class="headerlink" title="股息收益率（Dividend Yield）"></a>股息收益率（Dividend Yield）</h1><ul><li><strong>公式</strong></li></ul><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex;" xmlns="http://www.w3.org/2000/svg" width="28.899ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 12773.6 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtext"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">息</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">收</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">益</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(5277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(6333.6,0)"><g data-mml-node="mtext" transform="translate(220,676)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(2000,0) scale(1,-1)" font-size="884px" font-family="serif">年</text><text data-variant="normal" transform="translate(3000,0) scale(1,-1)" font-size="884px" font-family="serif">度</text><text data-variant="normal" transform="translate(4000,0) scale(1,-1)" font-size="884px" font-family="serif">分</text><text data-variant="normal" transform="translate(5000,0) scale(1,-1)" font-size="884px" font-family="serif">红</text></g><g data-mml-node="mtext" transform="translate(2220,-710)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">股</text><text data-variant="normal" transform="translate(1000,0) scale(1,-1)" font-size="884px" font-family="serif">价</text></g><rect width="6200" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><ul><li><strong>反映的含义</strong><br>  股息收益率衡量你买下股票后，仅凭分红能得到多少现金回报。高收益率适合追求稳定现金流的投资者，但要注意分红是否可持续。</li></ul><hr><h1 id="Alphabet（GOOGL）财务与估值分析"><a href="#Alphabet（GOOGL）财务与估值分析" class="headerlink" title="**Alphabet（GOOGL）财务与估值分析"></a>**Alphabet（GOOGL）财务与估值分析</h1><p>（截至 2025 年 8 月最新数据）</p><h3 id="1-基础数据"><a href="#1-基础数据" class="headerlink" title="1. 基础数据"></a>1. 基础数据</h3><ul><li><p><strong>股价</strong>：约 201 美元</p></li><li><p><strong>市值</strong>：约 2.13 万亿美元</p></li><li><p><strong>TTM 净利润</strong>：约 1,155.7 亿美元</p></li><li><p><strong>流通在外普通股</strong>：约 106 亿股</p></li></ul><h3 id="2-核心指标计算"><a href="#2-核心指标计算" class="headerlink" title="2. 核心指标计算"></a>2. 核心指标计算</h3><ol><li><p><strong>EPS（每股收益）</strong><br> EPS = 净利润 ÷ 股数<br> = 1,155.7 亿美元 ÷ 106 亿股<br> ≈ <strong>10.9 美元/股</strong><br> → 每股在过去一年给股东带来了 10.9 美元的盈利。</p></li><li><p><strong>P/E（市盈率）</strong><br> P/E = 股价 ÷ EPS<br> = 201 ÷ 10.9<br> ≈ <strong>18.4 倍</strong><br> → 投资者为 Alphabet 每 1 美元的盈利支付约 18.4 美元，处于美股大型科技公司中等水平。</p></li><li><p><strong>盈利收益率（Earnings Yield）</strong><br> 盈利收益率 = EPS ÷ 股价<br> = 10.9 ÷ 201<br> ≈ <strong>5.42%</strong><br> → 如果你买下 Alphabet，相当于每投入 100 美元，按当前盈利水平每年“获得”5.42 美元的利润（未考虑增长与分红）。</p></li><li><p><strong>PEG（估值与增长比）</strong><br> 假设未来 3 年盈利年均增长率约为 15%（市场预期值）。<br> PEG = P/E ÷ 增长率<br> = 18.4 ÷ 15 ≈ <strong>1.23</strong><br> → 略高于 1，说明估值和增长大致匹配，但不算便宜。</p></li><li><p><strong>净利率</strong><br> 假设 Alphabet TTM 营收约为 3,400 亿美元：<br> 净利率 = 净利润 ÷ 营收<br> = 1,155.7 ÷ 3,400 ≈ <strong>34%</strong><br> → 每赚 1 美元收入，就能留下 0.34 美元净利润，属于超高盈利能力。</p></li></ol><h3 id="3-投资含义解读"><a href="#3-投资含义解读" class="headerlink" title="3. 投资含义解读"></a>3. 投资含义解读</h3><p>Alphabet 当前的市盈率约 18.4 倍，盈利收益率 5.42%，明显高于当前美债收益率（~4%），意味着在相同风险下，它的盈利能力具备一定吸引力。净利率高达 34%，显示出极强的成本控制和业务护城河。不过 PEG 略高于 1，说明估值和预期增长基本匹配，并非明显低估。从长期投资角度看，它是一个高盈利、现金流稳健、业务多元的科技巨头，但如果追求极端的“低估值捡便宜”，可能需要等待市场回调。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;TTM&quot;&gt;&lt;a href=&quot;#TTM&quot; class=&quot;headerlink&quot; title=&quot;TTM&quot;&gt;&lt;/a&gt;TTM&lt;/h1&gt;&lt;p&gt;TTM 是 &lt;strong&gt;Trailing Twelve Months&lt;/strong&gt; 的缩写，意思是&lt;strong&gt;过去连续</summary>
        
      
    
    
    
    <category term="金融" scheme="https://jayli19707.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-25.K个一组翻转链表</title>
    <link href="https://jayli19707.github.io/2025/08/11/Leetcode-25.K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/08/11/Leetcode-25.K%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2025-08-11T11:42:03.000Z</published>
    <updated>2025-08-11T11:44:56.807Z</updated>
    
    <content type="html"><![CDATA[<p>核心还是掌握链表的反转</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250811193745262.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseKGroup</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], k: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        dummy=ListNode(<span class="number">0</span>,head)</span><br><span class="line"></span><br><span class="line">        pre=dummy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">            end =pre</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line"></span><br><span class="line">                end=end.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> end:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            start=pre.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            next_group=end.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            cur=start</span><br><span class="line"></span><br><span class="line">            prev=next_group</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> cur!=next_group:</span><br><span class="line"></span><br><span class="line">                nxt=cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">                cur.<span class="built_in">next</span>=prev</span><br><span class="line"></span><br><span class="line">                prev=cur</span><br><span class="line"></span><br><span class="line">                cur=nxt</span><br><span class="line"></span><br><span class="line">            pre.<span class="built_in">next</span>=end</span><br><span class="line"></span><br><span class="line">            pre=start</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h2 id="1-整条链表反转（一次性从头到尾）"><a href="#1-整条链表反转（一次性从头到尾）" class="headerlink" title="1. 整条链表反转（一次性从头到尾）"></a>1. <strong>整条链表反转</strong>（一次性从头到尾）</h2><p>经典的三指针法：</p><ul><li><p><strong><code>prev</code></strong>：保存反转后部分的头（初始为 <code>None</code>）</p></li><li><p><strong><code>curr</code></strong>：当前正在处理的节点</p></li><li><p><strong><code>next</code></strong>（或 <code>nxt</code>）：提前保存 <code>curr.next</code>，防止链表断开</p></li></ul><p>反转过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prev = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line">curr = head </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> curr:     </span><br><span class="line">nxt = curr.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">curr.<span class="built_in">next</span> = prev  </span><br><span class="line">   </span><br><span class="line">prev = curr    </span><br><span class="line"> </span><br><span class="line">curr = nxt</span><br></pre></td></tr></table></figure><p>✅ 只要 <strong>3 个指针</strong> 就够，空间 O(1)。</p><hr><h2 id="2-反转一段子链（已知子链的首尾）"><a href="#2-反转一段子链（已知子链的首尾）" class="headerlink" title="2. 反转一段子链（已知子链的首尾）"></a>2. <strong>反转一段子链</strong>（已知子链的首尾）</h2><p>除了 <code>prev/curr/nxt</code> 三个工作指针，还要<strong>额外 2 个锚点</strong>：</p><ul><li><p><strong><code>sub_prev</code></strong>：子链前驱（前一段的尾）</p></li><li><p><strong><code>sub_next</code></strong>：子链后继（后一段的头）</p></li></ul><p>反转步骤：</p><ol><li><p>用 <code>sub_prev</code> 和 <code>sub_next</code> 把子链分离出来</p></li><li><p>用 <code>prev/curr/nxt</code> 反转子链</p></li><li><p>反转完接回 <code>sub_prev → 新头</code>，<code>新尾 → sub_next</code></p></li></ol><p>✅ 这里需要 <strong>3 个工作指针 + 2 个锚点 = 5 个指针</strong>。</p><hr><h2 id="3-K-个一组反转"><a href="#3-K-个一组反转" class="headerlink" title="3. K 个一组反转"></a>3. <strong>K 个一组反转</strong></h2><p>这是你现在问的情况，步骤是：</p><ol><li><p>用 <code>pre</code> 找到本组前驱</p></li><li><p>用 <code>end</code> 找到本组尾巴（走 k 步）</p></li><li><p>用 <code>next_group = end.next</code> 保存下一组的起点</p></li><li><p>用 <code>prev/curr/nxt</code> 反转 <code>[start, end]</code></p></li><li><p>反转完接回并让 <code>pre</code> 移到新尾（原来的 start）</p></li></ol><p>常用指针：</p><ul><li><p>跨组锚点：<code>pre</code>、<code>end</code>、<code>next_group</code>（3 个）</p></li><li><p>反转工作：<code>prev</code>、<code>curr</code>、<code>nxt</code>（3 个）</p></li></ul><p>✅ 总共 <strong>固定 6 个指针</strong>，不随 k 增加而增加。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;核心还是掌握链表的反转&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-24.两两交换链表中的节点</title>
    <link href="https://jayli19707.github.io/2025/08/10/Leetcode-24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>https://jayli19707.github.io/2025/08/10/Leetcode-24.%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</id>
    <published>2025-08-10T15:51:17.000Z</published>
    <updated>2025-08-10T15:54:55.802Z</updated>
    
    <content type="html"><![CDATA[<p>设置好虚拟头节点，想好断开的位置的时候，前后连的节点怎么处理。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250810231452141.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swapPairs</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        dummy=ListNode(<span class="number">0</span>,head)</span><br><span class="line"></span><br><span class="line">        dummy_head=dummy</span><br><span class="line"></span><br><span class="line">        tail=head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> tail <span class="keyword">and</span> tail.<span class="built_in">next</span>:</span><br><span class="line"></span><br><span class="line">            q=tail.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            temp=q.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            tail.<span class="built_in">next</span>=temp</span><br><span class="line"></span><br><span class="line">            dummy.<span class="built_in">next</span>=q</span><br><span class="line"></span><br><span class="line">            q.<span class="built_in">next</span>=tail</span><br><span class="line"></span><br><span class="line">            tail.<span class="built_in">next</span>=temp</span><br><span class="line"></span><br><span class="line">            dummy=tail</span><br><span class="line"></span><br><span class="line">            tail=tail.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy_head.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>首先先设置好虚拟头节点，想好断开的位置的时候，前后连的节点怎么处理。</p><ul><li><p>保证了<strong>前驱→新头</strong>这一条边不会断，链表保持连通。</p></li><li><p>用 <code>temp</code> 保存下一段，避免丢失后续链表。</p></li><li><p>循环条件 <code>while tail and tail.next:</code> 避免空指针错误。</p></li><li><p>每轮交换后把 <code>dummy</code>、<code>tail</code> 一起前移，循环能正确推进</p></li></ul><p>符号：</p><ul><li><p><code>dummy</code>：本轮要交换的两个节点前面的那个节点（前驱）</p></li><li><p><code>tail</code>：这一对的第一个节点（旧头）</p></li><li><p><code>q</code>：这一对的第二个节点（要换到前面的新头）</p></li><li><p><code>temp</code>：下一段链表的起点（可能是下一个 pair 的第一个节点，也可能是 None）</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;设置好虚拟头节点，想好断开的位置的时候，前后连的节点怎么处理。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>美股杠杆 etf 不能长期持有？杠杆损耗</title>
    <link href="https://jayli19707.github.io/2025/08/10/%E7%BE%8E%E8%82%A1%E6%9D%A0%E6%9D%86%20etf%20%E4%B8%8D%E8%83%BD%E9%95%BF%E6%9C%9F%E6%8C%81%E6%9C%89%EF%BC%9F%E6%9D%A0%E6%9D%86%E6%8D%9F%E8%80%97/"/>
    <id>https://jayli19707.github.io/2025/08/10/%E7%BE%8E%E8%82%A1%E6%9D%A0%E6%9D%86%20etf%20%E4%B8%8D%E8%83%BD%E9%95%BF%E6%9C%9F%E6%8C%81%E6%9C%89%EF%BC%9F%E6%9D%A0%E6%9D%86%E6%8D%9F%E8%80%97/</id>
    <published>2025-08-10T06:03:03.000Z</published>
    <updated>2025-08-10T06:03:10.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h1><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="10.328ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 4565 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(954,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1526,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1824,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(2824,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3185,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(3645,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4105,0)"><path data-c="1D45E" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container> 这类杠杆 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="3.115ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 1377 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(466,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(827,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container> 单边市下📈超过三倍，📉不到三倍，但震荡市相反。<br>如果对行情把握比较好，且是单边上涨，可以长期持仓，效果会超级好，否则不建议长期持有</p><h1 id="1-单边上涨（📈-正股持续涨）"><a href="#1-单边上涨（📈-正股持续涨）" class="headerlink" title="1. 单边上涨（📈 正股持续涨）"></a><strong>1. 单边上涨（📈 正股持续涨）</strong></h1><ul><li><p>由于杠杆ETF是每日按「目标倍数」调仓，每天涨 1% → 杠杆ETF 涨 3%。</p><p>  正股连续上涨 假设：<br>  SOXX 连续 20 天每天涨 +1%<br>  SOXL 则每天 +3%<br>  初始净值：100 计算：<br>  SOXX 最终净值： 100 × (1.01)^{20} ≈ 122.0（涨幅 +22%）<br>  SOXL 最终净值： 100 × (1.03)^{20} ≈ 180.6（涨幅 +80.6%）<br><br>  SOXX 涨 22%，而 SOXL 实际涨了 80.6%。</p></li><li><p>复利叠加后，20天下来，实际涨幅会<strong>超过线性 3 倍</strong>。</p></li><li><p>原因：<strong>复利放大效应</strong>——每天在更高的净值基础上继续乘以 3% 的涨幅，结果会超出单纯的 3 倍计算。</p></li><li><p>结论：单边上涨时，杠杆ETF超额跑赢。</p></li></ul><hr><h1 id="2-单边下跌（📉-正股持续跌）"><a href="#2-单边下跌（📉-正股持续跌）" class="headerlink" title="2. 单边下跌（📉 正股持续跌）"></a><strong>2. 单边下跌（📉 正股持续跌）</strong></h1><ul><li><p>每天跌 1%，杠杆ETF 跌 3%。</p><p>  正股连续下跌 假设：<br>  SOXX 连续 20 天每天跌 -1%<br>  SOXL 每天跌 -3%<br>  初始净值：100 计算：<br>  SOXX 最终净值： 100 × (0.99)^{20} ≈ 81.8（跌幅 -18.2%）<br>  SOXL 最终净值： 100 × (0.97)^{20} ≈ 54.0（跌幅 -46%）<br>  SOXX 跌 18.2%，而 SOXL 跌了 46%。</p></li><li><p>复利效应导致跌幅<strong>小于线性 3 倍</strong>。</p></li><li><p>原因：<strong>边际缓冲效应</strong>——随着净值越来越低，按百分比计算的绝对亏损金额变小，跌幅比例会被“压缩”。</p></li><li><p>结论：单边下跌时，杠杆ETF跌得没那么惨（但仍然是大跌）。</p></li></ul><hr><h1 id="3-横盘震荡（-5-、-5-来回）"><a href="#3-横盘震荡（-5-、-5-来回）" class="headerlink" title="3. 横盘震荡（+5%、-5% 来回）"></a><strong>3. 横盘震荡（+5%、-5% 来回）</strong></h1><ul><li><p>指数波动但不走趋势，最终几乎没跌。</p><p>  正股震荡横盘（+5%、-5% 来回10轮） 假设：</p><p>  SOXX 每两天一个周期：+5%，-5%<br>  SOXL 对应：+15%，-15%<br>  共震荡 10轮（20天） </p><p>  计算：<br>  SOXX 每轮回报：1.05 × 0.95 = 0.9975 期末净值： 100 × 0.9975^{10} ≈ 97.54（跌幅 -2.46%）<br>  SOXL 每轮回报：1.15 × 0.85 = 0.9775 期末净值： 100 × 0.9775^{10} ≈ 78.3（跌幅 -21.7%）<br>  ⚠️ 虽然指数几乎没跌，但 SOXL 已经亏掉了五分之一，这就是杠杆腐蚀效应（leverage decay）。</p></li><li><p>杠杆ETF因每天被强制放大波动，先涨 15%，再跌 15%，等价于不断乘以 1.15×0.85 &lt; 1。</p></li><li><p>反复多次后，净值显著缩水。</p></li><li><p>原因：<strong>波动衰减（Volatility Decay）</strong>——上涨后的跌幅比下跌后的涨幅更伤本金，杠杆放大了这种磨损。</p></li><li><p>结论：震荡市是杠杆ETF最大的杀手，即使指数不跌，你也亏。</p></li></ul><hr><h1 id="4-关键-takeaway"><a href="#4-关键-takeaway" class="headerlink" title="4. 关键 takeaway"></a><strong>4. 关键 takeaway</strong></h1><ul><li><p>杠杆ETF（SOXL、TQQQ）<strong>适合短期单边趋势行情</strong>，能放大收益；</p></li><li><p><strong>不适合长期持有</strong>，特别是震荡行情，会被“磨掉本金”；</p></li><li><p>基金说明书已经明确警告这一点，所以不要当成“长期翻倍神器”。</p></li></ul><hr>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;结论：&quot;&gt;&lt;a href=&quot;#结论：&quot; class=&quot;headerlink&quot; title=&quot;结论：&quot;&gt;&lt;/a&gt;结论：&lt;/h1&gt;&lt;p&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg</summary>
        
      
    
    
    
    <category term="金融" scheme="https://jayli19707.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-19. 删除链表的倒数第 N 个结点</title>
    <link href="https://jayli19707.github.io/2025/08/09/Leetcode-19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>https://jayli19707.github.io/2025/08/09/Leetcode-19.%20%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC%20N%20%E4%B8%AA%E7%BB%93%E7%82%B9/</id>
    <published>2025-08-09T13:36:14.000Z</published>
    <updated>2025-08-09T13:38:53.111Z</updated>
    
    <content type="html"><![CDATA[<p>这里采用 <strong>计算链表长度法</strong>：</p><ul><li><p>第一次遍历链表，得到链表长度 <code>length</code>。</p></li><li><p>计算要删除节点的<strong>正序位置</strong>：<code>length - n + 1</code>。</p></li><li><p>用一个虚拟头节点 <code>dummy</code> 来统一处理删除头结点的情况。</p></li><li><p>第二次遍历，将要删除的节点跳过，即让前驱节点指向要删除节点的下一个节点。</p></li></ul><hr><p> <strong>解题过程</strong></p><ol><li><p><strong>遍历一次链表</strong>，用 <code>length</code> 记录节点总数。</p></li><li><p><strong>计算要删除的节点前一个节点的位置</strong>，也就是 <code>length - n</code>。</p></li><li><p>使用一个 <strong>dummy 节点</strong> 指向 <code>head</code>，用 <code>tail</code> 指针遍历到该位置。</p></li><li><p>直接跳过目标节点：<code>tail.next = tail.next.next</code>。</p></li><li><p>返回 <code>dummy.next</code> 作为新链表头。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809213543370.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeNthFromEnd</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode], n: <span class="built_in">int</span></span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        num=head</span><br><span class="line"></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> num:</span><br><span class="line"></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            num=num.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        p=head</span><br><span class="line"></span><br><span class="line">        dummy=ListNode()</span><br><span class="line"></span><br><span class="line">        tail=dummy</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i-n):</span><br><span class="line"></span><br><span class="line">            tail.<span class="built_in">next</span>=p</span><br><span class="line"></span><br><span class="line">            p=p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            tail=tail.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        temp=p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        tail.<span class="built_in">next</span>=temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这里采用 &lt;strong&gt;计算链表长度法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一次遍历链表，得到链表长度</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>神经网络-local minima and saddle point</title>
    <link href="https://jayli19707.github.io/2025/08/09/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-local%20minima%20and%20saddle%20point/"/>
    <id>https://jayli19707.github.io/2025/08/09/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-local%20minima%20and%20saddle%20point/</id>
    <published>2025-08-09T09:45:51.000Z</published>
    <updated>2025-08-09T09:45:58.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="当损失函数（Loss）不再下降时"><a href="#当损失函数（Loss）不再下降时" class="headerlink" title="当损失函数（Loss）不再下降时"></a>当损失函数（Loss）不再下降时</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809161442145.png" alt="image.png"></p><p>训练模型时最常遇到的问题：当损失函数（Loss）不再下降时，我们该怎么办？</p><p>通常，我们的第一反应是认为模型走到了一个“临界点”（Critical Point），比如局部最小值（Local Minima）或鞍点（Saddle Point），在这些点上梯度为零，模型无法再更新。</p><p>然而，老师指出，这其实是一种误解。在实际的高维复杂模型中，<strong>Loss不再下降，但梯度（Gradient）的模长（Norm）可能依然非常大</strong>。这意味着参数的更新步伐并没有停止，模型并非“卡”在一个点上。真正的原因更可能是在一个狭长的“山谷”地带，模型在谷底的两侧来回震荡，虽然每一步都在更新，但宏观上Loss值却无法有效下降</p><h2 id="优化失败：不只是局部最小值"><a href="#优化失败：不只是局部最小值" class="headerlink" title="优化失败：不只是局部最小值"></a><strong>优化失败：不只是局部最小值</strong></h2><p>当模型训练停滞，梯度下降算法无法继续更新参数时，我们通常会假设梯度（Gradient）已经接近于零。梯度为零的点被称为“关键点”（Critical Point），它主要分为两类：</p><ol><li><p><strong>局部最小值 (Local Minima)</strong>：这是一个大家都很熟悉的概念。当模型走到一个点，其周围所有方向的损失都比当前点高时，这个点就是局部最小值。此时，模型似乎无路可走。</p></li><li><p><strong>鞍点 (Saddle Point)</strong>：这是另一个梯度为零的点，但它的形状像一个马鞍。在某些方向上，损失会比当前点高，而在另一些方向上，损失会比当前点低。</p></li></ol><h1 id="泰勒展开近似"><a href="#泰勒展开近似" class="headerlink" title="泰勒展开近似"></a>泰勒展开近似</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809164717239.png" alt="image.png"></p><p><strong>1. 展开公式</strong></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.552ex;" xmlns="http://www.w3.org/2000/svg" width="47.571ex" height="4.588ex" role="img" focusable="false" viewBox="0 -1342 21026.2 2028"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(681,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1070,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1539,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2205.8,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mi" transform="translate(3261.6,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(3942.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4331.6,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(5078,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5689.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(6689.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7078.5,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(7769.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(8769.9,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(9516.4,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(10486.2,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(11185.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(12185.6,0)"><g data-mml-node="mn" transform="translate(220,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-686)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="700" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(13125.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(13514.6,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(14205.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(15206,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(15952.5,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,413) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(16922.3,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(17810.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(18199.3,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(18890.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(19890.7,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(20637.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><ul><li><p><strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.99ex" height="2.283ex" role="img" focusable="false" viewBox="0 -759 2205.5 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(681,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1070,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(1816.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></strong>：蓝点的函数值（常数项）</p></li><li><p><strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.669ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 4273.7 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1080.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2080.4,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(2826.9,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(3796.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container></strong>：绿色实线，一阶梯度项，切线近似</p></li><li><p><strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.781ex;" xmlns="http://www.w3.org/2000/svg" width="19.67ex" height="2.737ex" role="img" focusable="false" viewBox="0 -864.9 8694.2 1209.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mn" transform="translate(220,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mn" transform="translate(220,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><rect width="553.6" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(793.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1182.6,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1873.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2874,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(3620.5,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(4590.3,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(5478.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5867.3,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(6558.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(7558.7,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(8305.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></strong>：红色二阶项，用曲率修正一阶近似的误差</p></li></ul><p><strong>2. 图中对应关系</strong></p><ul><li><p><strong>蓝色点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.689ex" height="1.74ex" role="img" focusable="false" viewBox="0 -759 746.5 769"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="TeXAtom" transform="translate(502,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g></g></g></g></svg></mjx-container></strong>：展开点（已知值）</p></li><li><p><strong>绿色实线</strong>：梯度一阶近似 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.669ex" height="2.47ex" role="img" focusable="false" viewBox="0 -841.7 4273.7 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(1080.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(2080.4,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(502,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="msup" transform="translate(2826.9,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mi" transform="translate(3796.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></mjx-container>，表示沿切线方向的预测变化量</p></li><li><p><strong>红色曲线修正部分</strong>：二阶 Hessian 项，考虑曲率后得到更准确的近似</p></li><li><p><strong>黑色曲线</strong>：真实函数 L(θ)</p></li></ul><p><strong>3. 几何含义</strong></p><ul><li><p>从蓝点到黑点的垂直高度 = 常数项 + 一阶项 + 二阶项</p></li><li><p>一阶项（绿色）= 变化率 × 位移（通过点乘得到）</p></li><li><p>二阶项（红色）= 曲率修正，使近似贴合真实曲线</p></li></ul><h1 id="数学角度判断critical-point"><a href="#数学角度判断critical-point" class="headerlink" title="数学角度判断critical point"></a>数学角度判断critical point</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809170330973.png" alt="image.png"></p><h1 id="saddle-point-还可以下降"><a href="#saddle-point-还可以下降" class="headerlink" title="saddle point 还可以下降"></a>saddle point 还可以下降</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809172911281.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809173008882.png" alt="image.png"></p><h1 id="高维空间的普遍现象：鞍点远多于局部最小值"><a href="#高维空间的普遍现象：鞍点远多于局部最小值" class="headerlink" title="高维空间的普遍现象：鞍点远多于局部最小值"></a>高维空间的普遍现象：鞍点远多于局部最小值</h1><p>深度学习模型的参数动辄百万甚至上亿，其损失函数存在于一个极高的维度空间中。有研究表明，在这种高维空间里，真正的局部最小值其实非常罕见。我们训练时遇到的大多数梯度为零的关键点，实际上都是鞍点。实验证据也支持了这一假说：在模型训练停滞时，其对应的Hessian矩阵通常仍包含大量的负特征值，这意味着在许多维度上，仍然存在可以降低损失的路径。</p><h2 id="Minimum-ratio："><a href="#Minimum-ratio：" class="headerlink" title="Minimum ratio："></a>Minimum ratio：</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.059ex;" xmlns="http://www.w3.org/2000/svg" width="35.325ex" height="5.285ex" role="img" focusable="false" viewBox="0 -1426 15613.6 2336"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mi" transform="translate(1051,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1396,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1996,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2341,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3219,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3791,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4669,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5120,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5649,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(6010,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6355,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mo" transform="translate(7117.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(8173.6,0)"><g data-mml-node="mrow" transform="translate(220,676)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">正</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">特</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">征</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">特</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">征</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g></g><rect width="7200" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>这个比率可以看作是判断一个“critical point ”（梯度为零的点）究竟是<strong>局部最小值</strong>还是<strong>鞍点</strong>的一个量化指标。</p><p>让我们来深入解读一下这个比率的含义：</p><ol><li><p><strong>当比率 = 1时</strong>：</p><ul><li><p>这意味着Hessian矩阵所有的特征值都是正数。</p></li><li><p>根据我们之前的讨论，这正是<strong>局部最小值 (Local Minimum)</strong> 的明确数学定义。此时，无论你从哪个方向离开这个点，损失函数的值都会上升。</p></li></ul></li><li><p><strong>当 0 &lt; 比率 &lt; 1时</strong>：</p><ul><li><p>这意味着Hessian矩阵的特征值中，既有正数也有负数。</p></li><li><p>这就是<strong>鞍点 (Saddle Point)</strong> 的情况。这个比率告诉我们，存在一些方向（对应正特征值）可以让损失函数上升，同时也存在另一些方向（对应负特征值）可以让损失函数下降。</p></li></ul></li><li><p><strong>当比率 = 0时</strong>：</p><ul><li><p>这意味着所有的特征值都是负数。</p></li><li><p>这种情况对应的是<strong>局部最大值 (Local Maximum)</strong>，在损失函数优化中这通常不是我们关心的问题。</p></li></ul></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;当损失函数（Loss）不再下降时&quot;&gt;&lt;a href=&quot;#当损失函数（Loss）不再下降时&quot; class=&quot;headerlink&quot; title=&quot;当损失函数（Loss）不再下降时&quot;&gt;&lt;/a&gt;当损失函数（Loss）不再下降时&lt;/h1&gt;&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>神经网络-LossFunction</title>
    <link href="https://jayli19707.github.io/2025/08/09/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-LossFunction/"/>
    <id>https://jayli19707.github.io/2025/08/09/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-LossFunction/</id>
    <published>2025-08-08T18:39:39.000Z</published>
    <updated>2025-08-08T18:39:46.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分类问题当作回归问题分析"><a href="#分类问题当作回归问题分析" class="headerlink" title="分类问题当作回归问题分析"></a>分类问题当作回归问题分析</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809020637001.png" alt="image.png"></p><p>回归输出的是一个数值，而分类的目的是将输入进行归类。<br>一种简单的方法是将类别视为数值标签进行回归，但如果类别之间没有内在的数值关系，这种方法可能会产生问题。</p><p>一个常见的误区是直接用<strong>回归</strong>的方法来处理分类问题。比如，给“猫”赋予标签1，“狗”赋予标签2，“猪”赋予标签3，然后用一个回归模型去预测这个数值。</p><p>这样做有什么问题呢？</p><ul><li><p><strong>隐含的顺序关系</strong>：这样做会给模型一个错误的暗示，即这些类别之间存在某种数学关系（例如，<code>狗</code>是<code>猫</code>和<code>猪</code>的平均值？<code>猪</code>比<code>狗</code>更“大”？）。这在大多数分类场景下是不成立的。</p></li><li><p><strong>多分类的局限</strong>：如果类别之间没有明确的顺序，这种方法很难扩展到多分类问题。</p></li></ul><h1 id="正确地表示分类目标：-One-Hot-编码"><a href="#正确地表示分类目标：-One-Hot-编码" class="headerlink" title="正确地表示分类目标： One-Hot 编码"></a>正确地表示分类目标： One-Hot 编码</h1><ul><li><p><strong>概念</strong>：One-Hot 编码是一种将类别变量转换为机器学习算法易于处理的形式的方法。它将每个类别表示为一个向量，向量的长度等于总类别数，其中只有一个元素是1（表示当前类别），其余所有元素都是0。</p></li><li><p><strong>举例</strong>：</p><ul><li><p>类别1: <code>[1, 0, 0]</code></p></li><li><p>类别2: <code>[0, 1, 0]</code></p></li><li><p>类别3: <code>[0, 0, 1]</code></p></li></ul></li></ul><p>这样做的好处是，类别之间是相互独立的，模型不会错误地学习到它们之间不存在的数值关系。</p><h1 id="修改输出（一个数值变成三组数组）"><a href="#修改输出（一个数值变成三组数组）" class="headerlink" title="修改输出（一个数值变成三组数组）"></a>修改输出（一个数值变成三组数组）</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809020900211.png" alt="image.png"></p><p>实际上在用深度学习解决分类问题的时候就是修改了神经网络的结构，把单一输出，变成一个向量输出，概率输出，从而达到了分类的效果</p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809021012406.png" alt="image.png"></p><p><strong>分类神经网络的输出</strong>：当使用 one-hot 编码作为目标时，神经网络需要输出多个值（例如，三个类别对应三个输出）。这可以通过复制输出层并应用不同的权重和偏置来实现</p><h1 id="Softmax函数："><a href="#Softmax函数：" class="headerlink" title="Softmax函数："></a>Softmax函数：</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809021438787.png" alt="image.png"><br><strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.848ex" height="1.464ex" role="img" focusable="false" viewBox="0 -442 817 647"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>输入叫logit</strong></p><h2 id="模型的输出层设计与-Softmax"><a href="#模型的输出层设计与-Softmax" class="headerlink" title="模型的输出层设计与 Softmax"></a><strong>模型的输出层设计与 Softmax</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809021335890.png" alt="image.png"></p><p>当我们的目标（Label）变成了 One-Hot 向量后，模型的输出（Output）也需要与之对应。</p><ul><li><p><strong>输出层设计</strong>：对于一个三分类问题，模型的输出层需要有3个神经元，分别对应三个类别的预测值。</p></li><li><p><strong>问题</strong>：这3个输出值可能是任意的实数，比如 <code>[3.1, 1.9, 0.2]</code>。我们如何将它转换成类似 <code>[0.7, 0.2, 0.1]</code> 这样，每个值都在0到1之间，且总和为1的“概率”形式呢？</p></li><li><p><strong>解决方案：Softmax 函数</strong> Softmax 函数可以看作是一个“归一化”工具，它能将一组任意实数转换成一个概率分布。它的作用是：</p><ol><li><p><strong>放大差距</strong>：通过指数运算，将大的值变得更大，小的值变得更小。</p></li><li><p><strong>归一化</strong>：将所有输出值缩放到0到1之间，并且它们的总和为1。</p></li></ol></li></ul><p>经过 Softmax 处理后，模型的输出 <code>y'</code> 就变成了一个可以和 One-Hot 标签 <code>y</code> 直接比较的概率向量了。</p><h1 id="分类常用损失函数"><a href="#分类常用损失函数" class="headerlink" title="分类常用损失函数"></a>分类常用损失函数</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809021746937.png" alt="image.png"><br>最小化交叉熵，从信息论的角度来看，等同于最大化对数似然（Maximizing Log-Likelihood），即让模型预测出真实标签的概率尽可能大。</p><h1 id="数学角度分析"><a href="#数学角度分析" class="headerlink" title="数学角度分析"></a>数学角度分析</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250809022356275.png" alt="image.png"></p><h2 id="均方误差-MSE-vs-交叉熵-Cross-Entropy"><a href="#均方误差-MSE-vs-交叉熵-Cross-Entropy" class="headerlink" title="均方误差 (MSE) vs. 交叉熵 (Cross-Entropy)"></a>均方误差 (MSE) vs. 交叉熵 (Cross-Entropy)</h2><ol><li><p><strong>均方误差 (MSE)</strong></p><ul><li><p><strong>原理</strong>：直接计算模型输出概率 <code>y'</code> 和真实标签 <code>y</code> 之间每个元素的差值的平方和。</p></li><li><p><strong>问题</strong>：在分类问题中，MSE 的一个致命缺点是，当模型的预测非常糟糕时（例如，对于正确类别预测的概率接近0），它的梯度（也就是给模型的“纠错信号”）会变得非常小，几乎消失。这被称为 <strong>梯度消失</strong>。</p></li></ul></li><li><p><strong>交叉熵 (Cross-Entropy)</strong></p><ul><li><p><strong>原理</strong>：交叉熵源自信息论，它衡量的是两个概率分布之间的“差异”或“距离”。在机器学习中，它衡量的是模型预测的概率分布 <code>y'</code> 与真实的标签分布 <code>y</code> 之间的差异。</p></li><li><p><strong>优势</strong>：交叉熵的一个巨大优势是，<strong>当模型的预测错得越离谱，它计算出的损失值就越大，产生的梯度也越大</strong>。</p></li></ul></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;分类问题当作回归问题分析&quot;&gt;&lt;a href=&quot;#分类问题当作回归问题分析&quot; class=&quot;headerlink&quot; title=&quot;分类问题当作回归问题分析&quot;&gt;&lt;/a&gt;分类问题当作回归问题分析&lt;/h1&gt;&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-.21合并两个有序链表</title>
    <link href="https://jayli19707.github.io/2025/08/08/Leetcode-.21%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/08/08/Leetcode-.21%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</id>
    <published>2025-08-08T13:45:04.000Z</published>
    <updated>2025-08-08T13:45:36.942Z</updated>
    
    <content type="html"><![CDATA[<p>迭代法是最直观、空间效率最高的方法。它的核心思想是创建一个新的链表，然后同时遍历 <code>list1</code> 和 <code>list2</code>，逐个比较节点的值，将较小的节点依次链接到新链表的末尾。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250808213443917.png" alt="image.png"></p><h3 id="迭代法-Iteration"><a href="#迭代法-Iteration" class="headerlink" title="迭代法 (Iteration)"></a><strong>迭代法 (Iteration)</strong></h3><p>迭代法是最直观、空间效率最高的方法。它的核心思想是创建一个新的链表，然后同时遍历 <code>list1</code> 和 <code>list2</code>，逐个比较节点的值，将较小的节点依次链接到新链表的末尾。</p><p><strong>关键技巧：哨兵节点 (Sentinel Node)</strong></p><p>为了简化在空链表上添加第一个节点的操作，我们通常会创建一个“哨兵节点”（也叫虚拟头节点 <code>dummy</code>）。它不存储任何有效数据，只是作为新链表的临时头部。我们同时用一个 <code>tail</code> 指针来追踪新链表的最后一个节点，方便我们进行添加操作。</p><p><strong>算法步骤：</strong></p><ol><li><p><strong>初始化</strong>：</p><ul><li><p>创建一个哨兵节点 <code>dummy = ListNode()</code>。</p></li><li><p>创建一个指针 <code>tail = dummy</code>，<code>tail</code> 将永远指向新链表的尾部。</p></li></ul></li><li><p><strong>主循环</strong>：当 <code>list1</code> 和 <code>list2</code> 都不为空时，进行循环：</p><ul><li><p>比较 <code>list1.val</code> 和 <code>list2.val</code> 的大小。</p></li><li><p>如果 <code>list1.val</code> 更小，就将 <code>list1</code> 的当前节点链接到 <code>tail.next</code>，然后将 <code>list1</code> 指针后移一位。</p></li><li><p>否则，将 <code>list2</code> 的当前节点链接到 <code>tail.next</code>，然后将 <code>list2</code> 指针后移一位。</p></li><li><p>无论链接了哪个节点，都必须将 <code>tail</code> 指针后移一位 (<code>tail = tail.next</code>)，以确保它始终指向新链表的末尾。</p></li></ul></li><li><p><strong>处理剩余部分</strong>：循环结束后，<code>list1</code> 和 <code>list2</code> 最多只有一个还不为空。我们直接将这个非空的链表剩余的所有部分链接到 <code>tail.next</code> 即可。</p></li><li><p><strong>返回结果</strong>：合并后的新链表的真正头节点是哨兵节点的下一个节点，即 <code>dummy.next</code>。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mergeTwoLists</span>(<span class="params">self, list1: <span class="type">Optional</span>[ListNode], list2: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        dummy=ListNode()</span><br><span class="line"></span><br><span class="line">        tail=dummy</span><br><span class="line"></span><br><span class="line">        p=list1</span><br><span class="line"></span><br><span class="line">        q=list2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">and</span> q:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> p.val&gt;=q.val:</span><br><span class="line"></span><br><span class="line">                tail.<span class="built_in">next</span>=q</span><br><span class="line"></span><br><span class="line">                q=q.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                tail.<span class="built_in">next</span>=p</span><br><span class="line"></span><br><span class="line">                p=p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            tail=tail.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> p==<span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">            tail.<span class="built_in">next</span>=q</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> q==<span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">            tail.<span class="built_in">next</span>=p</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;迭代法是最直观、空间效率最高的方法。它的核心思想是创建一个新的链表，然后同时遍历 &lt;code&gt;list1&lt;/code&gt; 和 &lt;code&gt;list2&lt;/code&gt;，逐个比较节点的值，将较小的节点依次链接到新链表的末尾。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-3477. 水果成篮 II</title>
    <link href="https://jayli19707.github.io/2025/08/05/Leetcode-3477.%20%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE%20II/"/>
    <id>https://jayli19707.github.io/2025/08/05/Leetcode-3477.%20%E6%B0%B4%E6%9E%9C%E6%88%90%E7%AF%AE%20II/</id>
    <published>2025-08-04T20:21:22.000Z</published>
    <updated>2025-08-04T20:26:28.040Z</updated>
    
    <content type="html"><![CDATA[<p>常规使用哈希表既可以解决</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250805042224259.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numOfUnplacedFruits</span>(<span class="params">self, fruits: <span class="type">List</span>[<span class="built_in">int</span>], baskets: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        seen=<span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line"></span><br><span class="line">            placed=<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> indx,basket <span class="keyword">in</span> <span class="built_in">enumerate</span> (baskets):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> indx <span class="keyword">in</span> seen:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> fruit&lt;=basket:</span><br><span class="line"></span><br><span class="line">                    seen[indx]=fruit</span><br><span class="line"></span><br><span class="line">                    placed=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> placed:</span><br><span class="line"></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><p>关键点：是如何写遍历完之后都没有一个合适的篮子。在循环前提前设定好placed=False是个不错的解决方案。其次enumerate起到关键作用，帮助区分当basker出现相同大小数字的情况，用basker的位置进行区分达到很好的效果。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;常规使用哈希表既可以解决&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Accelerating Data Science with AI</title>
    <link href="https://jayli19707.github.io/2025/08/05/Accelerating%20Data%20Science%20with%20AI/"/>
    <id>https://jayli19707.github.io/2025/08/05/Accelerating%20Data%20Science%20with%20AI/</id>
    <published>2025-08-04T19:59:12.000Z</published>
    <updated>2025-08-04T19:59:20.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搞懂Docker核心概念"><a href="#搞懂Docker核心概念" class="headerlink" title="搞懂Docker核心概念"></a><strong>搞懂Docker核心概念</strong></h2><h4 id="第一站：初识Cursor与开发容器-Dev-Container"><a href="#第一站：初识Cursor与开发容器-Dev-Container" class="headerlink" title="第一站：初识Cursor与开发容器(Dev Container)"></a><strong>第一站：初识Cursor与开发容器(Dev Container)</strong></h4><p>一切的开端，是AI为我总结了视频内容：一个名为Cursor的AI代码编辑器，可以通过自然语言，自动为一个项目配置好包含Docker的<strong>开发容器（Dev Container）</strong>。</p><p>我的第一个疑问是：“这不就是把项目打个包吗？有什么用？”</p><p><strong>学习笔记1：为什么需要开发容器？为了解决“环境一致性”</strong></p><p>我了解到，这“简单的一步”解决了开发者最大的噩梦之一：“在我电脑上能跑，在你电脑上就不行”。</p><ul><li><p><strong>传统痛点</strong>：团队成员的电脑系统、软件版本、库版本各不相同，导致代码无法统一运行，大量时间浪费在搭建和调试环境上。</p></li><li><p><strong>容器化解决方案</strong>：通过一个配置文件（<code>devcontainer.json</code>和<code>docker-compose.yml</code>），将项目的运行环境（操作系统、Python版本、所有依赖库、甚至数据库服务）代码化。</p></li><li><p><strong>最终效果</strong>：任何拿到这个项目的人，只需一键（视频中是Cursor的AI指令，传统方法是<code>docker-compose up</code>），就能在几分钟内复刻出一个与我100%一致、完全隔离的开发环境。</p></li></ul><h4 id="第二站：深入Docker的核心——Image与Container之辨"><a href="#第二站：深入Docker的核心——Image与Container之辨" class="headerlink" title="第二站：深入Docker的核心——Image与Container之辨"></a><strong>第二站：深入Docker的核心——Image与Container之辨</strong></h4><p>为了搞清楚这一切是如何实现的，我决定深入学习Docker本身。我首先要理解最基础的两个概念：<code>Dockerfile</code>与<code>Image</code>（镜像）和<code>Container</code>（容器）的关系。</p><p><strong>学习笔记2：一个绝佳的比喻——蓝图、新车与行驶的车</strong></p><p>经过几轮问答，我们最终确定了一个非常清晰的比喻：</p><ol><li><p>Dockerfile = 建筑蓝图/设计图</p><p> 它是一份纯文本文件，里面写满了指令，详细描述了一个应用程序的“标准运行环境”应该是什么样的。它只是一个静态的计划。</p></li><li><p>Image (镜像) = 一辆根据蓝图造好的新车</p><p> 当你运行docker build命令时，Docker会严格按照Dockerfile（蓝图）去构建，最终得到一个镜像。这个镜像就像一辆刚从生产线下来的、崭新的、完整的车。它是静态的、只读的、包含了所有必要部件的模板。</p></li><li><p>Container (容器) = 一辆正在路上行驶的车</p><p> 当你运行docker run命令时，Docker会根据Image（新车模板）创建一个容器。这个容器是动态的、活生生的、正在运行的实例。它在消耗资源（CPU/内存），有自己的状态（日志、临时文件），并对外提供服务。你可以根据一个镜像，创建无数个互不干扰的容器，就像马路上有成千上万辆同型号的车在行驶。</p></li></ol><h4 id="第三站：打通“次元壁”——理解端口映射-Port-Mapping"><a href="#第三站：打通“次元壁”——理解端口映射-Port-Mapping" class="headerlink" title="第三站：打通“次元壁”——理解端口映射 (Port Mapping)"></a><strong>第三站：打通“次元壁”——理解端口映射 (Port Mapping)</strong></h4><p>我很快遇到了下一个逻辑难题：“既然容器是隔离的，那我电脑上的浏览器，怎么访问到容器里运行的程序呢？”</p><p><strong>学习笔记3：端口映射就是“酒店总机”或“快递代收点”</strong></p><p>这里的关键在于理解两个隔离的网络世界：<strong>主机世界</strong>和<strong>容器世界</strong>。</p><ul><li><p><strong>目标</strong>：让主机世界的浏览器，能访问到容器世界里运行在某个端口（比如<code>8008</code>）上的程序。</p></li><li><p><strong>问题</strong>：两个世界默认互不相通。</p></li><li><p><strong>解决方案</strong>：“构建一座桥梁”，也就是<strong>端口映射</strong>。</p></li></ul><p>通过docker run -p 12345:8008命令，我们建立了一条规则：</p><p>“所有发送到主机12345端口的网络请求，请全部转交给容器的8008端口。”</p><p>这个操作就像酒店前台的总机，把外部打给某个特定分机的电话，准确无误地转接给对应的房间。这样，我们就通过这个“桥梁”，打通了主机与容器之间的通信。</p><h4 id="第四站：从单打独斗到团队协作——docker-compose-yml的威力"><a href="#第四站：从单打独斗到团队协作——docker-compose-yml的威力" class="headerlink" title="第四站：从单打独斗到团队协作——docker-compose.yml的威力"></a><strong>第四站：从单打独斗到团队协作——<code>docker-compose.yml</code>的威力</strong></h4><p>当我理解了如何运行一个容器后，一个实际问题浮出水面：“我把项目给同事时，难道要让他手动输入一长串复杂的<code>docker run</code>命令吗？”</p><p><strong>学习笔记4：<code>docker-compose.yml</code>是标准化的“启动说明书”</strong></p><p>这个问题的完美答案就是<code>docker-compose.yml</code>。</p><ul><li><p><strong>对于简单应用</strong>：<code>Dockerfile</code>定义了<strong>如何构建镜像</strong>。</p></li><li><p><strong>对于复杂应用或团队协作</strong>：<code>docker-compose.yml</code>定义了<strong>如何运行容器（或一组容器）</strong>。</p></li></ul><p>在这个YAML文件里，我们可以把所有运行参数都固化下来，包括：</p><ul><li><p>要运行的服务以及它们各自的镜像。</p></li><li><p>端口映射规则（比如<code>ports: - "12345:8008"</code>）。</p></li><li><p>数据卷挂载。</p></li><li><p>容器间的网络关系和依赖。</p></li></ul><p>最终，我的同事拿到我的项目后，不再需要知道任何复杂的<code>docker run</code>命令。他只需要在项目根目录下，运行一句<strong>永不改变的简单命令：<code>docker-compose up</code></strong>，就能得到和我一模一样的、正在运行的应用。</p><h2 id="核心功能（总结得非常好！）"><a href="#核心功能（总结得非常好！）" class="headerlink" title="核心功能（总结得非常好！）"></a><strong>核心功能（总结得非常好！）</strong></h2><ol><li><p><strong>环境自动化与打包 (Docker打包项目)</strong></p><ul><li><p><strong>核心能力</strong>：通过自然语言，一键生成<code>Dockerfile</code>, <code>devcontainer.json</code>, <code>docker-compose.yml</code>等配置文件，将项目的开发、运行环境完全容器化和标准化。</p></li><li><p><strong>解决了</strong>：团队成员间的“环境不一致”问题，以及手动配置Docker的繁琐和易错性。</p></li></ul></li><li><p><strong>AI辅助数据分析与清洗 (简单数据分析, json文件的展开解读)</strong></p><ul><li><p><strong>核心能力</strong>：理解自然语言的数据查询指令（如“哪个用户消费最高？”）并自动生成对应的Pandas代码。同时，能自动解析和“展平”复杂的嵌套JSON文件，将其转换为干净、可分析的表格。</p></li><li><p><strong>解决了</strong>：数据清洗中耗时、繁琐的步骤，并降低了数据探索时对具体代码语法的记忆要求。</p></li></ul></li><li><p><strong>数据工程与管道搭建 (搭建管道连接自己的数据库，进行数据处理)</strong></p><ul><li><p><strong>核心能力</strong>：自动化创建和配置整个数据转换项目（如dbt），包括项目结构、连接配置（如连接Snowflake）、以及核心的SQL转换模型。</p></li><li><p><strong>解决了</strong>：搭建数据管道时，大量的手动配置和“样板代码”编写工作。</p></li></ul></li></ol><h2 id="可以进一步探索的强大功能"><a href="#可以进一步探索的强大功能" class="headerlink" title="可以进一步探索的强大功能"></a><strong>可以进一步探索的强大功能</strong></h2><h4 id="1-核心编码与代码理解"><a href="#1-核心编码与代码理解" class="headerlink" title="1. 核心编码与代码理解"></a><strong>1. 核心编码与代码理解</strong></h4><ul><li><p><strong>与整个代码库对话 (Repository-wide Q&amp;A)</strong></p><ul><li>这是它最强大的功能之一。您可以问一些关于您整个项目的问题，比如：“我们项目的用户认证流程是怎么实现的？”、“<code>User</code>这个数据模型在哪个文件里定义的？”，AI会扫描整个项目来回答您，让您能快速理解一个陌生的、庞大的代码库。</li></ul></li><li><p><strong>代码重构与优化 (Refactoring &amp; Optimization)</strong></p><ul><li>您可以选中一段写得比较混乱或者效率低下的代码，然后对AI说：“请帮我重构这段代码，让它更清晰易读”或者“能优化一下这个循环的性能吗？”。AI会为你提供一个更好的版本。</li></ul></li><li><p><strong>智能代码生成 (Context-aware Code Generation)</strong></p><ul><li>这超越了简单的代码补全。您可以写一行注释，比如<code># 写一个函数，接收一个URL，下载图片并保存到本地</code>，然后让AI为您生成整个函数体。</li></ul></li><li><p><strong>语言学习与语法教练 (Language Tutor)</strong></p><ul><li>当您遇到一段看不懂的、用其他语言（比如Rust, Go）写的代码时，可以问AI：“请用中文解释一下这段代码是做什么的？”。它能像一个耐心的老师一样为您讲解。</li></ul></li></ul><h4 id="2-调试与测试"><a href="#2-调试与测试" class="headerlink" title="2. 调试与测试"></a><strong>2. 调试与测试</strong></h4><ul><li><p><strong>智能调试 (Intelligent Debugging)</strong></p><ul><li>正如我们看到的连接数据库的例子，当您的程序抛出错误时，您可以直接把错误信息“喂”给AI，然后问：“这个错误是什么意思？我该如何修复它？”。</li></ul></li><li><p><strong>自动生成测试用例 (Test Case Generation)</strong></p><ul><li>这是一个能极大提升软件质量和节省时间的功能。您可以选中一个函数，然后对AI说：“请用pytest框架为这个函数编写单元测试”。AI会自动分析函数的输入、输出和边界情况，为您生成一套基础的测试用例。</li></ul></li></ul><h4 id="3-文档与沟通"><a href="#3-文档与沟通" class="headerlink" title="3. 文档与沟通"></a><strong>3. 文档与沟通</strong></h4><ul><li><p><strong>自动生成文档 (Documentation Generation)</strong></p><ul><li>您可以要求AI为您写的函数或类自动生成符合规范的文档字符串（Docstrings）。或者，让它扫描您的项目，并生成一个基础的<code>README.md</code>项目说明文件。</li></ul></li><li><p><strong>生成Git提交信息 (Git Commit Message Generation)</strong></p><ul><li>当您完成了一些代码改动后，有些AI工具可以分析您的代码变更（<code>git diff</code>），并为您推荐一条符合规范的、清晰的Git提交信息。</li></ul></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;搞懂Docker核心概念&quot;&gt;&lt;a href=&quot;#搞懂Docker核心概念&quot; class=&quot;headerlink&quot; title=&quot;搞懂Docker核心概念&quot;&gt;&lt;/a&gt;&lt;strong&gt;搞懂Docker核心概念&lt;/strong&gt;&lt;/h2&gt;&lt;h4</summary>
        
      
    
    
    
    <category term="计算机" scheme="https://jayli19707.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-141.环形链表</title>
    <link href="https://jayli19707.github.io/2025/08/02/Leetcode-141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/08/02/Leetcode-141.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</id>
    <published>2025-08-02T13:25:37.754Z</published>
    <updated>2025-08-02T13:25:30.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dict和set"><a href="#dict和set" class="headerlink" title="dict和set"></a>dict和set</h1><h3 id="1-结构上的区别："><a href="#1-结构上的区别：" class="headerlink" title="1. 结构上的区别："></a>1. 结构上的区别：</h3><table><thead><tr><th>类型</th><th>键（Key）</th><th>值（Value）</th><th>示例</th></tr></thead><tbody><tr><td><code>dict</code></td><td>有</td><td>有</td><td><code>{'a': 1, 'b': 2}</code></td></tr><tr><td><code>set</code></td><td>有</td><td><strong>没有</strong></td><td><code>{'a', 'b'}</code></td></tr></tbody></table><ul><li><p><code>dict</code> 是**键值对（key-value）**的集合。</p></li><li><p><code>set</code> 是<strong>只有键（key）没有值</strong>的一组唯一元素。</p></li></ul><hr><h3 id="2-用途上的区别："><a href="#2-用途上的区别：" class="headerlink" title="2. 用途上的区别："></a>2. 用途上的区别：</h3><ul><li><p><code>dict</code> 用于<strong>建立键与值的映射</strong>，例如地址到位置、用户名到ID等。</p></li><li><p><code>set</code> 用于<strong>快速查找是否存在</strong>、<strong>去重</strong>、<strong>集合运算</strong>等，例如判断某个元素是否出现过。</p></li></ul><hr><h3 id="3-操作上的区别："><a href="#3-操作上的区别：" class="headerlink" title="3. 操作上的区别："></a>3. 操作上的区别：</h3><h4 id="dict-常见操作："><a href="#dict-常见操作：" class="headerlink" title="dict 常见操作："></a><code>dict</code> 常见操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = {<span class="string">'x'</span>: <span class="number">1</span>, <span class="string">'y'</span>: <span class="number">2</span>}</span><br><span class="line">d[<span class="string">'z'</span>] = <span class="number">3</span>             <span class="comment"># 添加键值对</span></span><br><span class="line">value = d.get(<span class="string">'x'</span>)     <span class="comment"># 查找键对应的值</span></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">'y'</span>]             <span class="comment"># 删除键值对</span></span><br></pre></td></tr></table></figure><h4 id="set-常见操作："><a href="#set-常见操作：" class="headerlink" title="set 常见操作："></a><code>set</code> 常见操作：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = {<span class="string">'a'</span>, <span class="string">'b'</span>}</span><br><span class="line">s.add(<span class="string">'c'</span>)             <span class="comment"># 添加元素</span></span><br><span class="line">s.remove(<span class="string">'a'</span>)          <span class="comment"># 删除元素</span></span><br><span class="line">exists = <span class="string">'b'</span> <span class="keyword">in</span> s      <span class="comment"># 判断是否存在</span></span><br></pre></td></tr></table></figure><hr><h3 id="4-底层实现的共同点和不同点："><a href="#4-底层实现的共同点和不同点：" class="headerlink" title="4. 底层实现的共同点和不同点："></a>4. 底层实现的共同点和不同点：</h3><ul><li><p>相同点：都使用<strong>哈希表</strong>，所以查找、插入、删除的时间复杂度平均为 O(1)O(1)。</p></li><li><p>不同点：</p><ul><li><p><code>dict</code> 哈希表存储的是 (key, value) 对，插入更复杂。</p></li><li><p><code>set</code> 只存 key，没有 value，占用空间略小，操作略快。</p></li></ul></li></ul><hr><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250802212208715.png" alt="image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># Definition for singly-linked list.</span><br><span class="line"></span><br><span class="line"># class ListNode:</span><br><span class="line"></span><br><span class="line">#     def __init__(self, x):</span><br><span class="line"></span><br><span class="line">#         self.val = x</span><br><span class="line"></span><br><span class="line">#         self.next = None</span><br><span class="line">class Solution:</span><br><span class="line"></span><br><span class="line">    def hasCycle(self, head: Optional[ListNode]) -&gt; bool:</span><br><span class="line"></span><br><span class="line">        seen=set()</span><br><span class="line"></span><br><span class="line">        while head:</span><br><span class="line"></span><br><span class="line">            if head in seen:</span><br><span class="line"></span><br><span class="line">                return True</span><br><span class="line"></span><br><span class="line">            seen.add(head)</span><br><span class="line"></span><br><span class="line">            head=head.next</span><br><span class="line"></span><br><span class="line">        return False</span><br></pre></td></tr></table></figure><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>利用集合 <code>seen</code> 记录遍历过程中出现过的节点引用（即内存地址）。若遍历某个节点时发现它已经在 <code>seen</code> 中，说明这个节点之前已经访问过，即链表存在环。否则，将当前节点加入集合并继续向后遍历。</p><hr><h3 id="🧠解题过程："><a href="#🧠解题过程：" class="headerlink" title="🧠解题过程："></a>🧠解题过程：</h3><ol><li><p>创建一个空集合 <code>seen</code>；</p></li><li><p>从头节点 <code>head</code> 开始，逐个遍历每个节点；</p></li><li><p>如果当前节点 <code>head</code> 已存在于 <code>seen</code> 中，说明链表出现了环，返回 <code>True</code>；</p></li><li><p>否则将当前节点加入集合，继续向下一个节点遍历；</p></li><li><p>若遍历到 <code>None</code>，说明链表无环，返回 <code>False</code>。</p></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;dict和set&quot;&gt;&lt;a href=&quot;#dict和set&quot; class=&quot;headerlink&quot; title=&quot;dict和set&quot;&gt;&lt;/a&gt;dict和set&lt;/h1&gt;&lt;h3 id=&quot;1-结构上的区别：&quot;&gt;&lt;a href=&quot;#1-结构上的区别：&quot;</summary>
        
      
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-234.回文链表</title>
    <link href="https://jayli19707.github.io/2025/08/02/Leetcode-234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/08/02/Leetcode-234.%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</id>
    <published>2025-08-01T18:00:00.000Z</published>
    <updated>2025-08-01T17:59:35.111Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250802015304836.png" alt="image.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>判断链表是否为回文，可以通过快慢指针找到链表中点，然后反转后半部分链表，接着从头和反转后的部分逐一比较值是否相等。为了达到 O(1) 空间复杂度，我们不能使用数组或栈辅助存储值，必须在原链表上操作。</p><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>边界判断：如果链表为空或只有一个节点，直接返回 True。</p><p>找中点：使用快慢指针，fast 每次走两步，slow 每次走一步，slow 停下时刚好位于链表中点。</p><p>反转后半部分：从 slow 开始反转链表，获得 reverse_head。</p><p>比较是否相等：用两个指针，分别从 head 和 reverse_head 出发，同时遍历并比较值是否一致。</p><p>返回结果：只要有任意一组值不一致，就返回 False；否则返回 True。</p><h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><p>时间复杂度：O(n)<br>找中点：O(n)<br>反转链表：O(n)<br>比较两半链表：O(n)<br>空间复杂度：O(1)<br>只用了若干指针变量，无额外数据结构</p><h2 id="实现链表翻转功能"><a href="#实现链表翻转功能" class="headerlink" title="实现链表翻转功能"></a>实现链表翻转功能</h2><p>双指针解法：<br>定义好一个cur和一个pre的指针<br>cur=head<br>pre=none<br>现在的目的是把链表的指向改变。<br>先考虑第一个元素时<br>在链没断之前，先用temp指针保存好第二个节点。<br>修改第一个节点的指向。直接就是cur.next=pre,第一个节点指向pre的节点。<br>紧接着pre后移动一位移到cur，cur移动到temp</p><h2 id="实现找中点功能"><a href="#实现找中点功能" class="headerlink" title="实现找中点功能"></a>实现找中点功能</h2><p>找中点：<br>使用快慢指针，fast 每次走两步，slow 每次走一步，slow 停下时刚好位于链表中点。偶数个节点，最终选的是靠右边的节点。终止的信号是快指针或者快指针的next为空指针。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self,head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        pre,cur=<span class="literal">None</span>,head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line"></span><br><span class="line">            temp=cur.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            cur.<span class="built_in">next</span>=pre</span><br><span class="line"></span><br><span class="line">            pre=cur</span><br><span class="line"></span><br><span class="line">            cur=temp</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">middleNote</span>(<span class="params">self,head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line"></span><br><span class="line">        slow=fast=head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.<span class="built_in">next</span>:</span><br><span class="line"></span><br><span class="line">            slow=slow.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            fast=fast.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isPalindrome</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line"></span><br><span class="line">        mid=<span class="variable language_">self</span>.middleNote(head)</span><br><span class="line"></span><br><span class="line">        reverse=<span class="variable language_">self</span>.reverseList(mid)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> reverse:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> head.val!=reverse.val:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            head=head.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">            reverse=reverse.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250802015304836.png&quot; alt=&quot;image.png&quot;&gt;&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>机器学习环境配置</title>
    <link href="https://jayli19707.github.io/2025/08/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://jayli19707.github.io/2025/08/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2025-07-31T17:30:00.000Z</published>
    <updated>2025-07-31T17:55:54.428Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>【终极指南】吃透机器学习环境配置：从Conda、CUDA到Docker容器化<br>大家好！在机器学习的旅程中，一个稳定、可复现的环境是成功的基石。</p><h3 id="第一部分：核心理念——为何环境配置如此重要？"><a href="#第一部分：核心理念——为何环境配置如此重要？" class="headerlink" title="第一部分：核心理念——为何环境配置如此重要？"></a><strong>第一部分：核心理念——为何环境配置如此重要？</strong></h3><p>任何机器学习模型的运行，都离不开一个精确配置的环境 。一个好的环境配置实践，能为您带来以下核心优势：</p><ul><li><p><strong>隔离性</strong>：确保不同项目间的依赖库互不干扰，避免版本冲突 。</p></li><li><p><strong>可复现性</strong>：让您的代码在任何机器上都能得到相同的结果，这在学术研究和工业生产中至关重要 。</p></li><li><p><strong>易于迁移</strong>：方便地将整个工作环境打包、迁移，实现快速部署 。</p></li></ul><hr><h3 id="第二部分：入门必备——包管理工具-Conda-Pipenv"><a href="#第二部分：入门必备——包管理工具-Conda-Pipenv" class="headerlink" title="第二部分：入门必备——包管理工具 (Conda & Pipenv)"></a><strong>第二部分：入门必备——包管理工具 (Conda &amp; Pipenv)</strong></h3><p>包管理工具是环境配置的第一步，它们帮助我们创建独立的虚拟环境并管理项目所需的各种软件包。</p><h4 id="1-Conda"><a href="#1-Conda" class="headerlink" title="1. Conda"></a><strong>1. Conda</strong></h4><p>Conda是一个开源、跨平台的包和环境管理系统，功能强大且社区支持广泛 。</p><ul><li><p><strong>创建环境</strong>: <code>conda create -n test_env</code></p></li><li><p><strong>安装包 (以PyTorch为例)</strong>: <code>conda install -n test_env pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</code></p></li><li><p><strong>激活与退出</strong>: <code>conda activate test_env</code> 和 <code>conda deactivate</code></p></li></ul><h4 id="2-Pipenv"><a href="#2-Pipenv" class="headerlink" title="2. Pipenv"></a><strong>2. Pipenv</strong></h4><p>Pipenv旨在将</p><p><code>pip</code>（包安装）和<code>virtualenv</code>（虚拟环境）的功能合二为一，让依赖管理更自动化 。</p><ul><li><p><strong>安装包</strong>: <code>pipenv install numpy torch</code></p></li><li><p><strong>激活与退出</strong>: <code>pipenv shell</code> 和 <code>Ctrl + D</code></p></li></ul><hr><h3 id="第三部分：进阶核心——深入理解GPU、驱动与CUDA"><a href="#第三部分：进阶核心——深入理解GPU、驱动与CUDA" class="headerlink" title="第三部分：进阶核心——深入理解GPU、驱动与CUDA"></a><strong>第三部分：进阶核心——深入理解GPU、驱动与CUDA</strong></h3><p>仅仅安装好软件包是不够的，要让代码在GPU上跑起来，我们必须理解硬件、驱动和CUDA之间的关系。</p><h4 id="Q1：NVIDIA驱动和CUDA有什么区别？"><a href="#Q1：NVIDIA驱动和CUDA有什么区别？" class="headerlink" title="Q1：NVIDIA驱动和CUDA有什么区别？"></a><strong>Q1：NVIDIA驱动和CUDA有什么区别？</strong></h4><p>这是一个非常关键的问题。简单来说，<strong>驱动是基础，CUDA是建立在该基础之上的应用开发平台</strong>。</p><ul><li><p><strong>NVIDIA驱动 (NVIDIA Driver)</strong>：它是连接操作系统和GPU硬件的“桥梁” 。没有驱动，您的电脑根本无法识别GPU 。驱动程序本身包含一个版本的CUDA API，称为</p><p>  <strong>驱动CUDA版本 (Driver CUDA Version)</strong>，您可以通过在终端运行<code>nvidia-smi</code>命令查看。这个版本代表了该驱动<strong>最高能够支持</strong>的CUDA功能 。</p></li><li><p><strong>CUDA运行时 (CUDA Runtime)</strong>：当我们说“为PyTorch安装CUDA”时，通常指的是安装<strong>CUDA运行时</strong> 。它是一个并行的计算平台和编程接口（API），允许像PyTorch这样的框架利用GPU强大的并行计算能力（如矩阵运算）来加速模型训练 。</p></li></ul><p><strong>最重要的兼容性法则</strong>：<strong>驱动的CUDA版本必须大于或等于运行时的CUDA版本</strong> 。例如，如果</p><p><code>nvidia-smi</code>显示CUDA版本是11.6，那么您为项目安装的运行时CUDA版本（如11.3）不能超过11.6 。</p><hr><h3 id="第四部分：高手之路——拥抱容器化-Docker"><a href="#第四部分：高手之路——拥抱容器化-Docker" class="headerlink" title="第四部分：高手之路——拥抱容器化 (Docker)"></a><strong>第四部分：高手之路——拥抱容器化 (Docker)</strong></h3><p>当环境变得异常复杂时（例如，需要在最新的GPU上运行依赖旧版CUDA的旧项目），容器化技术就成了我们的终极武器。</p><h4 id="Q2：虚拟机和容器有什么区别？我应该用哪个？"><a href="#Q2：虚拟机和容器有什么区别？我应该用哪个？" class="headerlink" title="Q2：虚拟机和容器有什么区别？我应该用哪个？"></a><strong>Q2：虚拟机和容器有什么区别？我应该用哪个？</strong></h4><ul><li><p><strong>虚拟机 (Virtual Machine, VM)</strong>：它虚拟化了<strong>整个操作系统</strong> 。就像在Windows上安装一个软件，运行一个完整的Linux系统。这使得它非常“重”，但隔离性极强 。</p></li><li><p><strong>容器 (Container)</strong>：它运行在<strong>同一个主机操作系统之上</strong>，共享系统内核 。它虚拟的不是操作系统，而是</p><p>  <strong>应用程序及其所有依赖项</strong>的运行环境。这使得容器非常“轻量”，启动极快 。</p></li></ul><p>对于机器学习开发，<strong>容器通常是更好的选择</strong>，因为它在提供了足够隔离性的同时，性能开销更小。</p><h4 id="Q3：为什么要使用容器？它解决了什么问题？"><a href="#Q3：为什么要使用容器？它解决了什么问题？" class="headerlink" title="Q3：为什么要使用容器？它解决了什么问题？"></a><strong>Q3：为什么要使用容器？它解决了什么问题？</strong></h4><p>使用容器的核心原因是为了<strong>解决环境的复杂性、可移植性和兼容性难题</strong>。</p><ol><li><p><strong>处理复杂依赖</strong>：当您需要特定版本的库（如cuDNN、NCCL）来进行分布式训练时，容器可以将这一切完美打包 。</p></li><li><p><strong>解决兼容性噩梦</strong>：您可以在容器里打包旧版的PyTorch和它依赖的旧版CUDA，然后在安装了最新驱动和GPU的机器上无缝运行 。</p></li><li><p><strong>行业标准</strong>：无论是工业界的Kubernetes还是学术界的Slurm，都广泛采用容器作为应用部署的标准单元 。</p></li></ol><h4 id="Q4：为什么文件推荐使用NVIDIA自己的容器？"><a href="#Q4：为什么文件推荐使用NVIDIA自己的容器？" class="headerlink" title="Q4：为什么文件推荐使用NVIDIA自己的容器？"></a><strong>Q4：为什么文件推荐使用NVIDIA自己的容器？</strong></h4><p>因为标准的Docker容器无法很好地适配GPU。如果在普通容器里使用GPU，会要求容器内的驱动版本必须和主机的驱动版本</p><p><strong>完全一致</strong>，这极大地破坏了容器的“可移植性” 。</p><p><strong>NVIDIA Docker是完美的解决方案</strong> 。</p><ul><li><p><strong>核心优势</strong>：您<strong>无需在容器内安装任何NVIDIA驱动</strong> 。NVIDIA Docker会自动将主机的驱动和GPU设备安全地映射到容器中。</p></li><li><p><strong>带来的好处</strong>：这让在容器中使用GPU变得极其简单，并且让您的容器镜像具有了真正的可移植性，可以在任何安装了NVIDIA Docker的机器上运行 。</p></li></ul><p><strong>使用NVIDIA Docker的流程</strong>：</p><ol><li><p>在主机上安装好NVIDIA驱动和NVIDIA Docker 。</p></li><li><p>从Docker Hub拉取官方预构建的镜像 (如</p><p> <code>docker pull pytorch/pytorch:1.9.1-cuda11.1-cudnn8-runtime</code>) 。</p></li><li><p>使用</p><p> <code>--gpus all</code> 参数启动容器，即可在容器内访问GPU 。</p></li></ol><hr><h3 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a><strong>最终总结</strong></h3><ol><li><p><strong>驱动先行</strong>：无论采用何种方案，<strong>必须</strong>在主机上正确安装NVIDIA驱动 。</p></li><li><p><strong>版本兼容</strong>：牢记，运行时的CUDA版本不能高于驱动支持的CUDA版本 。</p></li><li><p><strong>拥抱容器</strong>：对于复杂的GPU环境，<strong>强烈推荐使用NVIDIA Docker</strong>。它能为您免去无数环境配置的烦恼，让您专注于算法和模型本身。</p></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;【终极指南】吃透机器学习环境配置：从Conda、CUDA到Docker容器化&lt;br&gt;大家好！在机器学习的旅程中，一个稳定、可复现的环境是成功的基石。&lt;/p&gt;
&lt;h3</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-206.反转链表</title>
    <link href="https://jayli19707.github.io/2025/07/31/Leetcode-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/07/31/Leetcode-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2025-07-31T15:30:00.000Z</published>
    <updated>2025-07-31T15:44:22.380Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250731234151006.png" alt="image.png"></p><ul><li><p><strong>思路概述</strong></p><ul><li><p>利用栈的 <strong>先进后出（LIFO）</strong> 特性，先顺序遍历链表，把所有节点压入栈；</p></li><li><p>弹出栈顶节点时正好是原链表的尾节点，依次连接即可得到反转链表。</p></li></ul></li><li><p><strong>具体步骤</strong></p><ol><li><p>初始化空栈 <code>st</code>；</p></li><li><p>遍历链表 <code>head</code>，将每个节点压入栈中；</p></li><li><p>栈顶弹出节点作为新链表头 <code>new_head</code>，并维护一个可移动尾指针 <code>cur</code>；</p></li><li><p>每次出栈一个节点：</p><ul><li><p>先断开该节点原来的 <code>next</code>（防止形成环）；</p></li><li><p>接在新链表尾部 <code>cur.next = node</code>；</p></li><li><p>移动尾指针 <code>cur = node</code>；</p></li></ul></li><li><p>循环结束后，<code>cur.next = None</code> 并返回 <code>new_head</code>。</p></li></ol></li></ul><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，遍历一次压栈，一次出栈；</p></li><li><p>空间复杂度：O(n)，栈存储了全部节点引用。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        p=head</span><br><span class="line">        st=[]</span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">            st.append(p)</span><br><span class="line">            p=p.<span class="built_in">next</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        tail = dummy</span><br><span class="line">        <span class="keyword">while</span> st:</span><br><span class="line">            node=st.pop()</span><br><span class="line">            tail.<span class="built_in">next</span>=node</span><br><span class="line">            tail=node</span><br><span class="line">        tail.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250731234151006.png&quot;</summary>
        
      
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>从函数到大模型</title>
    <link href="https://jayli19707.github.io/2025/07/31/%E4%BB%8E%E5%87%BD%E6%95%B0%E5%88%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>https://jayli19707.github.io/2025/07/31/%E4%BB%8E%E5%87%BD%E6%95%B0%E5%88%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B/</id>
    <published>2025-07-30T18:30:00.000Z</published>
    <updated>2025-07-30T18:18:24.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习与人工智能的核心原理解析"><a href="#深度学习与人工智能的核心原理解析" class="headerlink" title="深度学习与人工智能的核心原理解析"></a>深度学习与人工智能的核心原理解析</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>人工智能的本质是什么？从早期的符号主义到现代的大规模神经网络，人工智能的发展经历了诸多变革。本文以一个函数为起点，带领读者逐步理解人工智能背后的核心思想，包括神经网络的构建、训练方法，及其在自然语言处理中的应用。通过深入浅出的讲解，你将掌握深度学习如何通过不断调整参数，实现对复杂现实世界的有效建模，为理解当下大模型技术打下坚实基础。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>人工智能早期的思路是符号主义，试图用精确的函数描述世界的所有规律。然而，现实世界的复杂性远超人类编写明确函数的能力，例如图像识别中简单的“猫”与“母”的判别，对计算机来说却是难题。为此，人们转向连接主义，通过构造近似函数模型来处理复杂问题。这一思路催生了神经网络，通过层层非线性变换实现对复杂数据的拟合。训练神经网络的核心在于寻找最佳参数，使得模型输出与真实数据误差最小。随着技术进步，深度学习模型逐渐发展出多种结构以适应不同类型数据，如卷积神经网络（CNN）处理图像，循环神经网络（RNN）处理序列数据，进而到Transformer架引领的自然语言处理革命。</p><h2 id="主要观点"><a href="#主要观点" class="headerlink" title="主要观点"></a>主要观点</h2><h3 id="1-连接主义与函数拟合的基本思想"><a href="#1-连接主义与函数拟合的基本思想" class="headerlink" title="1. 连接主义与函数拟合的基本思想"></a>1. 连接主义与函数拟合的基本思想</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/19a6ee53-b44c-459f-a61f-dcfb77b843ce/89.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/19a6ee53-b44c-459f-a61f-dcfb77b843ce/120.0.jpg"></p><p>传统符号主义假设存在一个精确函数能描述现实中的所有规律，但面对诸如图像识别的复杂任务，这种方式难以实现。连接主义放弃寻找精确函数，采用“猜测”并反复调整参数的方式，通过近似函数来拟合数据。以简单的线性函数 ( y = wx + b ) 为例，通过不断调整参数 ( w ) 和 ( b )，使得线性模型尽可能拟合给定数据点。这种“猜与改”的方法体现了现代人工智能的核心思路。  </p><h3 id="2-神经网络：激活函数与非线性变换"><a href="#2-神经网络：激活函数与非线性变换" class="headerlink" title="2. 神经网络：激活函数与非线性变换"></a>2. 神经网络：激活函数与非线性变换</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/19a6ee53-b44c-459f-a61f-dcfb77b843ce/229.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/7da6e129-5593-43d1-9555-deb6e86a4a93/343.0.jpg"></p><p>仅用线性函数无法表达复杂关系，故引入激活函数（如平方、sin、指数函数）将线性组合转变为非线性函数。神经网络由输入层、隐藏层和输出层组成，每层包含多个神经元，层与层之间进行线性变换后套用激活函数，形成复杂的非线性映射。多层网络结构可理论上逼近任意连续函数。  </p><h3 id="3-损失函数与梯度下降：模型训练的数学基础"><a href="#3-损失函数与梯度下降：模型训练的数学基础" class="headerlink" title="3. 损失函数与梯度下降：模型训练的数学基础"></a>3. 损失函数与梯度下降：模型训练的数学基础</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/7da6e129-5593-43d1-9555-deb6e86a4a93/551.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/7da6e129-5593-43d1-9555-deb6e86a4a93/812.0.jpg"></p><p>训练神经网络的目标是最小化损失函数，常用的均方误差（MSE）衡量预测值与真实值的差距。通过计算损失函数相对于参数的偏导数（梯度），利用梯度下降法不断调整参数，使损失函数逐渐减小，模型拟合效果逐步提升。复杂神经网络的参数众多，直接求解解析解不可行，梯度下降结合链式法则（反向传播）实现高效训练。  </p><h3 id="4-网络结构进阶：从全连接层到卷积神经网络（CNN）"><a href="#4-网络结构进阶：从全连接层到卷积神经网络（CNN）" class="headerlink" title="4. 网络结构进阶：从全连接层到卷积神经网络（CNN）"></a>4. 网络结构进阶：从全连接层到卷积神经网络（CNN）</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/a39af8d5-0881-43f5-8dbd-8a028272bda2/1739.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/a39af8d5-0881-43f5-8dbd-8a028272bda2/1824.0.jpg"></p><p>全连接层中，每个神经元与上一层所有神经元连接，参数量庞大且难以保持输入数据的局部特征。卷积神经网络通过卷积核滑动窗口操作提取局部空间特征，大幅减少参数数量，同时保留图像的空间结构信息。卷积层与池化层交替使用，构成高效的图像识别网络。  </p><h3 id="5-自然语言处理中的词嵌入与循环神经网络（RNN）"><a href="#5-自然语言处理中的词嵌入与循环神经网络（RNN）" class="headerlink" title="5. 自然语言处理中的词嵌入与循环神经网络（RNN）"></a>5. 自然语言处理中的词嵌入与循环神经网络（RNN）</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/a39af8d5-0881-43f5-8dbd-8a028272bda2/2174.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/4b2216e5-fd82-4bb3-b617-310b255550db/2329.0.jpg"></p><p>自然语言的输入需先通过编码转换为计算机可识别的向量，词嵌入（embedding）通过训练获得，能反映词语间的语义相关性。经典神经网络无法处理词序信息，RNN引入隐藏状态，逐步传递序列信息，具备捕捉上下文的能力。尽管RNN存在长期依赖题，改进型模型如LSTM和GRU缓解了部分问题。  </p><h3 id="6-Transformer与注意力机制：自然语言处理的新纪元"><a href="#6-Transformer与注意力机制：自然语言处理的新纪元" class="headerlink" title="6. Transformer与注意力机制：自然语言处理的新纪元"></a>6. Transformer与注意力机制：自然语言处理的新纪元</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/4b2216e5-fd82-4bb3-b617-310b255550db/2561.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/4b2216e5-fd82-4bb3-b617-310b255550db/2792.0.jpg"></p><p>Transformer架构通过多头自注意力机制，打破RNN顺序计算限制，实现并行处理序列信息。词向量加上位置编码后，通过查询（Q）、键（K）、值（V）矩阵计算词间相关性权重动态聚合上下文信息。多头注意力允许模型从多视角学习词间关系，极大提升表达能力，是现代大模型如GPT系列的基础。  </p><h3 id="7-模型泛化与正则化：防止过拟合的策略"><a href="#7-模型泛化与正则化：防止过拟合的策略" class="headerlink" title="7. 模型泛化与正则化：防止过拟合的策略"></a>7. 模型泛化与正则化：防止过拟合的策略</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/850b231e-d5c0-4332-88d8-99d023277b7d/1147.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/850b231e-d5c0-4332-88d8-99d023277b7d/1258.0.jpg"></p><p>过拟合是模型在训练数据上表现优异但泛化能力差的现象。防止过拟合策略包括简化模型结构、增加训练数据、数据增强（如图像旋转、裁剪）、早停训练、以及正则化（L1、L2正则化）限制参数过大增长。此外，Dropout随机丢弃部分神经元训练，也是常用有效的方法。针对训练中梯度消失、梯度爆炸问题，还引入梯度裁剪、合理权重初始化、优化器改进等技术。  </p><h3 id="8-大模型生态与发展趋势"><a href="#8-大模型生态与发展趋势" class="headerlink" title="8. 大模型生态与发展趋势"></a>8. 大模型生态与发展趋势</h3><p>随着模型规模激增，训练成本高昂，模型压缩、蒸馏、稀疏化、优化微调方法层出不穷。同时，AI服务生态完善，包含硬件（GPU、TPU、NPU）、开发工具（PyTorch、TensorFlow、HuggingFace）、推理引擎以及智能体和工作流框架。大模型虽强，但仍面临边际收益递减，未来更多聚焦效率提升和多模态融合。开源与闭源模型并存，推动技术普及与创新。  </p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>理解人工智能的本质，即将复杂现实世界抽象为可调节函数的过程，是深入掌握度学习技术的关键。通过神经网络构建非线性函数模型，结合损失函数最小化和梯度下降训练方法，AI系统能够逐步逼近真实数据规律。不同网络结构（如CNN、RNN、Transformer）针对不同数据类型发挥优势，推动了图像识别与自然语言处理的飞跃发展。防止过拟合和提升训练效率的各种技巧，确保模型具备良好泛化能力。未来，模型规模与能力持续增长的同时，技术创新将更注重模型轻量化、多模态融合及应用生态建设。全面理解这些核心原理，不仅有助于领会现有AI技术的运行机制，也为未来AI的研究与应用奠定坚实基础。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>笔记仅用于学习<br>本文内容总结自抖音视频 @飞天闪客：一小时从函数到transformer<br>[[<a href="https://www.douyin.com/root/search/%E9%A3%9E%E5%A4%A9%E9%97%AA%E5%AE%A21?modal_id=7529550345501035791&type=video%5D%5D">https://www.douyin.com/root/search/%E9%A3%9E%E5%A4%A9%E9%97%AA%E5%AE%A21?modal_id=7529550345501035791&amp;type=video]]</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;深度学习与人工智能的核心原理解析&quot;&gt;&lt;a href=&quot;#深度学习与人工智能的核心原理解析&quot; class=&quot;headerlink&quot; title=&quot;深度学习与人工智能的核心原理解析&quot;&gt;&lt;/a&gt;深度学习与人工智能的核心原理解析&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 160：相交链表</title>
    <link href="https://jayli19707.github.io/2025/07/30/LeetCode%20160%EF%BC%9A%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/07/30/LeetCode%20160%EF%BC%9A%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2025-07-30T15:30:00.000Z</published>
    <updated>2025-07-30T15:17:58.495Z</updated>
    
    <content type="html"><![CDATA[<p>先补充数组和动态数组的区别，再比较动态数组和链表的区别，最后讲解本题题解。</p><span id="more"></span><h1 id="数组和动态数组"><a href="#数组和动态数组" class="headerlink" title="数组和动态数组"></a>数组和动态数组</h1><h2 id="1-普通数组（静态数组，Static-Array）"><a href="#1-普通数组（静态数组，Static-Array）" class="headerlink" title="1. 普通数组（静态数组，Static Array）"></a>1. 普通数组（静态数组，Static Array）</h2><ul><li><p><strong>内存分配</strong>：一旦定义，大小固定（如 C 语言中的 <code>int arr[5]</code>）。</p></li><li><p><strong>缺点</strong>：如果满了就不能再加元素，想扩容必须手动申请新数组并复制数据。</p></li><li><p><strong>优点</strong>：结构简单，内存连续，访问下标 O(1)。</p></li></ul><hr><h2 id="2-动态数组（Dynamic-Array）"><a href="#2-动态数组（Dynamic-Array）" class="headerlink" title="2. 动态数组（Dynamic Array）"></a>2. 动态数组（Dynamic Array）</h2><ul><li><p><strong>内存分配</strong>：底层还是数组，但容量不足时会<strong>自动申请更大空间并复制元素</strong>，对用户是透明的。</p></li><li><p><strong>扩容策略</strong>：常见是扩容为当前容量的 1.5~2 倍，以减少频繁复制。</p></li><li><p><strong>典型实现</strong>：</p><ul><li><p>Python 的 <code>list</code></p></li><li><p>Java 的 <code>ArrayList</code></p></li><li><p>C++ 的 <code>std::vector</code></p></li></ul></li></ul><h1 id="动态数组（Dynamic-Array）和链表（Linked-List）"><a href="#动态数组（Dynamic-Array）和链表（Linked-List）" class="headerlink" title="动态数组（Dynamic Array）和链表（Linked List）"></a>动态数组（Dynamic Array）和链表（Linked List）</h1><p>两种典型的线性数据结构，它们在<strong>内存分配、访问方式、插入删除效率</strong>等方面有明显区别：</p><hr><h2 id="1-内存分配方式"><a href="#1-内存分配方式" class="headerlink" title="1. 内存分配方式"></a>1. 内存分配方式</h2><ul><li><p><strong>动态数组</strong>（如 Python 的 <code>list</code>）：</p><ul><li><p>在内存中分配一块<strong>连续的空间</strong>来存放元素。</p></li><li><p>如果容量不够，会一次性申请更大的空间（通常是扩容 1.5~2 倍），然后把旧数据拷贝过去。</p></li></ul></li><li><p><strong>链表</strong>：</p><ul><li><p>每个元素是一个<strong>节点</strong>，包含数据和指向下一个节点的指针（<code>next</code>）。</p></li><li><p>节点分散在内存中，通过指针链接，不要求连续内存。</p></li></ul></li></ul><hr><h2 id="2-元素访问效率"><a href="#2-元素访问效率" class="headerlink" title="2. 元素访问效率"></a>2. 元素访问效率</h2><ul><li><p><strong>动态数组</strong>：支持随机访问，<code>arr[i]</code> 时间复杂度 <strong>O(1)</strong>，因为可以直接通过偏移量定位。</p></li><li><p><strong>链表</strong>：只能从头节点开始依次遍历，查找第 <code>i</code> 个元素的时间复杂度 <strong>O(n)</strong>。</p></li></ul><hr><h2 id="3-插入与删除效率"><a href="#3-插入与删除效率" class="headerlink" title="3. 插入与删除效率"></a>3. 插入与删除效率</h2><ul><li><p><strong>动态数组</strong>：</p><ul><li><p>在尾部插入/删除：<strong>O(1)</strong>（摊销）</p></li><li><p>在中间插入/删除：<strong>O(n)</strong>，因为需要移动大量元素。</p></li></ul></li><li><p><strong>链表</strong>：</p><ul><li><p>已知节点的前驱节点时，插入/删除节点：<strong>O(1)</strong></p></li><li><p>但如果要先找到插入位置，查找过程是 <strong>O(n)</strong>。</p></li></ul></li></ul><hr><h2 id="4-空间利用率"><a href="#4-空间利用率" class="headerlink" title="4. 空间利用率"></a>4. 空间利用率</h2><ul><li><p><strong>动态数组</strong>：可能存在额外的预留空间（扩容时会浪费部分内存）。</p></li><li><p><strong>链表</strong>：每个节点需要额外的指针域，指针占用额外内存，尤其数据量小的时候浪费更明显。</p></li></ul><hr><h2 id="5-适用场景总结"><a href="#5-适用场景总结" class="headerlink" title="5. 适用场景总结"></a>5. 适用场景总结</h2><ul><li><p>如果<strong>访问多、随机读取多</strong>：用动态数组更高效（例如 Python 的 <code>list</code>）。</p></li><li><p>如果<strong>频繁插入删除</strong>，尤其在中间或两端：链表更适合（如 <code>collections.deque</code> 用的是双向链表+块结构）。</p></li></ul><hr><h3 id="直观对比表"><a href="#直观对比表" class="headerlink" title="直观对比表"></a>直观对比表</h3><table><thead><tr><th>特性</th><th>动态数组（Python list）</th><th>链表（Linked List）</th></tr></thead><tbody><tr><td>内存结构</td><td>连续内存</td><td>分散内存</td></tr><tr><td>随机访问效率</td><td>O(1)</td><td>O(n)</td></tr><tr><td>插入/删除效率</td><td>中间 O(n)，尾部 O(1)</td><td>已知节点 O(1)，查找 O(n)</td></tr><tr><td>空间开销</td><td>可能有预留空间</td><td>每个节点多一个指针</td></tr><tr><td>扩容成本</td><td>有扩容成本（复制数据）</td><td>无扩容成本</td></tr></tbody></table><hr><h1 id="LeetCode-160：相交链表"><a href="#LeetCode-160：相交链表" class="headerlink" title="LeetCode 160：相交链表"></a>LeetCode 160：相交链表</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250730231251725.png" alt="image.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在单链表题里，传进来的两个“头节点”headA、headB 就分别代表两条链表：每个头节点是第一个实际节点的引用，你可以从它开始沿着 .next 指针一直走到结尾把整条链表遍历出来。相交判定是看节点是否同一对象（p is q），不是看 val 是否相等</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><blockquote><p>把两个头节点headA，headB先赋值分别赋值给p，q，为了不改变头节点信息，当p的val和q的val不为null时，p走一步，q走一步，相同时返回，不相同一直遍历下去，A遍历完遍历B，B遍历完遍历A</p></blockquote><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li><p>时间复杂度: O(m+n)O(m+n)O(m+n)</p></li><li><p>空间复杂度: O(1) O(1) O(1)</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;先补充数组和动态数组的区别，再比较动态数组和链表的区别，最后讲解本题题解。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-.42接雨水</title>
    <link href="https://jayli19707.github.io/2025/07/24/Leetcode-.42%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <id>https://jayli19707.github.io/2025/07/24/Leetcode-.42%E6%8E%A5%E9%9B%A8%E6%B0%B4/</id>
    <published>2025-07-24T11:30:00.000Z</published>
    <updated>2025-07-24T11:36:26.983Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划，记录i数组前后缀的最大值</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724191937062.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724191714298.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        n=<span class="built_in">len</span>(height)</span><br><span class="line"></span><br><span class="line">        pre_max=n*[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        pre_max[<span class="number">0</span>]=height[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line"></span><br><span class="line">            pre_max[i]=<span class="built_in">max</span>(pre_max[i-<span class="number">1</span>],height[i])</span><br><span class="line"></span><br><span class="line">        suf_max=[<span class="number">0</span>]*n</span><br><span class="line"></span><br><span class="line">        suf_max[-<span class="number">1</span>]=height[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            suf_max[i]=<span class="built_in">max</span>(suf_max[i+<span class="number">1</span>],height[i])</span><br><span class="line"></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> h,pre,suf <span class="keyword">in</span> <span class="built_in">zip</span>(height,pre_max,suf_max):</span><br><span class="line"></span><br><span class="line">            ans+=<span class="built_in">min</span>(pre,suf)-h</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><ul><li><code>pre_max[i]</code>：表示<strong>从最左边到当前位置 <code>i</code></strong> 为止的最大柱子高度；<br>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="50.464ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 22305.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(954,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(2123.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2652.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3224.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3502.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3847.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4403.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5459.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6337.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6866.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7438.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(7438.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7827.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(8403.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8869.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9214.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(9691.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(10267.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10628.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(10906.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(11406.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11684.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12129.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(12705.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(13171.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13516.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(13993.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(14569.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(14930.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(15208.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15708.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(15986.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(16430.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(17769.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(18214.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(18790.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(19256.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(19601.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(20078.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(20654.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(21015.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(21293.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(21638.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(21916.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li><li><code>suf_max[i]</code>：表示<strong>从当前位置 <code>i</code> 到最右边</strong>的最大柱子高度；<br>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="58.385ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 25806 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1041,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(2234.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2763.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3335.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3613.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3958.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4514.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5570.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6448.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6977.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7549.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(7549.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7938.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(8514.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8980.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9325.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(9802.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(10378.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10739.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(11017.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11362.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11640.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12085.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(12661.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(13127.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13472.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(13949.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(14525.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(14886.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(15164.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15731.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(16731.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(17231.5,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(17509.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(17954.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(19292.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(19737.5,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(20313.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(20779.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(21124.5,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(21601.5,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(22177.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(22538.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(22816.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(23638.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(24639,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(25139,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(25417,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li></ul><p>对于下标 i，下雨后水能到达的最大高度等于下标 i 两边的最大高度的最小值，下标 i 处能接的雨水量等于下标 i 处的水能到达的最大高度减去 height[i]。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;动态规划，记录i数组前后缀的最大值&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>梯度下降</title>
    <link href="https://jayli19707.github.io/2025/07/24/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>https://jayli19707.github.io/2025/07/24/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</id>
    <published>2025-07-24T06:30:00.000Z</published>
    <updated>2025-07-24T06:28:18.593Z</updated>
    
    <content type="html"><![CDATA[<p>Gradient Descent ，Stochastic Gradient Descent 和Adaptive Moment Estimation</p><span id="more"></span><h1 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h1><p>我们来<strong>一步一步推导前两轮（epoch）梯度下降更新过程</strong>，以你提供的代码为基础，展示每轮如何更新参数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 905.6 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container> ,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 905.6 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>​。我们使用如下训练集：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="43.127ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 19062.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2185.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2463.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(3463.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3908.2,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(4908.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5352.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(6852.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7297.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(8797.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(9075.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(10116.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(11172.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(11450.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(12950.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(13394.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(14894.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(15339.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(16839.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(17284.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(18784.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container><br>$$<br>初始化：</p><p>θ_0=0 \quad<br>θ_1​=0<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.036ex" height="0.036ex" role="img" focusable="false" viewBox="0 0 16 16"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"></g></g></svg></mjx-container>学习率: \quad η=0.0001$$</p><p>每个样本的损失函数为：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="27.895ex" height="2.666ex" role="img" focusable="false" viewBox="0 -883.9 12329.5 1178.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(681,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1070,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1975.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2420.2,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3325.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3992.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5048.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5437.3,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(6565.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(7565.3,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(8470.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(9639.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(10639.7,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="msup" transform="translate(11504,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><p>对参数求导得：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.971ex;" xmlns="http://www.w3.org/2000/svg" width="42.686ex" height="5.074ex" role="img" focusable="false" viewBox="0 -1371.3 18867.2 2242.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,-19.7)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(332.3,676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><rect width="1671.6" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(1911.6,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1333.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1833.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2222.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3309.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(4309.3,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(5173.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(5562.7,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mfrac" transform="translate(5812.7,0)"><g data-mml-node="mrow" transform="translate(332.3,676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="1671.6" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(11635.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1333.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1833.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2222.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3309.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(4309.3,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(5173.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5784.9,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(6285.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></g></g></svg></mjx-container></p><p>GD:<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="46.21ex" height="2.262ex" role="img" focusable="false" viewBox="0 -705 20424.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(905.6,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(1183.3,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="msub" transform="translate(2517.1,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3422.7,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(3644.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4645.1,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5364.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5864.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6393.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="msub" transform="translate(6878.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g><g data-mml-node="mi" transform="translate(7775.8,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8226.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(8755.8,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mstyle" transform="translate(9712.4,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msub" transform="translate(10712.4,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11617.9,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(11895.7,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="msub" transform="translate(13229.5,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(14135.1,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(14357.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(15357.5,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(16076.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(16576.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(17105.9,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="msub" transform="translate(17590.9,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g><g data-mml-node="mi" transform="translate(18488.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18939.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(19468.2,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(20424.8,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g></g></g></svg></mjx-container></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724022935144.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724022950999.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724023009480.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724023021821.png" alt="image.png"></p><h1 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724033107477.png" alt="image.png"></p><p>SGD 省略了因子 2，直接用：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.632ex" height="2.398ex" role="img" focusable="false" viewBox="0 -810 15749.6 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(928,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(1457,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(2691.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3747.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4136.1,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4848.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5848.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6338.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(6727.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(7727.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(8204.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8655.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(9184.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(10418.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(11474.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11863.7,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12575.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(13576.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14066.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14677.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(15177.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></p><p>每个样本更新时立即使用该梯度进行参数调整：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="39.467ex" height="2.084ex" role="img" focusable="false" viewBox="0 -705 17444.2 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1183.3,0)"><path data-c="2190" d="M944 261T944 250T929 230H165Q167 228 182 216T211 189T244 152T277 96T303 25Q308 7 308 0Q308 -11 288 -11Q281 -11 278 -11T272 -7T267 2T263 21Q245 94 195 151T73 236Q58 242 55 247Q55 254 59 257T73 264Q121 283 158 314T215 375T247 434T264 480L267 497Q269 503 270 505T275 509T288 511Q308 511 308 500Q308 493 303 475Q293 438 278 406T246 352T215 315T185 287T165 270H929Q944 261 944 250Z"></path></g><g data-mml-node="msub" transform="translate(2461.1,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(3588.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4589.1,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5308.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5808.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(6285.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(7265.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mstyle" transform="translate(8222.1,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msub" transform="translate(9222.1,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(10405.4,0)"><path data-c="2190" d="M944 261T944 250T929 230H165Q167 228 182 216T211 189T244 152T277 96T303 25Q308 7 308 0Q308 -11 288 -11Q281 -11 278 -11T272 -7T267 2T263 21Q245 94 195 151T73 236Q58 242 55 247Q55 254 59 257T73 264Q121 283 158 314T215 375T247 434T264 480L267 497Q269 503 270 505T275 509T288 511Q308 511 308 500Q308 493 303 475Q293 438 278 406T246 352T215 315T185 287T165 270H929Q944 261 944 250Z"></path></g><g data-mml-node="msub" transform="translate(11683.2,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(12811,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(13811.2,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14530.4,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(15030.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(15507.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15958.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(16487.7,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></p><h1 id="Adaptive-Moment-Estimation"><a href="#Adaptive-Moment-Estimation" class="headerlink" title="Adaptive Moment Estimation"></a>Adaptive Moment Estimation</h1><p><strong>Adam = 动量 + 自适应学习率</strong></p><p>Adam 优化器非常聪明地将这两个想法结合了起来。它同时做了两件事：</p><ol><li>它像 <strong>Momentum</strong> 一样，计算梯度的<strong>一阶矩估计</strong>（就是梯度的平均值，可以理解为<strong>速度</strong>）。</li><li>它像 <strong>RMSProp</strong> 一样，计算梯度的<strong>二阶矩估计</strong>（就是梯度平方的平均值，可以理解为<strong>颠簸程度或速度的变化</strong>）。</li></ol><p>然后，它用这两个值来动态地、为每一个参数计算出独立的、最合适的更新步长。</p><p><strong>最终效果</strong>：Adam 这辆智能小车，<strong>既有方向感（动量），又能感知地形（自适应学习率）</strong>，所以它在绝大多数情况下都能又快又稳地找到山谷的最低点。</p><h1 id="Warm-Restarts-in-SGD-热重启"><a href="#Warm-Restarts-in-SGD-热重启" class="headerlink" title="Warm Restarts (in SGD) 热重启"></a>Warm Restarts (in SGD) 热重启</h1><p>这是一种<strong>学习率调整策略</strong>，全称是 Stochastic Gradient Descent with Warm Restarts (SGDR)。传统的学习率调整策略通常是单调递减的。而 Warm Restarts 策略则是<strong>周期性地“重启”学习率</strong>。</p><p>具体来说，学习率会从一个较高的初始值开始，按照一个预设的函数（如余弦函数）逐渐下降。当下降到最低点后，它会<strong>突然被重置回较高的初始值</strong>，然后开始下一轮的下降。这个过程就像在模型训练陷入一个局部最优点时，通过突然增大学习率来“踢它一脚”，帮助它<strong>跳出当前的局部最小值</strong>，去探索更广阔的参数空间，从而有机会找到一个更好的全局最优解。</p><h1 id="GA遗传算法"><a href="#GA遗传算法" class="headerlink" title="GA遗传算法"></a>GA遗传算法</h1><h3 id="场景：小偷的烦恼"><a href="#场景：小偷的烦恼" class="headerlink" title="场景：小偷的烦恼"></a>场景：小偷的烦恼</h3><p>想象一个小偷进入一个珠宝店，他有一个背包，<strong>最大承重是 10 公斤</strong>。店里有四件宝物，每件宝物的重量和价值如下：</p><table><thead><tr><th>宝物</th><th>重量 (kg)</th><th>价值 (元)</th></tr></thead><tbody><tr><td>A (钻石)</td><td>5</td><td>12</td></tr><tr><td>B (黄金)</td><td>4</td><td>10</td></tr><tr><td>C (画作)</td><td>3</td><td>8</td></tr><tr><td>D (花瓶)</td><td>2</td><td>5</td></tr></tbody></table><p><strong>目标：</strong> 小偷应该如何选择宝物放入背包，才能在<strong>不超过背包承重（10kg）<strong>的前提下，让</strong>总价值最高</strong>？</p><p>这个问题如果用暴力破解，需要计算 24=16 种组合。当宝物有几十件时，暴力破解就不可行了。这时，遗传算法就派上用场了。</p><hr><h3 id="遗传算法的解决步骤"><a href="#遗传算法的解决步骤" class="headerlink" title="遗传算法的解决步骤"></a>遗传算法的解决步骤</h3><h4 id="第1步：基因编码-Encoding"><a href="#第1步：基因编码-Encoding" class="headerlink" title="第1步：基因编码 (Encoding)"></a>第1步：基因编码 (Encoding)</h4><p>首先，我们需要把一个“解决方案”（即一种拿宝物的组合）表示成一串“基因”，也就是<strong>染色体 (Chromosome)</strong>。</p><p>最简单的方法是用一个长度为4的二进制字符串，每一位对应一件宝物。</p><ul><li><p><code>1</code> 代表“拿这件宝物”</p></li><li><p><code>0</code> 代表“不拿这件宝物”</p></li></ul><p><strong>例如：</strong></p><ul><li><p><strong><code>[1, 0, 1, 0]</code></strong> 代表：拿A(钻石)和C(画作)，不拿B和D。</p></li><li><p><strong><code>[0, 1, 1, 1]</code></strong> 代表：拿B(黄金)、C(画作)和D(花瓶)。</p></li></ul><h4 id="第2步：初始化种群-Initialization"><a href="#第2步：初始化种群-Initialization" class="headerlink" title="第2步：初始化种群 (Initialization)"></a>第2步：初始化种群 (Initialization)</h4><p>遗传算法不是从一个解开始，而是从一个<strong>种群 (Population)</strong> 开始。我们随机生成一组初始的染色体（解决方案）。假设我们随机生成了下面4个个体组成了我们的初始种群：</p><ul><li><p><strong>个体1</strong>: <code>[1, 1, 0, 0]</code></p></li><li><p><strong>个体2</strong>: <code>[0, 1, 1, 1]</code></p></li><li><p><strong>个体3</strong>: <code>[1, 0, 1, 0]</code></p></li><li><p><strong>个体4</strong>: <code>[0, 0, 1, 1]</code></p></li></ul><h4 id="第3步：适应度评估-Fitness-Evaluation"><a href="#第3步：适应度评估-Fitness-Evaluation" class="headerlink" title="第3步：适应度评估 (Fitness Evaluation)"></a>第3步：适应度评估 (Fitness Evaluation)</h4><p>现在，我们需要一个函数来评估每个个体（解决方案）的好坏，这就是<strong>适应度函数 (Fitness Function)</strong>。</p><p>在这个问题里，适应度就是所选宝物的总价值。但有一个关键规则：</p><p>如果总重量超过背包承重(10kg)，那么这个方案是无效的，适应度为 0。</p><p>我们来计算一下初始种群的适应度：</p><ul><li><p><strong>个体1 <code>[1,1,0,0]</code></strong>:</p><ul><li><p>重量: 5 + 4 = 9kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 12 + 10 = 22</p></li><li><p><strong>适应度 = 22</strong></p></li></ul></li><li><p><strong>个体2 <code>[0,1,1,1]</code></strong>:</p><ul><li><p>重量: 4 + 3 + 2 = 9kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 10 + 8 + 5 = 23</p></li><li><p><strong>适应度 = 23</strong></p></li></ul></li><li><p><strong>个体3 <code>[1,0,1,0]</code></strong>:</p><ul><li><p>重量: 5 + 3 = 8kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 12 + 8 = 20</p></li><li><p><strong>适应度 = 20</strong></p></li></ul></li><li><p><strong>个体4 <code>[0,0,1,1]</code></strong>:</p><ul><li><p>重量: 3 + 2 = 5kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 8 + 5 = 13</p></li><li><p><strong>适应度 = 13</strong></p></li></ul></li></ul><p>目前来看，<strong>个体2 <code>[0,1,1,1]</code> 是当前种群中最好的解决方案</strong>。</p><h4 id="第4步：选择-Selection"><a href="#第4步：选择-Selection" class="headerlink" title="第4步：选择 (Selection)"></a>第4步：选择 (Selection)</h4><p>遵循“优胜劣汰”的自然法则，适应度越高的个体，越有可能被选中作为“父母”来繁衍下一代。</p><p>常见的选择方法是<strong>轮盘赌选择法</strong>。想象一个轮盘，每个个体的扇区大小与它的适应度成正比。适应度为23的个体2，扇区最大，最容易被指针选到。</p><p>假设经过选择，我们选中了<strong>个体2</strong>和<strong>个体1</strong>作为父母进行繁殖。</p><h4 id="第5步：交叉-Crossover"><a href="#第5步：交叉-Crossover" class="headerlink" title="第5步：交叉 (Crossover)"></a>第5步：交叉 (Crossover)</h4><p>交叉是模拟生物繁殖，父母双方交换部分基因，产生全新的后代。</p><p>我们随机选择一个交叉点，比如在第2位基因后面。然后将两个父代染色体的后半部分进行交换。</p><ul><li><p><strong>父代1</strong>: <code>[0, 1 | 1, 1]</code> (来自个体2)</p></li><li><p><strong>父代2</strong>: <code>[1, 1 | 0, 0]</code> (来自个体1)</p></li></ul><p>交换<code>|</code>后面的部分，产生两个新的子代：</p><ul><li><p><strong>子代1</strong>: <code>[0, 1, 0, 0]</code></p></li><li><p><strong>子代2</strong>: <code>[1, 1, 1, 1]</code></p></li></ul><h4 id="第6步：变异-Mutation"><a href="#第6步：变异-Mutation" class="headerlink" title="第6步：变异 (Mutation)"></a>第6步：变异 (Mutation)</h4><p>为了防止算法陷入局部最优（比如所有个体都长得差不多），我们需要引入<strong>变异</strong>，以一个很小的概率随机改变基因。</p><p>比如，我们对<strong>子代1</strong>进行变异：</p><ul><li><p>变异前: <code>[0, 1, 0, 0]</code></p></li><li><p>随机选择第4位进行变异（0 -&gt; 1）</p></li><li><p><strong>变异后</strong>: <code>[0, 1, 0, 1]</code></p></li></ul><p>这个变异后的新个体 <code>[0,1,0,1]</code> 代表拿B和D，总重6kg，价值15，这是一个全新的、可能不错的解决方案！</p><h4 id="第7步：新一代与循环"><a href="#第7步：新一代与循环" class="headerlink" title="第7步：新一代与循环"></a>第7步：新一代与循环</h4><p>通过交叉和变异产生的新个体（子代）将组成<strong>新一代的种群</strong>。然后，算法回到<strong>第3步（适应度评估）</strong>，对新种群进行评估，然后再次进行选择、交叉、变异。</p><p>这个过程周而复始，一代又一代地“进化”。</p><hr><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p>经过很多代的进化后，种群中适应度最高的个体将趋于稳定。最终，算法可能会收敛到 <code>[0,1,1,1]</code> (价值23) 或者 <code>[1,1,0,0]</code> (价值22) 或者其他更好的解。在这个简单例子里，最优解就是 <code>[0,1,1,1]</code>，总价值23。遗传算法通过模仿进化，很有可能找到这个最优解。</p><h1 id="AHP和TOPSIS"><a href="#AHP和TOPSIS" class="headerlink" title="AHP和TOPSIS"></a>AHP和TOPSIS</h1><ul><li><strong>AHP 是基于人的主观判断</strong>，核心在于“<strong>比较重要性</strong>”，强调<strong>结构化思考 + 权重提取</strong>；</li><li><strong>TOPSIS 是基于数据的客观距离计算</strong>，核心在于“<strong>谁更接近理想</strong>”，强调<strong>最优解的几何逼近</strong>。</li></ul><table><thead><tr><th>维度</th><th>AHP（层次分析法）</th><th>TOPSIS（理想解法）</th></tr></thead><tbody><tr><td><strong>输入依赖</strong></td><td>依赖<strong>专家主观判断</strong>（两两比较）</td><td>依赖<strong>方案原始数据矩阵</strong>（如成本、评分等）</td></tr><tr><td><strong>核心思想</strong></td><td>通过成对比较提取每个准则的重要性权重</td><td>选出离正理想解最近、离负理想解最远的方案</td></tr><tr><td><strong>数学依据</strong></td><td>特征值理论（判断矩阵的主特征向量）</td><td>欧几里得距离（几何空间距离）</td></tr><tr><td><strong>输出结果</strong></td><td>准则权重、方案得分</td><td>方案的贴近度 Ci，排序</td></tr><tr><td><strong>数据需求</strong></td><td>需要构建判断矩阵，规模太大效率低</td><td>只需标准化原始数据，不需要主观比较</td></tr><tr><td><strong>一致性检验</strong></td><td>需进行一致性比率 CR 检验</td><td>不需要一致性检验</td></tr><tr><td><strong>适用场景</strong></td><td>人工可比主观偏好强的情境（战略、政策等）</td><td>有客观指标、数据齐全，需数值化评估的情境（选产品）</td></tr><tr><td><strong>优点</strong></td><td>可量化主观偏好，结构清晰</td><td>简单直观、计算快速，适用性广</td></tr><tr><td><strong>缺点</strong></td><td>主观性强，维度多时构建判断矩阵困难</td><td>忽略指标之间可能的权重差异或相关性</td></tr></tbody></table><p>TOPSIS（原始决策矩阵+每个指标的权重）<br>返回参数的排序</p><table><thead><tr><th>方案</th><th>价格（万元）</th><th>性能（分）</th><th>重量（kg）</th><th>续航（小时）</th></tr></thead><tbody><tr><td>A</td><td>5</td><td>80</td><td>1.5</td><td>8</td></tr><tr><td>B</td><td>6</td><td>90</td><td>1.2</td><td>10</td></tr><tr><td>C</td><td>4.5</td><td>70</td><td>1.8</td><td>6</td></tr><tr><td>这反映了决策者对各个指标“重要程度”的主观或客观判断：</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>权重向量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.924ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8806.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(993.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2049.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2327.6,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3480.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3924.8,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5077.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5522,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6860.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7305.3,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8528.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.274ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4099.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="msub" transform="translate(1222.7,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2265.6,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(2543.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3599.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p><p>比如：</p><ul><li>价格 0.3（越低越好）</li><li>性能 0.4（越高越好）</li><li>重量 0.1（越低越好）</li><li>续航 0.2（越高越好）</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gradient Descent ，Stochastic Gradient Descent 和Adaptive Moment Estimation&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="梯度下降" scheme="https://jayli19707.github.io/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
  </entry>
  
</feed>
