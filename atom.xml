<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Justin的技术博客</title>
  
  <subtitle>比世界先发现你发光</subtitle>
  <link href="https://jayli19707.github.io/atom.xml" rel="self"/>
  
  <link href="https://jayli19707.github.io/"/>
  <updated>2025-07-31T17:55:54.428Z</updated>
  <id>https://jayli19707.github.io/</id>
  
  <author>
    <name>Justin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习环境配置</title>
    <link href="https://jayli19707.github.io/2025/08/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://jayli19707.github.io/2025/08/01/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2025-07-31T17:30:00.000Z</published>
    <updated>2025-07-31T17:55:54.428Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>【终极指南】吃透机器学习环境配置：从Conda、CUDA到Docker容器化<br>大家好！在机器学习的旅程中，一个稳定、可复现的环境是成功的基石。</p><h3 id="第一部分：核心理念——为何环境配置如此重要？"><a href="#第一部分：核心理念——为何环境配置如此重要？" class="headerlink" title="第一部分：核心理念——为何环境配置如此重要？"></a><strong>第一部分：核心理念——为何环境配置如此重要？</strong></h3><p>任何机器学习模型的运行，都离不开一个精确配置的环境 。一个好的环境配置实践，能为您带来以下核心优势：</p><ul><li><p><strong>隔离性</strong>：确保不同项目间的依赖库互不干扰，避免版本冲突 。</p></li><li><p><strong>可复现性</strong>：让您的代码在任何机器上都能得到相同的结果，这在学术研究和工业生产中至关重要 。</p></li><li><p><strong>易于迁移</strong>：方便地将整个工作环境打包、迁移，实现快速部署 。</p></li></ul><hr><h3 id="第二部分：入门必备——包管理工具-Conda-Pipenv"><a href="#第二部分：入门必备——包管理工具-Conda-Pipenv" class="headerlink" title="第二部分：入门必备——包管理工具 (Conda & Pipenv)"></a><strong>第二部分：入门必备——包管理工具 (Conda &amp; Pipenv)</strong></h3><p>包管理工具是环境配置的第一步，它们帮助我们创建独立的虚拟环境并管理项目所需的各种软件包。</p><h4 id="1-Conda"><a href="#1-Conda" class="headerlink" title="1. Conda"></a><strong>1. Conda</strong></h4><p>Conda是一个开源、跨平台的包和环境管理系统，功能强大且社区支持广泛 。</p><ul><li><p><strong>创建环境</strong>: <code>conda create -n test_env</code></p></li><li><p><strong>安装包 (以PyTorch为例)</strong>: <code>conda install -n test_env pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch</code></p></li><li><p><strong>激活与退出</strong>: <code>conda activate test_env</code> 和 <code>conda deactivate</code></p></li></ul><h4 id="2-Pipenv"><a href="#2-Pipenv" class="headerlink" title="2. Pipenv"></a><strong>2. Pipenv</strong></h4><p>Pipenv旨在将</p><p><code>pip</code>（包安装）和<code>virtualenv</code>（虚拟环境）的功能合二为一，让依赖管理更自动化 。</p><ul><li><p><strong>安装包</strong>: <code>pipenv install numpy torch</code></p></li><li><p><strong>激活与退出</strong>: <code>pipenv shell</code> 和 <code>Ctrl + D</code></p></li></ul><hr><h3 id="第三部分：进阶核心——深入理解GPU、驱动与CUDA"><a href="#第三部分：进阶核心——深入理解GPU、驱动与CUDA" class="headerlink" title="第三部分：进阶核心——深入理解GPU、驱动与CUDA"></a><strong>第三部分：进阶核心——深入理解GPU、驱动与CUDA</strong></h3><p>仅仅安装好软件包是不够的，要让代码在GPU上跑起来，我们必须理解硬件、驱动和CUDA之间的关系。</p><h4 id="Q1：NVIDIA驱动和CUDA有什么区别？"><a href="#Q1：NVIDIA驱动和CUDA有什么区别？" class="headerlink" title="Q1：NVIDIA驱动和CUDA有什么区别？"></a><strong>Q1：NVIDIA驱动和CUDA有什么区别？</strong></h4><p>这是一个非常关键的问题。简单来说，<strong>驱动是基础，CUDA是建立在该基础之上的应用开发平台</strong>。</p><ul><li><p><strong>NVIDIA驱动 (NVIDIA Driver)</strong>：它是连接操作系统和GPU硬件的“桥梁” 。没有驱动，您的电脑根本无法识别GPU 。驱动程序本身包含一个版本的CUDA API，称为</p><p>  <strong>驱动CUDA版本 (Driver CUDA Version)</strong>，您可以通过在终端运行<code>nvidia-smi</code>命令查看。这个版本代表了该驱动<strong>最高能够支持</strong>的CUDA功能 。</p></li><li><p><strong>CUDA运行时 (CUDA Runtime)</strong>：当我们说“为PyTorch安装CUDA”时，通常指的是安装<strong>CUDA运行时</strong> 。它是一个并行的计算平台和编程接口（API），允许像PyTorch这样的框架利用GPU强大的并行计算能力（如矩阵运算）来加速模型训练 。</p></li></ul><p><strong>最重要的兼容性法则</strong>：<strong>驱动的CUDA版本必须大于或等于运行时的CUDA版本</strong> 。例如，如果</p><p><code>nvidia-smi</code>显示CUDA版本是11.6，那么您为项目安装的运行时CUDA版本（如11.3）不能超过11.6 。</p><hr><h3 id="第四部分：高手之路——拥抱容器化-Docker"><a href="#第四部分：高手之路——拥抱容器化-Docker" class="headerlink" title="第四部分：高手之路——拥抱容器化 (Docker)"></a><strong>第四部分：高手之路——拥抱容器化 (Docker)</strong></h3><p>当环境变得异常复杂时（例如，需要在最新的GPU上运行依赖旧版CUDA的旧项目），容器化技术就成了我们的终极武器。</p><h4 id="Q2：虚拟机和容器有什么区别？我应该用哪个？"><a href="#Q2：虚拟机和容器有什么区别？我应该用哪个？" class="headerlink" title="Q2：虚拟机和容器有什么区别？我应该用哪个？"></a><strong>Q2：虚拟机和容器有什么区别？我应该用哪个？</strong></h4><ul><li><p><strong>虚拟机 (Virtual Machine, VM)</strong>：它虚拟化了<strong>整个操作系统</strong> 。就像在Windows上安装一个软件，运行一个完整的Linux系统。这使得它非常“重”，但隔离性极强 。</p></li><li><p><strong>容器 (Container)</strong>：它运行在<strong>同一个主机操作系统之上</strong>，共享系统内核 。它虚拟的不是操作系统，而是</p><p>  <strong>应用程序及其所有依赖项</strong>的运行环境。这使得容器非常“轻量”，启动极快 。</p></li></ul><p>对于机器学习开发，<strong>容器通常是更好的选择</strong>，因为它在提供了足够隔离性的同时，性能开销更小。</p><h4 id="Q3：为什么要使用容器？它解决了什么问题？"><a href="#Q3：为什么要使用容器？它解决了什么问题？" class="headerlink" title="Q3：为什么要使用容器？它解决了什么问题？"></a><strong>Q3：为什么要使用容器？它解决了什么问题？</strong></h4><p>使用容器的核心原因是为了<strong>解决环境的复杂性、可移植性和兼容性难题</strong>。</p><ol><li><p><strong>处理复杂依赖</strong>：当您需要特定版本的库（如cuDNN、NCCL）来进行分布式训练时，容器可以将这一切完美打包 。</p></li><li><p><strong>解决兼容性噩梦</strong>：您可以在容器里打包旧版的PyTorch和它依赖的旧版CUDA，然后在安装了最新驱动和GPU的机器上无缝运行 。</p></li><li><p><strong>行业标准</strong>：无论是工业界的Kubernetes还是学术界的Slurm，都广泛采用容器作为应用部署的标准单元 。</p></li></ol><h4 id="Q4：为什么文件推荐使用NVIDIA自己的容器？"><a href="#Q4：为什么文件推荐使用NVIDIA自己的容器？" class="headerlink" title="Q4：为什么文件推荐使用NVIDIA自己的容器？"></a><strong>Q4：为什么文件推荐使用NVIDIA自己的容器？</strong></h4><p>因为标准的Docker容器无法很好地适配GPU。如果在普通容器里使用GPU，会要求容器内的驱动版本必须和主机的驱动版本</p><p><strong>完全一致</strong>，这极大地破坏了容器的“可移植性” 。</p><p><strong>NVIDIA Docker是完美的解决方案</strong> 。</p><ul><li><p><strong>核心优势</strong>：您<strong>无需在容器内安装任何NVIDIA驱动</strong> 。NVIDIA Docker会自动将主机的驱动和GPU设备安全地映射到容器中。</p></li><li><p><strong>带来的好处</strong>：这让在容器中使用GPU变得极其简单，并且让您的容器镜像具有了真正的可移植性，可以在任何安装了NVIDIA Docker的机器上运行 。</p></li></ul><p><strong>使用NVIDIA Docker的流程</strong>：</p><ol><li><p>在主机上安装好NVIDIA驱动和NVIDIA Docker 。</p></li><li><p>从Docker Hub拉取官方预构建的镜像 (如</p><p> <code>docker pull pytorch/pytorch:1.9.1-cuda11.1-cudnn8-runtime</code>) 。</p></li><li><p>使用</p><p> <code>--gpus all</code> 参数启动容器，即可在容器内访问GPU 。</p></li></ol><hr><h3 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a><strong>最终总结</strong></h3><ol><li><p><strong>驱动先行</strong>：无论采用何种方案，<strong>必须</strong>在主机上正确安装NVIDIA驱动 。</p></li><li><p><strong>版本兼容</strong>：牢记，运行时的CUDA版本不能高于驱动支持的CUDA版本 。</p></li><li><p><strong>拥抱容器</strong>：对于复杂的GPU环境，<strong>强烈推荐使用NVIDIA Docker</strong>。它能为您免去无数环境配置的烦恼，让您专注于算法和模型本身。</p></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;【终极指南】吃透机器学习环境配置：从Conda、CUDA到Docker容器化&lt;br&gt;大家好！在机器学习的旅程中，一个稳定、可复现的环境是成功的基石。&lt;/p&gt;
&lt;h3</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-206.反转链表</title>
    <link href="https://jayli19707.github.io/2025/07/31/Leetcode-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/07/31/Leetcode-206.%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</id>
    <published>2025-07-31T15:30:00.000Z</published>
    <updated>2025-07-31T15:44:22.380Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250731234151006.png" alt="image.png"></p><ul><li><p><strong>思路概述</strong></p><ul><li><p>利用栈的 <strong>先进后出（LIFO）</strong> 特性，先顺序遍历链表，把所有节点压入栈；</p></li><li><p>弹出栈顶节点时正好是原链表的尾节点，依次连接即可得到反转链表。</p></li></ul></li><li><p><strong>具体步骤</strong></p><ol><li><p>初始化空栈 <code>st</code>；</p></li><li><p>遍历链表 <code>head</code>，将每个节点压入栈中；</p></li><li><p>栈顶弹出节点作为新链表头 <code>new_head</code>，并维护一个可移动尾指针 <code>cur</code>；</p></li><li><p>每次出栈一个节点：</p><ul><li><p>先断开该节点原来的 <code>next</code>（防止形成环）；</p></li><li><p>接在新链表尾部 <code>cur.next = node</code>；</p></li><li><p>移动尾指针 <code>cur = node</code>；</p></li></ul></li><li><p>循环结束后，<code>cur.next = None</code> 并返回 <code>new_head</code>。</p></li></ol></li></ul><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(n)，遍历一次压栈，一次出栈；</p></li><li><p>空间复杂度：O(n)，栈存储了全部节点引用。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseList</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">Optional</span>[ListNode]:</span><br><span class="line">        p=head</span><br><span class="line">        st=[]</span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">            st.append(p)</span><br><span class="line">            p=p.<span class="built_in">next</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        tail = dummy</span><br><span class="line">        <span class="keyword">while</span> st:</span><br><span class="line">            node=st.pop()</span><br><span class="line">            tail.<span class="built_in">next</span>=node</span><br><span class="line">            tail=node</span><br><span class="line">        tail.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250731234151006.png&quot;</summary>
        
      
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>从函数到大模型</title>
    <link href="https://jayli19707.github.io/2025/07/31/%E4%BB%8E%E5%87%BD%E6%95%B0%E5%88%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B/"/>
    <id>https://jayli19707.github.io/2025/07/31/%E4%BB%8E%E5%87%BD%E6%95%B0%E5%88%B0%E5%A4%A7%E6%A8%A1%E5%9E%8B/</id>
    <published>2025-07-30T18:30:00.000Z</published>
    <updated>2025-07-30T18:18:24.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度学习与人工智能的核心原理解析"><a href="#深度学习与人工智能的核心原理解析" class="headerlink" title="深度学习与人工智能的核心原理解析"></a>深度学习与人工智能的核心原理解析</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>人工智能的本质是什么？从早期的符号主义到现代的大规模神经网络，人工智能的发展经历了诸多变革。本文以一个函数为起点，带领读者逐步理解人工智能背后的核心思想，包括神经网络的构建、训练方法，及其在自然语言处理中的应用。通过深入浅出的讲解，你将掌握深度学习如何通过不断调整参数，实现对复杂现实世界的有效建模，为理解当下大模型技术打下坚实基础。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>人工智能早期的思路是符号主义，试图用精确的函数描述世界的所有规律。然而，现实世界的复杂性远超人类编写明确函数的能力，例如图像识别中简单的“猫”与“母”的判别，对计算机来说却是难题。为此，人们转向连接主义，通过构造近似函数模型来处理复杂问题。这一思路催生了神经网络，通过层层非线性变换实现对复杂数据的拟合。训练神经网络的核心在于寻找最佳参数，使得模型输出与真实数据误差最小。随着技术进步，深度学习模型逐渐发展出多种结构以适应不同类型数据，如卷积神经网络（CNN）处理图像，循环神经网络（RNN）处理序列数据，进而到Transformer架引领的自然语言处理革命。</p><h2 id="主要观点"><a href="#主要观点" class="headerlink" title="主要观点"></a>主要观点</h2><h3 id="1-连接主义与函数拟合的基本思想"><a href="#1-连接主义与函数拟合的基本思想" class="headerlink" title="1. 连接主义与函数拟合的基本思想"></a>1. 连接主义与函数拟合的基本思想</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/19a6ee53-b44c-459f-a61f-dcfb77b843ce/89.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/19a6ee53-b44c-459f-a61f-dcfb77b843ce/120.0.jpg"></p><p>传统符号主义假设存在一个精确函数能描述现实中的所有规律，但面对诸如图像识别的复杂任务，这种方式难以实现。连接主义放弃寻找精确函数，采用“猜测”并反复调整参数的方式，通过近似函数来拟合数据。以简单的线性函数 ( y = wx + b ) 为例，通过不断调整参数 ( w ) 和 ( b )，使得线性模型尽可能拟合给定数据点。这种“猜与改”的方法体现了现代人工智能的核心思路。  </p><h3 id="2-神经网络：激活函数与非线性变换"><a href="#2-神经网络：激活函数与非线性变换" class="headerlink" title="2. 神经网络：激活函数与非线性变换"></a>2. 神经网络：激活函数与非线性变换</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/19a6ee53-b44c-459f-a61f-dcfb77b843ce/229.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/7da6e129-5593-43d1-9555-deb6e86a4a93/343.0.jpg"></p><p>仅用线性函数无法表达复杂关系，故引入激活函数（如平方、sin、指数函数）将线性组合转变为非线性函数。神经网络由输入层、隐藏层和输出层组成，每层包含多个神经元，层与层之间进行线性变换后套用激活函数，形成复杂的非线性映射。多层网络结构可理论上逼近任意连续函数。  </p><h3 id="3-损失函数与梯度下降：模型训练的数学基础"><a href="#3-损失函数与梯度下降：模型训练的数学基础" class="headerlink" title="3. 损失函数与梯度下降：模型训练的数学基础"></a>3. 损失函数与梯度下降：模型训练的数学基础</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/7da6e129-5593-43d1-9555-deb6e86a4a93/551.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/7da6e129-5593-43d1-9555-deb6e86a4a93/812.0.jpg"></p><p>训练神经网络的目标是最小化损失函数，常用的均方误差（MSE）衡量预测值与真实值的差距。通过计算损失函数相对于参数的偏导数（梯度），利用梯度下降法不断调整参数，使损失函数逐渐减小，模型拟合效果逐步提升。复杂神经网络的参数众多，直接求解解析解不可行，梯度下降结合链式法则（反向传播）实现高效训练。  </p><h3 id="4-网络结构进阶：从全连接层到卷积神经网络（CNN）"><a href="#4-网络结构进阶：从全连接层到卷积神经网络（CNN）" class="headerlink" title="4. 网络结构进阶：从全连接层到卷积神经网络（CNN）"></a>4. 网络结构进阶：从全连接层到卷积神经网络（CNN）</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/a39af8d5-0881-43f5-8dbd-8a028272bda2/1739.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/a39af8d5-0881-43f5-8dbd-8a028272bda2/1824.0.jpg"></p><p>全连接层中，每个神经元与上一层所有神经元连接，参数量庞大且难以保持输入数据的局部特征。卷积神经网络通过卷积核滑动窗口操作提取局部空间特征，大幅减少参数数量，同时保留图像的空间结构信息。卷积层与池化层交替使用，构成高效的图像识别网络。  </p><h3 id="5-自然语言处理中的词嵌入与循环神经网络（RNN）"><a href="#5-自然语言处理中的词嵌入与循环神经网络（RNN）" class="headerlink" title="5. 自然语言处理中的词嵌入与循环神经网络（RNN）"></a>5. 自然语言处理中的词嵌入与循环神经网络（RNN）</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/a39af8d5-0881-43f5-8dbd-8a028272bda2/2174.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/4b2216e5-fd82-4bb3-b617-310b255550db/2329.0.jpg"></p><p>自然语言的输入需先通过编码转换为计算机可识别的向量，词嵌入（embedding）通过训练获得，能反映词语间的语义相关性。经典神经网络无法处理词序信息，RNN引入隐藏状态，逐步传递序列信息，具备捕捉上下文的能力。尽管RNN存在长期依赖题，改进型模型如LSTM和GRU缓解了部分问题。  </p><h3 id="6-Transformer与注意力机制：自然语言处理的新纪元"><a href="#6-Transformer与注意力机制：自然语言处理的新纪元" class="headerlink" title="6. Transformer与注意力机制：自然语言处理的新纪元"></a>6. Transformer与注意力机制：自然语言处理的新纪元</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/4b2216e5-fd82-4bb3-b617-310b255550db/2561.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/4b2216e5-fd82-4bb3-b617-310b255550db/2792.0.jpg"></p><p>Transformer架构通过多头自注意力机制，打破RNN顺序计算限制，实现并行处理序列信息。词向量加上位置编码后，通过查询（Q）、键（K）、值（V）矩阵计算词间相关性权重动态聚合上下文信息。多头注意力允许模型从多视角学习词间关系，极大提升表达能力，是现代大模型如GPT系列的基础。  </p><h3 id="7-模型泛化与正则化：防止过拟合的策略"><a href="#7-模型泛化与正则化：防止过拟合的策略" class="headerlink" title="7. 模型泛化与正则化：防止过拟合的策略"></a>7. 模型泛化与正则化：防止过拟合的策略</h3><p><img src="https://oss.vidseekapp.com/video/screenshots/850b231e-d5c0-4332-88d8-99d023277b7d/1147.0.jpg"></p><p><img src="https://oss.vidseekapp.com/video/screenshots/850b231e-d5c0-4332-88d8-99d023277b7d/1258.0.jpg"></p><p>过拟合是模型在训练数据上表现优异但泛化能力差的现象。防止过拟合策略包括简化模型结构、增加训练数据、数据增强（如图像旋转、裁剪）、早停训练、以及正则化（L1、L2正则化）限制参数过大增长。此外，Dropout随机丢弃部分神经元训练，也是常用有效的方法。针对训练中梯度消失、梯度爆炸问题，还引入梯度裁剪、合理权重初始化、优化器改进等技术。  </p><h3 id="8-大模型生态与发展趋势"><a href="#8-大模型生态与发展趋势" class="headerlink" title="8. 大模型生态与发展趋势"></a>8. 大模型生态与发展趋势</h3><p>随着模型规模激增，训练成本高昂，模型压缩、蒸馏、稀疏化、优化微调方法层出不穷。同时，AI服务生态完善，包含硬件（GPU、TPU、NPU）、开发工具（PyTorch、TensorFlow、HuggingFace）、推理引擎以及智能体和工作流框架。大模型虽强，但仍面临边际收益递减，未来更多聚焦效率提升和多模态融合。开源与闭源模型并存，推动技术普及与创新。  </p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>理解人工智能的本质，即将复杂现实世界抽象为可调节函数的过程，是深入掌握度学习技术的关键。通过神经网络构建非线性函数模型，结合损失函数最小化和梯度下降训练方法，AI系统能够逐步逼近真实数据规律。不同网络结构（如CNN、RNN、Transformer）针对不同数据类型发挥优势，推动了图像识别与自然语言处理的飞跃发展。防止过拟合和提升训练效率的各种技巧，确保模型具备良好泛化能力。未来，模型规模与能力持续增长的同时，技术创新将更注重模型轻量化、多模态融合及应用生态建设。全面理解这些核心原理，不仅有助于领会现有AI技术的运行机制，也为未来AI的研究与应用奠定坚实基础。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>笔记仅用于学习<br>本文内容总结自抖音视频 @飞天闪客：一小时从函数到transformer<br>[[<a href="https://www.douyin.com/root/search/%E9%A3%9E%E5%A4%A9%E9%97%AA%E5%AE%A21?modal_id=7529550345501035791&type=video%5D%5D">https://www.douyin.com/root/search/%E9%A3%9E%E5%A4%A9%E9%97%AA%E5%AE%A21?modal_id=7529550345501035791&amp;type=video]]</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;深度学习与人工智能的核心原理解析&quot;&gt;&lt;a href=&quot;#深度学习与人工智能的核心原理解析&quot; class=&quot;headerlink&quot; title=&quot;深度学习与人工智能的核心原理解析&quot;&gt;&lt;/a&gt;深度学习与人工智能的核心原理解析&lt;/h1&gt;&lt;h2 id=&quot;引言&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>LeetCode 160：相交链表</title>
    <link href="https://jayli19707.github.io/2025/07/30/LeetCode%20160%EF%BC%9A%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>https://jayli19707.github.io/2025/07/30/LeetCode%20160%EF%BC%9A%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2025-07-30T15:30:00.000Z</published>
    <updated>2025-07-30T15:17:58.495Z</updated>
    
    <content type="html"><![CDATA[<p>先补充数组和动态数组的区别，再比较动态数组和链表的区别，最后讲解本题题解。</p><span id="more"></span><h1 id="数组和动态数组"><a href="#数组和动态数组" class="headerlink" title="数组和动态数组"></a>数组和动态数组</h1><h2 id="1-普通数组（静态数组，Static-Array）"><a href="#1-普通数组（静态数组，Static-Array）" class="headerlink" title="1. 普通数组（静态数组，Static Array）"></a>1. 普通数组（静态数组，Static Array）</h2><ul><li><p><strong>内存分配</strong>：一旦定义，大小固定（如 C 语言中的 <code>int arr[5]</code>）。</p></li><li><p><strong>缺点</strong>：如果满了就不能再加元素，想扩容必须手动申请新数组并复制数据。</p></li><li><p><strong>优点</strong>：结构简单，内存连续，访问下标 O(1)。</p></li></ul><hr><h2 id="2-动态数组（Dynamic-Array）"><a href="#2-动态数组（Dynamic-Array）" class="headerlink" title="2. 动态数组（Dynamic Array）"></a>2. 动态数组（Dynamic Array）</h2><ul><li><p><strong>内存分配</strong>：底层还是数组，但容量不足时会<strong>自动申请更大空间并复制元素</strong>，对用户是透明的。</p></li><li><p><strong>扩容策略</strong>：常见是扩容为当前容量的 1.5~2 倍，以减少频繁复制。</p></li><li><p><strong>典型实现</strong>：</p><ul><li><p>Python 的 <code>list</code></p></li><li><p>Java 的 <code>ArrayList</code></p></li><li><p>C++ 的 <code>std::vector</code></p></li></ul></li></ul><h1 id="动态数组（Dynamic-Array）和链表（Linked-List）"><a href="#动态数组（Dynamic-Array）和链表（Linked-List）" class="headerlink" title="动态数组（Dynamic Array）和链表（Linked List）"></a>动态数组（Dynamic Array）和链表（Linked List）</h1><p>两种典型的线性数据结构，它们在<strong>内存分配、访问方式、插入删除效率</strong>等方面有明显区别：</p><hr><h2 id="1-内存分配方式"><a href="#1-内存分配方式" class="headerlink" title="1. 内存分配方式"></a>1. 内存分配方式</h2><ul><li><p><strong>动态数组</strong>（如 Python 的 <code>list</code>）：</p><ul><li><p>在内存中分配一块<strong>连续的空间</strong>来存放元素。</p></li><li><p>如果容量不够，会一次性申请更大的空间（通常是扩容 1.5~2 倍），然后把旧数据拷贝过去。</p></li></ul></li><li><p><strong>链表</strong>：</p><ul><li><p>每个元素是一个<strong>节点</strong>，包含数据和指向下一个节点的指针（<code>next</code>）。</p></li><li><p>节点分散在内存中，通过指针链接，不要求连续内存。</p></li></ul></li></ul><hr><h2 id="2-元素访问效率"><a href="#2-元素访问效率" class="headerlink" title="2. 元素访问效率"></a>2. 元素访问效率</h2><ul><li><p><strong>动态数组</strong>：支持随机访问，<code>arr[i]</code> 时间复杂度 <strong>O(1)</strong>，因为可以直接通过偏移量定位。</p></li><li><p><strong>链表</strong>：只能从头节点开始依次遍历，查找第 <code>i</code> 个元素的时间复杂度 <strong>O(n)</strong>。</p></li></ul><hr><h2 id="3-插入与删除效率"><a href="#3-插入与删除效率" class="headerlink" title="3. 插入与删除效率"></a>3. 插入与删除效率</h2><ul><li><p><strong>动态数组</strong>：</p><ul><li><p>在尾部插入/删除：<strong>O(1)</strong>（摊销）</p></li><li><p>在中间插入/删除：<strong>O(n)</strong>，因为需要移动大量元素。</p></li></ul></li><li><p><strong>链表</strong>：</p><ul><li><p>已知节点的前驱节点时，插入/删除节点：<strong>O(1)</strong></p></li><li><p>但如果要先找到插入位置，查找过程是 <strong>O(n)</strong>。</p></li></ul></li></ul><hr><h2 id="4-空间利用率"><a href="#4-空间利用率" class="headerlink" title="4. 空间利用率"></a>4. 空间利用率</h2><ul><li><p><strong>动态数组</strong>：可能存在额外的预留空间（扩容时会浪费部分内存）。</p></li><li><p><strong>链表</strong>：每个节点需要额外的指针域，指针占用额外内存，尤其数据量小的时候浪费更明显。</p></li></ul><hr><h2 id="5-适用场景总结"><a href="#5-适用场景总结" class="headerlink" title="5. 适用场景总结"></a>5. 适用场景总结</h2><ul><li><p>如果<strong>访问多、随机读取多</strong>：用动态数组更高效（例如 Python 的 <code>list</code>）。</p></li><li><p>如果<strong>频繁插入删除</strong>，尤其在中间或两端：链表更适合（如 <code>collections.deque</code> 用的是双向链表+块结构）。</p></li></ul><hr><h3 id="直观对比表"><a href="#直观对比表" class="headerlink" title="直观对比表"></a>直观对比表</h3><table><thead><tr><th>特性</th><th>动态数组（Python list）</th><th>链表（Linked List）</th></tr></thead><tbody><tr><td>内存结构</td><td>连续内存</td><td>分散内存</td></tr><tr><td>随机访问效率</td><td>O(1)</td><td>O(n)</td></tr><tr><td>插入/删除效率</td><td>中间 O(n)，尾部 O(1)</td><td>已知节点 O(1)，查找 O(n)</td></tr><tr><td>空间开销</td><td>可能有预留空间</td><td>每个节点多一个指针</td></tr><tr><td>扩容成本</td><td>有扩容成本（复制数据）</td><td>无扩容成本</td></tr></tbody></table><hr><h1 id="LeetCode-160：相交链表"><a href="#LeetCode-160：相交链表" class="headerlink" title="LeetCode 160：相交链表"></a>LeetCode 160：相交链表</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250730231251725.png" alt="image.png"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在单链表题里，传进来的两个“头节点”headA、headB 就分别代表两条链表：每个头节点是第一个实际节点的引用，你可以从它开始沿着 .next 指针一直走到结尾把整条链表遍历出来。相交判定是看节点是否同一对象（p is q），不是看 val 是否相等</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><blockquote><p>把两个头节点headA，headB先赋值分别赋值给p，q，为了不改变头节点信息，当p的val和q的val不为null时，p走一步，q走一步，相同时返回，不相同一直遍历下去，A遍历完遍历B，B遍历完遍历A</p></blockquote><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li><p>时间复杂度: O(m+n)O(m+n)O(m+n)</p></li><li><p>空间复杂度: O(1) O(1) O(1)</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;先补充数组和动态数组的区别，再比较动态数组和链表的区别，最后讲解本题题解。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-.42接雨水</title>
    <link href="https://jayli19707.github.io/2025/07/24/Leetcode-.42%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <id>https://jayli19707.github.io/2025/07/24/Leetcode-.42%E6%8E%A5%E9%9B%A8%E6%B0%B4/</id>
    <published>2025-07-24T11:30:00.000Z</published>
    <updated>2025-07-24T11:36:26.983Z</updated>
    
    <content type="html"><![CDATA[<p>动态规划，记录i数组前后缀的最大值</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724191937062.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724191714298.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">trap</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        n=<span class="built_in">len</span>(height)</span><br><span class="line"></span><br><span class="line">        pre_max=n*[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        pre_max[<span class="number">0</span>]=height[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n):</span><br><span class="line"></span><br><span class="line">            pre_max[i]=<span class="built_in">max</span>(pre_max[i-<span class="number">1</span>],height[i])</span><br><span class="line"></span><br><span class="line">        suf_max=[<span class="number">0</span>]*n</span><br><span class="line"></span><br><span class="line">        suf_max[-<span class="number">1</span>]=height[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (n-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            suf_max[i]=<span class="built_in">max</span>(suf_max[i+<span class="number">1</span>],height[i])</span><br><span class="line"></span><br><span class="line">        ans=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> h,pre,suf <span class="keyword">in</span> <span class="built_in">zip</span>(height,pre_max,suf_max):</span><br><span class="line"></span><br><span class="line">            ans+=<span class="built_in">min</span>(pre,suf)-h</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><ul><li><code>pre_max[i]</code>：表示<strong>从最左边到当前位置 <code>i</code></strong> 为止的最大柱子高度；<br>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="50.464ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 22305.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(954,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(2123.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2652.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3224.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3502.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3847.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4403.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5459.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6337.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6866.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7438.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(7438.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7827.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(8403.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8869.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9214.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(9691.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(10267.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10628.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(10906.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(11406.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11684.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12129.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(12705.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(13171.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13516.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(13993.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(14569.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(14930.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(15208.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(15708.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(15986.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(16430.7,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(17769.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(18214.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(18790.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(19256.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(19601.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(20078.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(20654.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(21015.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(21293.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(21638.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(21916.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li><li><code>suf_max[i]</code>：表示<strong>从当前位置 <code>i</code> 到最右边</strong>的最大柱子高度；<br>  <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="58.385ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 25806 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1041,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(2234.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(2763.8,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3335.8,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(3613.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(3958.8,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(4514.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5570.4,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6448.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6977.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(7549.4,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mo" transform="translate(7549.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7938.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(8514.4,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(8980.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9325.4,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(9802.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(10378.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(10739.4,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(11017.4,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(11362.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11640.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(12085.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(12661.1,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(13127.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(13472.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(13949.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(14525.1,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(14886.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(15164.1,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(15731.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(16731.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(17231.5,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(17509.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(17954.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(19292.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(19737.5,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(20313.5,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(20779.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(21124.5,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(21601.5,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(22177.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(22538.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(22816.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(23638.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(24639,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(25139,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(25417,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></li></ul><p>对于下标 i，下雨后水能到达的最大高度等于下标 i 两边的最大高度的最小值，下标 i 处能接的雨水量等于下标 i 处的水能到达的最大高度减去 height[i]。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;动态规划，记录i数组前后缀的最大值&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>梯度下降</title>
    <link href="https://jayli19707.github.io/2025/07/24/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>https://jayli19707.github.io/2025/07/24/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</id>
    <published>2025-07-24T06:30:00.000Z</published>
    <updated>2025-07-24T06:28:18.593Z</updated>
    
    <content type="html"><![CDATA[<p>Gradient Descent ，Stochastic Gradient Descent 和Adaptive Moment Estimation</p><span id="more"></span><h1 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h1><p>我们来<strong>一步一步推导前两轮（epoch）梯度下降更新过程</strong>，以你提供的代码为基础，展示每轮如何更新参数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.97ex" role="img" focusable="false" viewBox="0 -705 905.6 870.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container> ,<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.049ex" height="1.934ex" role="img" focusable="false" viewBox="0 -705 905.6 855"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container>​。我们使用如下训练集：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="43.127ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 19062.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2185.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(2463.6,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(3463.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3908.2,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(4908.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(5352.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(6852.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(7297.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(8797.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mi" transform="translate(9075.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(10116.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(11172.1,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(11450.1,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(12950.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(13394.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(14894.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(15339.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(16839.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(17284.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(18784.1,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container><br>$$<br>初始化：</p><p>θ_0=0 \quad<br>θ_1​=0<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="0.036ex" height="0.036ex" role="img" focusable="false" viewBox="0 0 16 16"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"></g></g></svg></mjx-container>学习率: \quad η=0.0001$$</p><p>每个样本的损失函数为：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="27.895ex" height="2.666ex" role="img" focusable="false" viewBox="0 -883.9 12329.5 1178.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(681,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(1070,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1975.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2420.2,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3325.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3992.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(5048.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(5437.3,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(6565.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(7565.3,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="msub" transform="translate(8470.9,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(9639.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(10639.7,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="msup" transform="translate(11504,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><p>对参数求导得：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.971ex;" xmlns="http://www.w3.org/2000/svg" width="42.686ex" height="5.074ex" role="img" focusable="false" viewBox="0 -1371.3 18867.2 2242.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,-19.7)"><g data-mml-node="mtd"><g data-mml-node="mfrac"><g data-mml-node="mrow" transform="translate(332.3,676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><rect width="1671.6" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(1911.6,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1333.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1833.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2222.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3309.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(4309.3,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(5173.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(5562.7,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mfrac" transform="translate(5812.7,0)"><g data-mml-node="mrow" transform="translate(332.3,676)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="mi" transform="translate(566,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D715" d="M202 508Q179 508 169 520T158 547Q158 557 164 577T185 624T230 675T301 710L333 715H345Q378 715 384 714Q447 703 489 661T549 568T566 457Q566 362 519 240T402 53Q321 -22 223 -22Q123 -22 73 56Q42 102 42 148V159Q42 276 129 370T322 465Q383 465 414 434T455 367L458 378Q478 461 478 515Q478 603 437 639T344 676Q266 676 223 612Q264 606 264 572Q264 547 246 528T202 508ZM430 306Q430 372 401 400T333 428Q270 428 222 382Q197 354 183 323T150 221Q132 149 132 116Q132 21 232 21Q244 21 250 22Q327 35 374 112Q389 137 409 196T430 306Z"></path></g><g data-mml-node="msub" transform="translate(566,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><rect width="1671.6" height="60" x="120" y="220"></rect></g></g><g data-mml-node="mtd" transform="translate(11635.8,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1333.6,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(1833.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(2222.6,0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(3309.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(4309.3,0)"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g><g data-mml-node="mo" transform="translate(5173.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5784.9,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(6285.1,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g></g></g></g></g></svg></mjx-container></p><p>GD:<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="46.21ex" height="2.262ex" role="img" focusable="false" viewBox="0 -705 20424.8 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(905.6,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(1183.3,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="msub" transform="translate(2517.1,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3422.7,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(3644.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4645.1,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5364.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5864.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6393.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="msub" transform="translate(6878.6,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g><g data-mml-node="mi" transform="translate(7775.8,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8226.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(8755.8,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mstyle" transform="translate(9712.4,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msub" transform="translate(10712.4,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11617.9,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(11895.7,0)"><g data-mml-node="text"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="text" transform="translate(278,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g><g data-mml-node="msub" transform="translate(13229.5,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(14135.1,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(14357.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(15357.5,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(16076.7,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(16576.9,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(17105.9,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="msub" transform="translate(17590.9,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(510,-150) scale(0.707)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g><g data-mml-node="mi" transform="translate(18488.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(18939.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(19468.2,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(20424.8,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g></g></g></svg></mjx-container></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724022935144.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724022950999.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724023009480.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724023021821.png" alt="image.png"></p><h1 id="Stochastic-Gradient-Descent"><a href="#Stochastic-Gradient-Descent" class="headerlink" title="Stochastic Gradient Descent"></a>Stochastic Gradient Descent</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250724033107477.png" alt="image.png"></p><p>SGD 省略了因子 2，直接用：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.632ex" height="2.398ex" role="img" focusable="false" viewBox="0 -810 15749.6 1060"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(928,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(1457,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(2691.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3747.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4136.1,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4848.3,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(5848.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6338.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mstyle" transform="translate(6727.6,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(7727.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(8204.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8655.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(9184.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(10418.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(11474.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11863.7,0)"><g data-mml-node="mover"><g data-mml-node="mi"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(300.6,16) translate(-250 0)"><path data-c="5E" d="M112 560L249 694L257 686Q387 562 387 560L361 531Q359 532 303 581L250 627L195 580Q182 569 169 557T148 538L140 532Q138 530 125 546L112 560Z"></path></g></g></g><g data-mml-node="mo" transform="translate(12575.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(13576.1,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14066.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(14677.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(15177.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container></p><p>每个样本更新时立即使用该梯度进行参数调整：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.489ex;" xmlns="http://www.w3.org/2000/svg" width="39.467ex" height="2.084ex" role="img" focusable="false" viewBox="0 -705 17444.2 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1183.3,0)"><path data-c="2190" d="M944 261T944 250T929 230H165Q167 228 182 216T211 189T244 152T277 96T303 25Q308 7 308 0Q308 -11 288 -11Q281 -11 278 -11T272 -7T267 2T263 21Q245 94 195 151T73 236Q58 242 55 247Q55 254 59 257T73 264Q121 283 158 314T215 375T247 434T264 480L267 497Q269 503 270 505T275 509T288 511Q308 511 308 500Q308 493 303 475Q293 438 278 406T246 352T215 315T185 287T165 270H929Q944 261 944 250Z"></path></g><g data-mml-node="msub" transform="translate(2461.1,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(3588.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4589.1,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5308.3,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(5808.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(6285.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(7265.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mstyle" transform="translate(8222.1,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="msub" transform="translate(9222.1,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(10405.4,0)"><path data-c="2190" d="M944 261T944 250T929 230H165Q167 228 182 216T211 189T244 152T277 96T303 25Q308 7 308 0Q308 -11 288 -11Q281 -11 278 -11T272 -7T267 2T263 21Q245 94 195 151T73 236Q58 242 55 247Q55 254 59 257T73 264Q121 283 158 314T215 375T247 434T264 480L267 497Q269 503 270 505T275 509T288 511Q308 511 308 500Q308 493 303 475Q293 438 278 406T246 352T215 315T185 287T165 270H929Q944 261 944 250Z"></path></g><g data-mml-node="msub" transform="translate(11683.2,0)"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mn" transform="translate(502,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(12811,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(13811.2,0)"><path data-c="1D702" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q156 442 175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336V326Q503 302 439 53Q381 -182 377 -189Q364 -216 332 -216Q319 -216 310 -208T299 -186Q299 -177 358 57L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(14530.4,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(15030.7,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(15507.7,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(15958.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(16487.7,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></mjx-container></p><h1 id="Adaptive-Moment-Estimation"><a href="#Adaptive-Moment-Estimation" class="headerlink" title="Adaptive Moment Estimation"></a>Adaptive Moment Estimation</h1><p><strong>Adam = 动量 + 自适应学习率</strong></p><p>Adam 优化器非常聪明地将这两个想法结合了起来。它同时做了两件事：</p><ol><li>它像 <strong>Momentum</strong> 一样，计算梯度的<strong>一阶矩估计</strong>（就是梯度的平均值，可以理解为<strong>速度</strong>）。</li><li>它像 <strong>RMSProp</strong> 一样，计算梯度的<strong>二阶矩估计</strong>（就是梯度平方的平均值，可以理解为<strong>颠簸程度或速度的变化</strong>）。</li></ol><p>然后，它用这两个值来动态地、为每一个参数计算出独立的、最合适的更新步长。</p><p><strong>最终效果</strong>：Adam 这辆智能小车，<strong>既有方向感（动量），又能感知地形（自适应学习率）</strong>，所以它在绝大多数情况下都能又快又稳地找到山谷的最低点。</p><h1 id="Warm-Restarts-in-SGD-热重启"><a href="#Warm-Restarts-in-SGD-热重启" class="headerlink" title="Warm Restarts (in SGD) 热重启"></a>Warm Restarts (in SGD) 热重启</h1><p>这是一种<strong>学习率调整策略</strong>，全称是 Stochastic Gradient Descent with Warm Restarts (SGDR)。传统的学习率调整策略通常是单调递减的。而 Warm Restarts 策略则是<strong>周期性地“重启”学习率</strong>。</p><p>具体来说，学习率会从一个较高的初始值开始，按照一个预设的函数（如余弦函数）逐渐下降。当下降到最低点后，它会<strong>突然被重置回较高的初始值</strong>，然后开始下一轮的下降。这个过程就像在模型训练陷入一个局部最优点时，通过突然增大学习率来“踢它一脚”，帮助它<strong>跳出当前的局部最小值</strong>，去探索更广阔的参数空间，从而有机会找到一个更好的全局最优解。</p><h1 id="GA遗传算法"><a href="#GA遗传算法" class="headerlink" title="GA遗传算法"></a>GA遗传算法</h1><h3 id="场景：小偷的烦恼"><a href="#场景：小偷的烦恼" class="headerlink" title="场景：小偷的烦恼"></a>场景：小偷的烦恼</h3><p>想象一个小偷进入一个珠宝店，他有一个背包，<strong>最大承重是 10 公斤</strong>。店里有四件宝物，每件宝物的重量和价值如下：</p><table><thead><tr><th>宝物</th><th>重量 (kg)</th><th>价值 (元)</th></tr></thead><tbody><tr><td>A (钻石)</td><td>5</td><td>12</td></tr><tr><td>B (黄金)</td><td>4</td><td>10</td></tr><tr><td>C (画作)</td><td>3</td><td>8</td></tr><tr><td>D (花瓶)</td><td>2</td><td>5</td></tr></tbody></table><p><strong>目标：</strong> 小偷应该如何选择宝物放入背包，才能在<strong>不超过背包承重（10kg）<strong>的前提下，让</strong>总价值最高</strong>？</p><p>这个问题如果用暴力破解，需要计算 24=16 种组合。当宝物有几十件时，暴力破解就不可行了。这时，遗传算法就派上用场了。</p><hr><h3 id="遗传算法的解决步骤"><a href="#遗传算法的解决步骤" class="headerlink" title="遗传算法的解决步骤"></a>遗传算法的解决步骤</h3><h4 id="第1步：基因编码-Encoding"><a href="#第1步：基因编码-Encoding" class="headerlink" title="第1步：基因编码 (Encoding)"></a>第1步：基因编码 (Encoding)</h4><p>首先，我们需要把一个“解决方案”（即一种拿宝物的组合）表示成一串“基因”，也就是<strong>染色体 (Chromosome)</strong>。</p><p>最简单的方法是用一个长度为4的二进制字符串，每一位对应一件宝物。</p><ul><li><p><code>1</code> 代表“拿这件宝物”</p></li><li><p><code>0</code> 代表“不拿这件宝物”</p></li></ul><p><strong>例如：</strong></p><ul><li><p><strong><code>[1, 0, 1, 0]</code></strong> 代表：拿A(钻石)和C(画作)，不拿B和D。</p></li><li><p><strong><code>[0, 1, 1, 1]</code></strong> 代表：拿B(黄金)、C(画作)和D(花瓶)。</p></li></ul><h4 id="第2步：初始化种群-Initialization"><a href="#第2步：初始化种群-Initialization" class="headerlink" title="第2步：初始化种群 (Initialization)"></a>第2步：初始化种群 (Initialization)</h4><p>遗传算法不是从一个解开始，而是从一个<strong>种群 (Population)</strong> 开始。我们随机生成一组初始的染色体（解决方案）。假设我们随机生成了下面4个个体组成了我们的初始种群：</p><ul><li><p><strong>个体1</strong>: <code>[1, 1, 0, 0]</code></p></li><li><p><strong>个体2</strong>: <code>[0, 1, 1, 1]</code></p></li><li><p><strong>个体3</strong>: <code>[1, 0, 1, 0]</code></p></li><li><p><strong>个体4</strong>: <code>[0, 0, 1, 1]</code></p></li></ul><h4 id="第3步：适应度评估-Fitness-Evaluation"><a href="#第3步：适应度评估-Fitness-Evaluation" class="headerlink" title="第3步：适应度评估 (Fitness Evaluation)"></a>第3步：适应度评估 (Fitness Evaluation)</h4><p>现在，我们需要一个函数来评估每个个体（解决方案）的好坏，这就是<strong>适应度函数 (Fitness Function)</strong>。</p><p>在这个问题里，适应度就是所选宝物的总价值。但有一个关键规则：</p><p>如果总重量超过背包承重(10kg)，那么这个方案是无效的，适应度为 0。</p><p>我们来计算一下初始种群的适应度：</p><ul><li><p><strong>个体1 <code>[1,1,0,0]</code></strong>:</p><ul><li><p>重量: 5 + 4 = 9kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 12 + 10 = 22</p></li><li><p><strong>适应度 = 22</strong></p></li></ul></li><li><p><strong>个体2 <code>[0,1,1,1]</code></strong>:</p><ul><li><p>重量: 4 + 3 + 2 = 9kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 10 + 8 + 5 = 23</p></li><li><p><strong>适应度 = 23</strong></p></li></ul></li><li><p><strong>个体3 <code>[1,0,1,0]</code></strong>:</p><ul><li><p>重量: 5 + 3 = 8kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 12 + 8 = 20</p></li><li><p><strong>适应度 = 20</strong></p></li></ul></li><li><p><strong>个体4 <code>[0,0,1,1]</code></strong>:</p><ul><li><p>重量: 3 + 2 = 5kg (≤ 10kg) -&gt; 有效</p></li><li><p>价值: 8 + 5 = 13</p></li><li><p><strong>适应度 = 13</strong></p></li></ul></li></ul><p>目前来看，<strong>个体2 <code>[0,1,1,1]</code> 是当前种群中最好的解决方案</strong>。</p><h4 id="第4步：选择-Selection"><a href="#第4步：选择-Selection" class="headerlink" title="第4步：选择 (Selection)"></a>第4步：选择 (Selection)</h4><p>遵循“优胜劣汰”的自然法则，适应度越高的个体，越有可能被选中作为“父母”来繁衍下一代。</p><p>常见的选择方法是<strong>轮盘赌选择法</strong>。想象一个轮盘，每个个体的扇区大小与它的适应度成正比。适应度为23的个体2，扇区最大，最容易被指针选到。</p><p>假设经过选择，我们选中了<strong>个体2</strong>和<strong>个体1</strong>作为父母进行繁殖。</p><h4 id="第5步：交叉-Crossover"><a href="#第5步：交叉-Crossover" class="headerlink" title="第5步：交叉 (Crossover)"></a>第5步：交叉 (Crossover)</h4><p>交叉是模拟生物繁殖，父母双方交换部分基因，产生全新的后代。</p><p>我们随机选择一个交叉点，比如在第2位基因后面。然后将两个父代染色体的后半部分进行交换。</p><ul><li><p><strong>父代1</strong>: <code>[0, 1 | 1, 1]</code> (来自个体2)</p></li><li><p><strong>父代2</strong>: <code>[1, 1 | 0, 0]</code> (来自个体1)</p></li></ul><p>交换<code>|</code>后面的部分，产生两个新的子代：</p><ul><li><p><strong>子代1</strong>: <code>[0, 1, 0, 0]</code></p></li><li><p><strong>子代2</strong>: <code>[1, 1, 1, 1]</code></p></li></ul><h4 id="第6步：变异-Mutation"><a href="#第6步：变异-Mutation" class="headerlink" title="第6步：变异 (Mutation)"></a>第6步：变异 (Mutation)</h4><p>为了防止算法陷入局部最优（比如所有个体都长得差不多），我们需要引入<strong>变异</strong>，以一个很小的概率随机改变基因。</p><p>比如，我们对<strong>子代1</strong>进行变异：</p><ul><li><p>变异前: <code>[0, 1, 0, 0]</code></p></li><li><p>随机选择第4位进行变异（0 -&gt; 1）</p></li><li><p><strong>变异后</strong>: <code>[0, 1, 0, 1]</code></p></li></ul><p>这个变异后的新个体 <code>[0,1,0,1]</code> 代表拿B和D，总重6kg，价值15，这是一个全新的、可能不错的解决方案！</p><h4 id="第7步：新一代与循环"><a href="#第7步：新一代与循环" class="headerlink" title="第7步：新一代与循环"></a>第7步：新一代与循环</h4><p>通过交叉和变异产生的新个体（子代）将组成<strong>新一代的种群</strong>。然后，算法回到<strong>第3步（适应度评估）</strong>，对新种群进行评估，然后再次进行选择、交叉、变异。</p><p>这个过程周而复始，一代又一代地“进化”。</p><hr><h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p>经过很多代的进化后，种群中适应度最高的个体将趋于稳定。最终，算法可能会收敛到 <code>[0,1,1,1]</code> (价值23) 或者 <code>[1,1,0,0]</code> (价值22) 或者其他更好的解。在这个简单例子里，最优解就是 <code>[0,1,1,1]</code>，总价值23。遗传算法通过模仿进化，很有可能找到这个最优解。</p><h1 id="AHP和TOPSIS"><a href="#AHP和TOPSIS" class="headerlink" title="AHP和TOPSIS"></a>AHP和TOPSIS</h1><ul><li><strong>AHP 是基于人的主观判断</strong>，核心在于“<strong>比较重要性</strong>”，强调<strong>结构化思考 + 权重提取</strong>；</li><li><strong>TOPSIS 是基于数据的客观距离计算</strong>，核心在于“<strong>谁更接近理想</strong>”，强调<strong>最优解的几何逼近</strong>。</li></ul><table><thead><tr><th>维度</th><th>AHP（层次分析法）</th><th>TOPSIS（理想解法）</th></tr></thead><tbody><tr><td><strong>输入依赖</strong></td><td>依赖<strong>专家主观判断</strong>（两两比较）</td><td>依赖<strong>方案原始数据矩阵</strong>（如成本、评分等）</td></tr><tr><td><strong>核心思想</strong></td><td>通过成对比较提取每个准则的重要性权重</td><td>选出离正理想解最近、离负理想解最远的方案</td></tr><tr><td><strong>数学依据</strong></td><td>特征值理论（判断矩阵的主特征向量）</td><td>欧几里得距离（几何空间距离）</td></tr><tr><td><strong>输出结果</strong></td><td>准则权重、方案得分</td><td>方案的贴近度 Ci，排序</td></tr><tr><td><strong>数据需求</strong></td><td>需要构建判断矩阵，规模太大效率低</td><td>只需标准化原始数据，不需要主观比较</td></tr><tr><td><strong>一致性检验</strong></td><td>需进行一致性比率 CR 检验</td><td>不需要一致性检验</td></tr><tr><td><strong>适用场景</strong></td><td>人工可比主观偏好强的情境（战略、政策等）</td><td>有客观指标、数据齐全，需数值化评估的情境（选产品）</td></tr><tr><td><strong>优点</strong></td><td>可量化主观偏好，结构清晰</td><td>简单直观、计算快速，适用性广</td></tr><tr><td><strong>缺点</strong></td><td>主观性强，维度多时构建判断矩阵困难</td><td>忽略指标之间可能的权重差异或相关性</td></tr></tbody></table><p>TOPSIS（原始决策矩阵+每个指标的权重）<br>返回参数的排序</p><table><thead><tr><th>方案</th><th>价格（万元）</th><th>性能（分）</th><th>重量（kg）</th><th>续航（小时）</th></tr></thead><tbody><tr><td>A</td><td>5</td><td>80</td><td>1.5</td><td>8</td></tr><tr><td>B</td><td>6</td><td>90</td><td>1.2</td><td>10</td></tr><tr><td>C</td><td>4.5</td><td>70</td><td>1.8</td><td>6</td></tr><tr><td>这反映了决策者对各个指标“重要程度”的主观或客观判断：</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>权重向量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.924ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8806.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(993.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2049.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2327.6,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3480.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3924.8,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mn" transform="translate(749,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5077.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5522,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6860.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7305.3,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8528.6,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.274ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4099.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="msub" transform="translate(1222.7,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2265.6,0)"><g data-mml-node="mo"><path data-c="200B" d=""></path></g></g><g data-mml-node="mo" transform="translate(2543.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3599.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p><p>比如：</p><ul><li>价格 0.3（越低越好）</li><li>性能 0.4（越高越好）</li><li>重量 0.1（越低越好）</li><li>续航 0.2（越高越好）</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gradient Descent ，Stochastic Gradient Descent 和Adaptive Moment Estimation&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="梯度下降" scheme="https://jayli19707.github.io/tags/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-15. 三数之和</title>
    <link href="https://jayli19707.github.io/2025/07/23/Leetcode-15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://jayli19707.github.io/2025/07/23/Leetcode-15.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2025-07-23T09:30:00.000Z</published>
    <updated>2025-07-23T09:50:53.439Z</updated>
    
    <content type="html"><![CDATA[<p>排序 + 双指针<br>本题的难点在于如何去除重复解</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250723173647918.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">threeSum</span>(<span class="params">self,nums</span>):</span><br><span class="line"></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        a=[]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[k]==nums[k-<span class="number">1</span>] <span class="keyword">and</span> k&gt;<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            i=k+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            j=<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> i&lt;j:</span><br><span class="line"></span><br><span class="line">                left=nums[i]</span><br><span class="line"></span><br><span class="line">                right=nums[j]</span><br><span class="line"></span><br><span class="line">                total=nums[k]+left+right</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> total==<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                    a.append([nums[k],nums[i],nums[j]])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> i&lt;j <span class="keyword">and</span> nums[i]==nums[i+<span class="number">1</span>]:</span><br><span class="line"></span><br><span class="line">                        i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> i&lt;j <span class="keyword">and</span> nums[j]==nums[j-<span class="number">1</span>]:</span><br><span class="line"></span><br><span class="line">                        j-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    j-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">elif</span> total&lt;<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                    i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                    j-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p>特判，对于数组长度 n，如果数组为 null 或者数组长度小于 3，返回 []。</p><p>对数组进行排序。<br>遍历排序后数组：<br>若 nums[i]&gt;0：因为已经排序好，所以后面不可能有三个数加和等于 0，直接返回结果。</p><p>对于重复元素：跳过，避免出现重复解<br>令左指针 L=i+1，右指针 R=n−1，当 L&lt;R 时，执行循环：<br>当 nums[i]+nums[L]+nums[R]== 0</p><p>执行循环，判断左界和右界是否和下一位置重复，去除重复解。<br>(这一步最细，因为同一个num[i]可以配不同的num[L],num[R],即使一开始有total=0，后续也可以有一对，所以这里还有去重和检查一遍)</p><p>并同时将 L,R 移到下一位置，寻找新的解<br>若和大于 0，说明 nums[R] 太大，R 左移<br>若和小于 0，说明 nums[L] 太小，L 右移</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;排序 + 双指针&lt;br&gt;本题的难点在于如何去除重复解&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-11.盛最多水的容器</title>
    <link href="https://jayli19707.github.io/2025/07/22/Leetcode-11.%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://jayli19707.github.io/2025/07/22/Leetcode-11.%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2025-07-22T13:30:00.000Z</published>
    <updated>2025-07-22T13:34:40.412Z</updated>
    
    <content type="html"><![CDATA[<p>本题采用双指针来解决<br>矩阵的面积与两个因素有关：<br>矩阵的长度：两条垂直线的距离<br>矩阵的宽度：两条垂直线其中较短一条的长度<br>因此，要矩阵面积最大化，两条垂直线的距离越远越好，两条垂直线的最短长度也要越长越好。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250722192326067.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxArea</span>(<span class="params">self, height: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        i=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        j=<span class="built_in">len</span>(height)-<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        maxvolume=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> i &lt; j:</span><br><span class="line"></span><br><span class="line">            left = height[i]</span><br><span class="line"></span><br><span class="line">            right= height[j]</span><br><span class="line"></span><br><span class="line">            L=j-i</span><br><span class="line"></span><br><span class="line">            currentvolume=<span class="built_in">min</span>(left,right)*L</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> maxvolume&lt;currentvolume:</span><br><span class="line"></span><br><span class="line">                maxvolume=currentvolume</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> left&lt;right:</span><br><span class="line"></span><br><span class="line">                i+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> maxvolume</span><br></pre></td></tr></table></figure><p>在每个状态下，无论长板或短板向中间收窄一格，都会导致水槽 底边宽度 −1​ 变短：</p><p>若向内 移动短板 ，水槽的短板 min(h[i],h[j]) 可能变大，因此下个水槽的面积 可能增大 。<br>若向内 移动长板 ，水槽的短板 min(h[i],h[j])​ 不变或变小，因此下个水槽的面积 一定变小 。</p><p>因此，初始化双指针分列水槽左右两端，循环每轮将短板向内移动一格，并更新面积最大值，直到两指针相遇时跳出；即可获得最大面积。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本题采用双指针来解决&lt;br&gt;矩阵的面积与两个因素有关：&lt;br&gt;矩阵的长度：两条垂直线的距离&lt;br&gt;矩阵的宽度：两条垂直线其中较短一条的长度&lt;br&gt;因此，要矩阵面积最大化，两条垂直线的距离越远越好，两条垂直线的最短长度也要越长越好。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>深度学习-超越线性，迈向深度</title>
    <link href="https://jayli19707.github.io/2025/07/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E8%B6%85%E8%B6%8A%E7%BA%BF%E6%80%A7%EF%BC%8C%E8%BF%88%E5%90%91%E6%B7%B1%E5%BA%A6/"/>
    <id>https://jayli19707.github.io/2025/07/22/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E8%B6%85%E8%B6%8A%E7%BA%BF%E6%80%A7%EF%BC%8C%E8%BF%88%E5%90%91%E6%B7%B1%E5%BA%A6/</id>
    <published>2025-07-21T17:30:00.000Z</published>
    <updated>2025-07-21T17:06:16.093Z</updated>
    
    <content type="html"><![CDATA[<p>我们了解了机器学习的基本三部曲。然而，简单的线性模型在面对复杂现实世界问题时，往往会显得力不从心。我们将打破线性模型的局限，正式迈向更强大、更灵活的“深度学习”世界。</p><span id="more"></span><h2 id="线性模型的“偏见”-Model-Bias"><a href="#线性模型的“偏见”-Model-Bias" class="headerlink" title="线性模型的“偏见” (Model Bias)"></a><strong>线性模型的“偏见” (Model Bias)</strong></h2><p>线性模型的根本问题：<strong>模型偏见（Model Bias）</strong>。<br><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250717153412613.png" alt="image.png"></p><ul><li><p><strong>核心概念</strong>：线性模型本身的结构过于简单，它假设输入和输出之间是纯粹的线性关系。这导致它无法捕捉现实世界中普遍存在的非线性规律。例如，YouTube的观看人数可能并不会一直线性增长，而是会呈现复杂的周期性波动。</p></li><li><p><strong>重要区分</strong>：这里的“Model Bias”指的是模型本身的限制，与我们之前提到的作为模型参数的“bias”（偏置项 <code>b</code>）是两个不同的概念。</p></li><li><p><strong>解决方案</strong>：要解决这个问题，我们必须构建一个更复杂、更有弹性的函数模型。</p></li></ul><h2 id="如何构建更复杂的函数？"><a href="#如何构建更复杂的函数？" class="headerlink" title="如何构建更复杂的函数？"></a><strong>如何构建更复杂的函数？</strong></h2><p>用一个非常直观的方式，为我们揭示了构建复杂函数的秘诀：<br><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250717154512334.png" alt="image.png"></p><ol><li><p><strong>分段线性曲线 (Piecewise Linear Curves)</strong>：任何复杂的连续曲线，都可以通过足够多的微小线段来逼近。</p></li><li><p><strong>“蓝色函数” (Hard Sigmoid)</strong>：这些微小的线段，可以由一种阶梯状的函数（视频中称为“蓝色函数”）来组合而成。</p></li><li><p><strong>Sigmoid 函数</strong>：在数学上，我们可以用一个更平滑、更易于处理的函数——<strong>Sigmoid 函数</strong>——来近似这个“蓝色函数”。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250721190158409.png" alt="image.png"></p><p>通过调整 Sigmoid 函数的参数（<code>w</code>, <code>b</code>, <code>c</code>），我们可以改变它的形状、位置和高度，从而组合出任意复杂的曲线，以此来逼近我们想要的目标函数。<br><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250721191635975.png" alt="image.png"></p><h2 id="linear-model到Curve："><a href="#linear-model到Curve：" class="headerlink" title="linear model到Curve："></a>linear model到Curve：</h2><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250721192153451.png" alt="image.png"></p><h3 id="多个features"><a href="#多个features" class="headerlink" title="多个features"></a>多个features</h3><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250721192655480.png" alt="image.png"></p><h3 id="线性代数表示"><a href="#线性代数表示" class="headerlink" title="线性代数表示"></a>线性代数表示</h3><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250721193816301.png" alt="image.png"></p><h2 id="从单个特征到多个特征：神经网络的雏形"><a href="#从单个特征到多个特征：神经网络的雏形" class="headerlink" title="从单个特征到多个特征：神经网络的雏形"></a><strong>从单个特征到多个特征：神经网络的雏形</strong></h2><p>当我们的输入不再是单一的“前一天观看人数”，而是包含前7天、前28天等多个特征（features）时，模型也需要相应地升级。</p><ul><li><p><strong>模型结构</strong>：</p><ol><li><p><strong>输入层 (Input Layer)</strong>：接收所有的输入特征 <code>x</code>。</p></li><li><p><strong>隐藏层 (Hidden Layer)</strong>：每个 Sigmoid 函数（现在被称为“神经元” Neuron）接收所有输入特征的加权和，并经过激活函数（Sigmoid）处理，得到一个激活值 <code>a</code>。</p></li><li><p><strong>输出层 (Output Layer)</strong>：将所有隐藏层神经元的输出 <code>a</code> 进行加权求和，最终得到预测结果 <code>y</code>。</p></li></ol></li><li><p><strong>数学表示</strong>：这个过程可以通过矩阵和向量运算高效地完成，所有的未知参数（权重 <code>w</code> 和偏置 <code>b</code>）可以被整合到一个大的参数向量 <code>θ</code> 中。</p></li></ul><h2 id="训练神经网络：同样的配方，更强的模型"><a href="#训练神经网络：同样的配方，更强的模型" class="headerlink" title="训练神经网络：同样的配方，更强的模型"></a><strong>训练神经网络：同样的配方，更强的模型</strong></h2><p>尽管模型变得复杂了，但训练它的核心思想依然是我们熟悉的老朋友：</p><ol><li><p><strong>损失函数 (Loss Function)</strong>：和之前一样，我们定义一个损失函数 <code>L(θ)</code> 来衡量模型预测值与真实值之间的差距。</p></li><li><p><strong>优化 (Optimization)</strong>：我们依然使用<strong>梯度下降 (Gradient Descent)</strong> 算法来寻找使损失最小化的最佳参数 <code>θ</code>。通过计算损失函数对每一个参数的偏导数（梯度），来指导参数的更新方向。</p></li></ol><h2 id="训练中的实用技巧"><a href="#训练中的实用技巧" class="headerlink" title="训练中的实用技巧"></a><strong>训练中的实用技巧</strong></h2><ul><li><p><strong>Batch 与 Epoch</strong>：在实际训练中，我们通常不会一次性将所有数据都用于计算梯度。而是将数据分成一小批一小批（<strong>Batch</strong>），每次只用一个 Batch 的数据来更新一次参数。当所有 Batch 的数据都被使用过一次后，就完成了一个<strong>Epoch</strong>。</p></li><li><p><strong>激活函数 (Activation Function)</strong>：除了 Sigmoid，<strong>ReLU (Rectified Linear Unit)</strong> 是另一个非常流行且有效的激活函数。它的形式更简单 <code>max(0, x)</code>，并且在实践中往往能取得更好的效果。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250722004434083.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250722004518575.png" alt="image.png"></p><h2 id="深度学习-Deep-Learning-的诞生"><a href="#深度学习-Deep-Learning-的诞生" class="headerlink" title="深度学习 (Deep Learning) 的诞生"></a><strong>深度学习 (Deep Learning) 的诞生</strong></h2><ul><li><strong>“深度”的含义</strong>：当我们将多个隐藏层堆叠在一起时，就构成了“深度”神经网络。这就是**深度学习（Deep Learning）**名字的由来。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250722005232139.png" alt="image.png"></p><p>层数：2<br>参数更多了：b和b‘，w和w’均是不同的参数<br>Neuron：sigmoid和ReLu</p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250722005745940.png" alt="image.png"></p><ul><li><strong>过拟合 (Overfitting)</strong>：实验结果显示，增加模型的深度（层数）和宽度（每层的神经元数量）可以降低在训练数据上的损失。但并非越深越好，过深的网络可能会导致<strong>过拟合</strong>——即模型在训练数据上表现完美，但在未见过的测试数据上表现很差。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250722010105949.png" alt="image.png"></p><ul><li><strong>核心问题</strong>：为什么我们需要“深”而不是仅仅“宽”？课程最后留下了这个引人深思的问题，也为后续更深入的探讨埋下了伏笔。</li></ul><h2 id="总结与复习要点"><a href="#总结与复习要点" class="headerlink" title="总结与复习要点"></a><strong>总结与复习要点</strong></h2><p>本节课我们完成了从线性模型到非线性模型，再到深度神经网络的认知飞跃。</p><ul><li><p><strong>核心痛点</strong>：线性模型的“模型偏见”使其无法处理复杂任务。</p></li><li><p><strong>核心思想</strong>：通过 Sigmoid 或 ReLU 等激活函数，我们可以构建出能够逼近任意复杂函数的神经网络。</p></li><li><p><strong>核心挑战</strong>：模型变得强大的同时，也带来了新的问题，如“过拟合”。如何在模型复杂度和泛化能力之间找到平衡，是深度学习中的一个永恒主题。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们了解了机器学习的基本三部曲。然而，简单的线性模型在面对复杂现实世界问题时，往往会显得力不从心。我们将打破线性模型的局限，正式迈向更强大、更灵活的“深度学习”世界。&lt;/p&gt;</summary>
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-.283移动零</title>
    <link href="https://jayli19707.github.io/2025/07/19/Leetcode-.283%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
    <id>https://jayli19707.github.io/2025/07/19/Leetcode-.283%E7%A7%BB%E5%8A%A8%E9%9B%B6/</id>
    <published>2025-07-18T19:30:00.000Z</published>
    <updated>2025-07-18T19:26:38.762Z</updated>
    
    <content type="html"><![CDATA[<p>本题采用双指针来解决</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250719031815486.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">moveZeroes</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pos=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> nums[i]!=<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">                nums[pos],nums[i]=nums[i],nums[pos]</span><br><span class="line"></span><br><span class="line">                pos+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>本题运用双指针来写：一个指针用来遍历数组，一个用来记录“有效位”索引，如果遍历的时候发现元素不是0，立马就可以跟有效位置索引的数组进行交换，</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本题采用双指针来解决&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>期权：末日期权</title>
    <link href="https://jayli19707.github.io/2025/07/19/%E6%9C%9F%E6%9D%83%EF%BC%9A%E6%9C%AB%E6%97%A5%E6%9C%9F%E6%9D%83/"/>
    <id>https://jayli19707.github.io/2025/07/19/%E6%9C%9F%E6%9D%83%EF%BC%9A%E6%9C%AB%E6%97%A5%E6%9C%9F%E6%9D%83/</id>
    <published>2025-07-18T18:30:00.000Z</published>
    <updated>2025-07-18T18:37:17.901Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="期权到期日"><a href="#期权到期日" class="headerlink" title="期权到期日"></a>期权到期日</h1><h2 id="标准期权到期日"><a href="#标准期权到期日" class="headerlink" title="标准期权到期日"></a>标准期权到期日</h2><ul><li><p><strong>月度期权（Standard Monthly Options）</strong>：通常在<strong>每月的第三个星期五</strong>到期。</p></li><li><p><strong>周度期权（Weekly Options）</strong>：到期日通常是<strong>每周五</strong>。</p></li><li><p><strong>季度期权（Quarterly Options）</strong>：在每个季度末的特定星期五到期。</p></li></ul><h2 id="但也有非周五到期的期权："><a href="#但也有非周五到期的期权：" class="headerlink" title="但也有非周五到期的期权："></a>但也有<strong>非周五</strong>到期的期权：</h2><ol><li><p><strong>日内到期（0DTE）期权</strong>：例如 SPX 指数现在几乎<strong>每天都有期权到期</strong>（包括周一到周五）。</p></li><li><p><strong>部分ETF或指数（如SPY、QQQ）</strong>：提供<strong>周一、周三、周五</strong>到期的期权。</p></li><li><p><strong>特殊事件驱动期权</strong>（如并购、分红后期权）：可能设定非常规到期日，但较少见</p></li></ol><h1 id="什么是末日期权"><a href="#什么是末日期权" class="headerlink" title="什么是末日期权"></a>什么是末日期权</h1><p>末日期权（Zero Days To Expiration，简称0DTE）是指在交易日当天购买的期权合约，当天收盘后即到期失效。它们属于超短期期权，与传统期权（如每周、每月到期）相比，时间价值（theta）的衰减速度极快，也非常便宜。这种特性使得末日期权比较适合希望从当日市场波动中获利的短线交易者。</p><p>末日期权的兴起始于2022年，芝加哥期权交易所（CBOE）宣布推出每周期权，并把到期日扩展到每个工作日（周一至周五）。最初，SPX是首批提供末日期权的资产之一，随后逐渐扩展到其他资产，比如Mini-SPX（XSP）、SPDR S&amp;P 500 ETF（SPY）和Invesco Nasdaq 100 ETF（QQQ）。个股也存在末日期权，只不过期权到期日都是每周周五，因此个股末日期权仅存在于每周五。</p><p>这个工具当日到期波动率高，同时具有胜率低但赔率高的特征，因此许多人对它的第一印象是类似彩票一样的工具。末日期权的杠杆率比到期时间为1个月的期权杠杆率高好几个数量级，可以达到400以上。</p><p>长期投资末日期权的平均回报是亏损，年化收益率在-32,000%，但在某些时候会产生高达79,000%的极高回报。这些回报比一个月期权的波动更大。</p><h1 id="末日期权这么能涨的秘密"><a href="#末日期权这么能涨的秘密" class="headerlink" title="末日期权这么能涨的秘密"></a>末日期权这么能涨的秘密</h1><p>末日期权最大的吸引力就是便宜加高波动，适合以小博大，那为啥末日期权波动那么大呢，举例英伟达的末日期权</p><p>英伟达现在的股价是117，这张是行权价118的价外期权，因为是最后一天到期，所以内在价值为零。</p><p>期权价格等于内在价值+时间价值，这个务必深深刻在脑子里啊。先解释内在价值啊，看涨期权的内在价值等于股价减行权价，看跌期权反过来等于行权价减股价。</p><p>比如行权价是118的看涨期权。你把它换成股票，然后按市价119卖掉，你就赚了1块。这1块就叫期权的内在价值。简单来说，只要行权的权利已被激活，这张期权就开始产生内在价值了。</p><p>然后是时间价值，时间赋予了期权价格变化更多的可能性，所以它叫时间价值。到期时间越久，时间价值就越高，因为时间越长股价可能会涨得更高，期权的内在价值也会变高。</p><p>注意时间价值会随着到期日临近逐步跌到零。股价没超过行权价，行权的权利没被激活，所以内在价值为零。因此上面的那张末日期权，我们能看到内在价值为零，时间价值只剩1.44，这张末日期权的价格就是1.44非常便宜。</p><p>我们假设英伟达的股价下一秒就从117涨到122。因为行权价是118，这张期权就从价外变成了价内，并开始产生内在价值了。</p><p>看涨期权的内在价值等于股价减行权价，股价122，行权价118，两者相减内在价值上涨了3.3%。借助期权价格计算器。股价从117到122只涨了5块，那你的末日期权盈利就翻倍了。</p><p>总的来说期权翻倍的秘密就是在赌内在价值的从无到有。这就是为什么选择价外或者平价附近的人最多，因为只要股价稍微动一动，就很容易达到行权价，从而产生内在价值，那期权价格的波动就会非常大。</p><p>末日期权的波动就更大，因为时间价值接近归零，成本很便宜。比如一家末日看涨期权，本身只剩三毛钱的时间价值了，假设股价突然飙升到了价内，产生了4%内在价值，期权价格就翻倍了。所以对于末日期权来说，翻个几倍、十倍都是很正常的。</p><h1 id="如何玩转末日期权"><a href="#如何玩转末日期权" class="headerlink" title="如何玩转末日期权"></a>如何玩转末日期权</h1><p>期权交易的细节问题特别重要，关乎交易成败。首先，末日轮不是绝对指的临近到期的最后一天，末日轮可以从期权到期日开始倒数计算的5个交易日开始都可以算末日轮，或者说临近到期的几个交易日都可以认为是末日轮。</p><p>那作为买方怎么做才能获得最大的收益呢？作为买方要明确的是，时间是买方的敌人，末日轮期权的买方，最大的风险是时间价值的衰减，临近到期日的时候，如果这个期权变成了虚值期权，那么将会一文不值，如何才能对抗这个时间价值的衰减呢？</p><p>影响期权价格的因素有三个，时间，方向，波动率；买方要对抗这个时间价值的衰减，只能从另外2个维度去考虑，就是从方向和波动率上去考虑：</p><ul><li><p><strong>时间（Theta）</strong>：临近到期快速衰减，对买方不利；</p></li><li><p><strong>方向（Delta）</strong>：看对方向才有利润，比如买入看涨期权，标的上涨；</p></li><li><p><strong>波动率（Vega）</strong>：如果波动率上升，期权价值上涨。</p></li></ul><p>方向维度上：作为买方，标的不要一根阳线一根阴线这种不连续的走势，最好是连续的阳线。</p><p>波动率维度上：最好是大阳线，如果是连续阳线，最虚值的买购期权都变成了实值期权，由于临近到期，这个合约就都是内在价值，时间价值已经由于大幅上涨导致转化为内在价值了。</p><p>如果用希腊字母刻画，就是就是方向维度上的正的德尔塔，+Delta 和 波动率维度上的正+vega。</p><p>因此，如果标的的价格在末日轮的几天，收盘价或者开盘价等于行权价的时候，还有一种情况，就是在盘中，在某一个时间，在一个整数关口小范围盘整，这个整数关口就是平值期权，这个时候作为买方的机会就来了。</p><p>举例：<br>如果在到期前，标的价格围绕某个“整数关口”盘整（比如行权价是100元，股价在99~101波动），此时这个“平值期权”既便宜又容易快速变实值。</p><ul><li><p>一旦某根大阳线把价格推过这个关口，买方的期权立刻有价值；</p></li><li><p>所以<strong>盘整+临近到期+接近平值</strong>是买方重点关注的“临爆点”。</p></li></ul><p>细节就在于：如果标的正好在整数关口进行上涨或下跌而几乎没有的回调，那么就提供给了期权买方（买购或买沽）了绝佳的条件，如果正好是开盘，那就更好，如果方向判断正确，收益就会非常高。</p><h1 id="末日期权除了当“彩票”还有什么用途？"><a href="#末日期权除了当“彩票”还有什么用途？" class="headerlink" title="末日期权除了当“彩票”还有什么用途？"></a>末日期权除了当“彩票”还有什么用途？</h1><p>关于末日期权的使用策略，除了当彩票押方向，还可以使用行权价格锁定指数的波动范围，从而赚取一些时间价值的策略，比如：</p><h2 id="1、-信用价差（Credit-Spreads）："><a href="#1、-信用价差（Credit-Spreads）：" class="headerlink" title="1、 信用价差（Credit Spreads）："></a>1、 信用价差（Credit Spreads）：</h2><p>赚的主要是时间价值的钱。主要包括两种策略：</p><ul><li><p><strong>熊市看涨价差</strong>：卖出一个执行执行价格为a的看涨期权，同时买入一个执行价格为b的看涨期权（其中a&lt;b)。此时，当市场价格下跌到a以下有有限收益，上涨到b以上有有限亏损。</p><p>  我们以一个具体例子说明“熊市看涨价差”（bear call spread）策略的运作原理：</p><p>   策略设置：</p><ul><li><p>卖出一个行权价为 <strong>a = 100</strong> 的看涨期权（Call），获得权利金 <strong>$8</strong>；</p></li><li><p>买入一个行权价为 <strong>b = 110</strong> 的看涨期权，支付权利金 <strong>$3</strong>；</p></li><li><p>因此，<strong>净收入为 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></svg></mjx-container>3 = $5</strong>，这就是最大利润。</p></li></ul><p>  市场情景分析：</p><ol><li><p><strong>若标的价格 ≤ $100（a 以下）</strong>：</p><ul><li><p>两个期权均为虚值，均不会被行权；</p></li><li><p>所以你的利润就是净收入 <strong>$5</strong>；</p></li><li><p>这是策略的<strong>最大盈利</strong>，在熊市或震荡下跌时最有利。</p></li></ul></li><li><p><strong>若标的价格在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.959ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1750 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mtext" transform="translate(1500,0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container>110（a 到 b 之间）</strong>：</p><ul><li><p>卖出的 $100 Call 是实值期权，你需亏损；</p></li><li><p>买入的 $110 Call 仍是虚值，对冲不了；</p></li><li><p>此时，<strong>亏损 = 标的价格 - 100 - $5</strong>（因为有 $5 收入可抵扣）；</p></li><li><p>随着标的上涨，亏损逐渐扩大。</p></li></ul></li><li><p><strong>若标的价格 ≥ $110（b 以上）</strong>：</p><ul><li><p>两个期权都变成实值；</p></li><li><p>你的净亏损是：<strong>卖出的 Call 损失 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="20.102ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 8885 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">买</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">入</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(5000,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(5760,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(6289,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6587,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6885,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">获</text></g><g data-mml-node="mi" transform="translate(7885,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">利</text></g></g></g></svg></mjx-container>0（对冲），再减去原先收取的 $5</strong>；</p></li><li><p>所以最大亏损是：<strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.023ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1778 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></svg></mjx-container>5 = $5</strong>；</p></li><li><p>这是策略的<strong>最大亏损</strong>，发生在市场大涨时。</p></li></ul></li></ol></li><li><p><strong>牛市看跌价差</strong>：或者卖出一个执行价格为b的看跌期权，同时买入一个执行价为a的看跌期权（其中a&lt;b)。此时，当市场价格下跌到a以下有有限亏损，上涨到b以上有有限收益。</p></li></ul><p>策略结构（a &lt; b）：</p><ul><li><p><strong>买入</strong>行权价为 <strong>a = 90</strong> 的看跌期权（Put），<strong>付出 $2</strong>；</p></li><li><p><strong>卖出</strong>行权价为 <strong>b = 100</strong> 的看跌期权，<strong>收取 $6</strong>；</p></li><li><p>所以你<strong>净收权利金 = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(500,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></svg></mjx-container>2 = $4</strong>，这就是你的<strong>最大收益</strong>。</p></li></ul><p>情景分析：</p><ol><li><p><strong>股价 ≥ $100（b 以上）</strong>：</p><ul><li><p>两个 Put 都为虚值，均不执行；</p></li><li><p>你保留全部净收入 <strong>$4</strong>，为<strong>最大盈利</strong>；</p></li><li><p>这是你预期的“牛市”情景。</p></li></ul></li><li><p><strong>股价在 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.828ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1250 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(1000,0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container>100 之间</strong>：</p><ul><li><p>卖出的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="23.041ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 10184 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(2251,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2823,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(4184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">实</text></g><g data-mml-node="mi" transform="translate(5184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">值</text></g><g data-mml-node="mi" transform="translate(6184,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">：</text></g><g data-mml-node="mi" transform="translate(7184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">你</text></g><g data-mml-node="mi" transform="translate(8184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(9184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g></g></g></svg></mjx-container>100 买入标的，亏损；</p></li><li><p>买入的 $90 Put 部分对冲；</p></li><li><p>净亏损 = <strong><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="14.707ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 6500.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(1722.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2722.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">市</text></g><g data-mml-node="mi" transform="translate(3722.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">场</text></g><g data-mml-node="mi" transform="translate(4722.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mo" transform="translate(5722.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></svg></mjx-container>4（权利金收入）</strong>；</p></li><li><p>盈亏介于最大盈利和最大亏损之间。</p></li></ul></li><li><p><strong>股价 ≤ $90（a 以下）</strong>：</p><ul><li><p>两个 Put 都是实值，但你只承担价差；</p></li><li><p>卖出的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="11.729ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 5184 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(2251,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2823,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">要</text></g><g data-mml-node="mi" transform="translate(4184,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g></g></g></svg></mjx-container>100 买，市场价却只有 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="6.787ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 3000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">亏</text></g></g></g></svg></mjx-container>10；</p></li><li><p>买入的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="17.385ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 7684 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(1751,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2323,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(2684,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">给</text></g><g data-mml-node="mi" transform="translate(3684,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">你</text></g><g data-mml-node="mi" transform="translate(4684,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">权</text></g><g data-mml-node="mi" transform="translate(5684,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">利</text></g><g data-mml-node="mi" transform="translate(6684,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g></g></g></svg></mjx-container>90 卖出，限制了亏损；</p></li><li><p>所以 <strong>总亏损 = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="4.023ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 1778 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1000,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g></g></g></svg></mjx-container>4 = $6</strong>；</p></li><li><p>这是策略的<strong>最大亏损</strong>。</p></li></ul></li></ol><h2 id="2、铁鹰式组合（Iron-condor）："><a href="#2、铁鹰式组合（Iron-condor）：" class="headerlink" title="2、铁鹰式组合（Iron condor）："></a>2、铁鹰式组合（Iron condor）：</h2><p>同时组合上述两种信用价差策略，旨在从小幅波动或市场平静中获利。</p><p>从图形来看，当你把上述的两个价差策略组合在一起，就可以得到一个铁蝶式策略。这个策略的好处是，当市场价格当天在区间内无论如何波动，你能够获得一个确定的收益。</p><p>步骤1：卖出一个行权价格为b的看跌期权（short put），同时买入一个行权价格为a的看跌期权（long put）。</p><p>步骤2：卖出一个行权价格为c的看涨期权（short call），同时买入一个行权价格为d的看涨期权（long call）。同时需要满足a&lt;b&lt;c&lt;d。</p><p>这些策略看起来复杂，但因为赚的是时间价值的钱，因此相较于押单边的胜率更高。而且熟悉之后操作非常方便，甚至有一些券商为了投资者交易的便利，提供个性化搭配的上述策略。</p><p>你组合了两个<strong>信用价差策略</strong>（即牛市看跌价差 + 熊市看涨价差）：</p><hr><p>步骤1：牛市看跌价差（Bull Put Spread）</p><ul><li><p><strong>卖出行权价为 b 的 Put</strong></p></li><li><p><strong>买入行权价为 a 的 Put（a &lt; b）</strong></p></li><li><p>👉 希望市场不要跌破 b，收益来源于权利金差</p></li></ul><hr><p>步骤2：熊市看涨价差（Bear Call Spread）</p><ul><li><p><strong>卖出行权价为 c 的 Call</strong></p></li><li><p><strong>买入行权价为 d 的 Call（c &lt; d）</strong></p></li><li><p>👉 希望市场不要涨破 c，同样收益来自权利金差</p></li></ul><hr><p>满足：a &lt; b = c &lt; d</p><ul><li><p>即 <strong>b 和 c 是相同的行权价</strong>，卖出 Put 和 Call 构成“中间收权利金最大”的“铁蝶身体”；</p></li><li><p>a 和 d 是两翼的买入期权，用来限制风险。</p></li></ul><hr><p> 盈亏分析：</p><ul><li><p><strong>最大收益</strong>：股价在到期日正好落在中间行权价（b = c）；</p><ul><li>所有期权都成为虚值，所有权利金归你；</li></ul></li><li><p><strong>最大亏损</strong>：股价大涨或大跌，突破 a 或 d；</p><ul><li>超出两翼的期权差值，亏损被买入期权所限制；</li></ul></li><li><p><strong>盈亏临界点</strong>：在区间 [a, d] 内部；</p><ul><li>如果股价落在区间两侧的虚值范围之外（即变成实值），就会侵蚀掉部分利润。</li></ul></li></ul><p>风险提示一下，市场上超过95%的末日期权交易都是以有限风险策略进行的（即要么是直接持有看涨期权，要么是通过表中策略持有看跌期权）。</p><p>末日期权交易需遵循“四不原则”：</p><p>不盲目投机虚值期权；不因情绪逆势加仓；</p><p>不因流动性缺失死扛仓位，不裸卖空期权</p><p>最后期权末日轮就像一场限时赌局——有人靠它一夜暴富，也有人因此怀疑人生。但无论如何，它教会我们两件事：</p><ol><li><p>市场永远比剧本更精彩（你根本预测不到）；</p></li><li><p>理性比肾上腺素更重要（别让“梭哈”的冲动战胜你的风控意识）。</p></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;期权到期日&quot;&gt;&lt;a href=&quot;#期权到期日&quot; class=&quot;headerlink&quot; title=&quot;期权到期日&quot;&gt;&lt;/a&gt;期权到期日&lt;/h1&gt;&lt;h2 id=&quot;标准期权到期日&quot;&gt;&lt;a href=&quot;#标准期权到期日&quot;</summary>
        
      
    
    
    
    <category term="金融" scheme="https://jayli19707.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="期权" scheme="https://jayli19707.github.io/tags/%E6%9C%9F%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>期权：如何买卖期权</title>
    <link href="https://jayli19707.github.io/2025/07/18/%E6%9C%9F%E6%9D%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%B9%B0%E5%8D%96%E6%9C%9F%E6%9D%83/"/>
    <id>https://jayli19707.github.io/2025/07/18/%E6%9C%9F%E6%9D%83%EF%BC%9A%E5%A6%82%E4%BD%95%E4%B9%B0%E5%8D%96%E6%9C%9F%E6%9D%83/</id>
    <published>2025-07-17T18:30:00.000Z</published>
    <updated>2025-07-17T18:45:13.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="期权链：你的“期权菜单”"><a href="#期权链：你的“期权菜单”" class="headerlink" title="期权链：你的“期权菜单”"></a>期权链：你的“期权菜单”</h1><p>期权链（Option Chain）是期权交易的核心工具，列出了某只股票的所有期权合约，类似于餐厅的“菜单”。它显示了行权价、到期日和期权费等信息。以下是如何阅读期权链：</p><ol><li>期权链的组成</li></ol><p>标的股票：期权对应的股票，例如NVDA（英伟达）。</p><p>Call和Put：分别列在期权链两侧，Call看涨，Put看跌。</p><p>行权价（Strike Price）：期权约定的买卖价格，例如200美元。</p><p>到期日（Expiration Date）：期权有效的截止日期，例如2025年5月25日。</p><p>期权费（Premium）：购买期权的价格，例如3美元/股。</p><p>买卖价差（Bid-Ask Spread）：买价（Bid）和卖价（Ask）的差额，反映流动性。</p><p>成交量（Volume）和未平仓合约（Open Interest）：显示期权活跃度。</p><ol start="2"><li>如何阅读期权链</li></ol><p>实值（ITM）、虚值（OTM）、平值（ATM）：</p><p>Call期权：行权价 &lt; 当前股价 = 实值；行权价 &gt; 股价 = 虚值；约等于股价 = 平值。</p><p>Put期权：行权价 &gt; 股价 = 实值；行权价 &lt; 股价 = 虚值。</p><p>示例：NVDA股价200美元，期权链可能显示：190美元Call = 实值（已赚内在价值）。210美元Call = 虚值（需股价上涨才赚钱）。200美元Call = 平值（最活跃）。</p><p>标注说明：买价/卖价：实际交易时，期权费在买价和卖价之间。成交量高：说明期权活跃，买卖容易。虚值期权：价格便宜，但需股价大涨/大跌才盈利。</p><ol start="3"><li>如何选择期权</li></ol><p>行权价：看涨选略高于股价的Call（如210美元），看跌选略低于股价的Put（如190美元）。</p><p>到期日：短期（1-3个月）波动大，适合投机；长期（6-12个月）更稳定，适合保守玩家。</p><p>期权费：预算有限选低价虚值期权，但风险高。</p><h1 id="如何买期权？详细步骤"><a href="#如何买期权？详细步骤" class="headerlink" title="如何买期权？详细步骤"></a>如何买期权？详细步骤</h1><p>买期权是小白最常见的入门方式，风险限于期权费。以Webull为例的购买流程：</p><ol><li><p>登录平台：打开Webull App，登录账户，进入“交易”页面。</p></li><li><p>选择标的股票：在搜索栏输入“NVDA”，进入股票详情页。点击“期权”标签，查看期权链。</p></li><li><p>选择期权类型和合约：选择“Call”或“Put”（看涨/看跌）。挑选行权价（例如200美元）和到期日（例如2025年5月25日）。查看期权费（例如3美元/股，1份合约 = 3 × 100 = 300美元）。</p></li><li><p>下单购买</p></li></ol><p>点击选中的期权合约，进入交易页面。输入合约数量（1份 = 100股）。选择“限价单”（Limit Order）并输入价格（例如3.10美元）。确认订单，提交购买。</p><ol start="5"><li>监控和卖出</li></ol><p>买入后，期权价值随股价波动。可随时卖出期权（无需等到到期），在“持仓”页面操作。到期时：若期权有价值（实值），可行权；否则作废。</p><p>案例：买入NVDA Call期权</p><p>操作：</p><p>在Webull期权链选择：NVDA Call，行权价200美元，到期日2025年5月25日，期权费3美元/股。买入1份合约，总成本3 × 100 = 300美元。</p><p>结果：股价涨到220美元：期权价值约20美元/股（220 - 200），卖出获利20 × 100 - 300 = 1700美元。</p><p>股价跌到190美元：期权作废，亏损300美元。</p><p>启示：300美元控制100股的收益权，杠杆放大回报，但需准确预测。</p><h1 id="买卖期权的区别：买入-vs-卖出"><a href="#买卖期权的区别：买入-vs-卖出" class="headerlink" title="买卖期权的区别：买入 vs. 卖出"></a>买卖期权的区别：买入 vs. 卖出</h1><p>期权交易不仅限于买入，还可以卖出。卖出期权分为备兑卖出和裸卖，风险和收益截然不同。</p><h2 id="1-买入期权（Buy-Call-Put）"><a href="#1-买入期权（Buy-Call-Put）" class="headerlink" title="1. 买入期权（Buy Call/Put）"></a>1. 买入期权（Buy Call/Put）</h2><p>特点：支付期权费，获得买入（Call）或卖出（Put）股票的权利。</p><p>风险：最大亏损 = 期权费（例如300美元）。</p><p>收益：Call理论上无限，Put有限（股价跌到0）。</p><p>适合：小白和看涨/看跌的投机者。</p><p>例子：上文的NVDA Call，300美元博1700美元收益。</p><h2 id="2-卖出期权"><a href="#2-卖出期权" class="headerlink" title="2. 卖出期权"></a>2. 卖出期权</h2><h3 id="备兑卖出（Covered-Selling）："><a href="#备兑卖出（Covered-Selling）：" class="headerlink" title="备兑卖出（Covered Selling）："></a>备兑卖出（Covered Selling）：</h3><p>卖Call：持有100股标的股票，卖1份Call期权，收取期权费。若被行权，以行权价卖出股票。</p><p>卖Put：有足够现金，卖1份Put期权，收取期权费。若被行权，以行权价买入股票。</p><p>风险：有限（Call可能错过更大上涨，Put可能买高价股票）。</p><p>收益：期权费（通常几十到几百美元）。</p><p>例子：持有100股NVDA（200美元），卖200美元Call，收3美元/股（300美元）。若股价涨到220美元，股票以200美元卖出，赚300美元期权费+0资本利得。</p><h3 id="裸卖（Naked-Selling）：不持有股票或现金，直接卖Call-Put。"><a href="#裸卖（Naked-Selling）：不持有股票或现金，直接卖Call-Put。" class="headerlink" title="裸卖（Naked Selling）：不持有股票或现金，直接卖Call/Put。"></a>裸卖（Naked Selling）：不持有股票或现金，直接卖Call/Put。</h3><p>风险：极高！卖Call若股价暴涨，需高价买入补仓；卖Put若股价暴跌，需低价卖出。</p><p>收益：期权费。</p><p>例子：裸卖NVDA 200美元Call，收300美元。若股价涨到300美元，需以300美元买入，亏损9900美元。</p><p>警告：裸卖需高保证金，小白慎用！</p><h1 id="期权交易的注意事项"><a href="#期权交易的注意事项" class="headerlink" title="期权交易的注意事项"></a>期权交易的注意事项</h1><p>流动性：选择成交量高、买卖价差小的期权，交易更顺畅。</p><p>时间价值：期权费包含时间价值，离到期越近，价值衰减越快。</p><p>平台费用：Robinhood/Webull零手续费，但注意隐性成本（如价差）。</p><p>情绪控制：期权波动大，避免追高杀低。</p><h1 id="读懂ibkr期权界面（还有一天到期的期权）"><a href="#读懂ibkr期权界面（还有一天到期的期权）" class="headerlink" title="读懂ibkr期权界面（还有一天到期的期权）"></a>读懂ibkr期权界面（还有一天到期的期权）</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250718022749811.png" alt="image.png"></p><p>如果你要<strong>买入Call期权</strong>（即做多，看涨），你要<strong>支付的是 Ask（卖一价）</strong>，也就是对方愿意卖出的价格。</p><p> 以图中 <code>行权价 = $165</code> 的 Call 为例：</p><ul><li><p><strong>买价（Bid）= 8.30</strong></p></li><li><p><strong>卖价（Ask）= 8.40</strong></p></li><li><p><strong>最新成交价 = 8.35</strong></p></li></ul><p>你作为买方，必须接受卖方要价：</p><p>成交价=Ask=$8.40</p><p>因为每张期权合约对应 <strong>100 股</strong>，所以你实际需要支付的总费用是：</p><p>期权费总额=<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="11.565ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 5111.8 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(778,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1278,0)"></path></g><g data-mml-node="mi" transform="translate(1778,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mn" transform="translate(2556,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(4333.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g></g></g></svg></mjx-container>840</p><p>这就是你买入这张 Call（行权价 $165）期权的成本（不含佣金）。</p><h1 id="背景思考"><a href="#背景思考" class="headerlink" title="背景思考"></a>背景思考</h1><p>假如我是卖call的一方，此时股价</p><h2 id="两种结局（Call卖方角度）："><a href="#两种结局（Call卖方角度）：" class="headerlink" title="两种结局（Call卖方角度）："></a>两种结局（Call卖方角度）：</h2><h3 id="你有现货（叫做“备兑Call”）："><a href="#你有现货（叫做“备兑Call”）：" class="headerlink" title="你有现货（叫做“备兑Call”）："></a>你有现货（叫做“备兑Call”）：</h3><ul><li><p>买方行权后，你就用自己账户里的股票交付给他；</p></li><li><p>你虽然少赚了一点（因为你以行权价卖出，低于市场价），但这是你一开始就接受的风险；</p></li><li><p>收了期权费，也安全交付股票，属于策略性盈利。</p></li></ul><h3 id="你没现货（裸卖Call）："><a href="#你没现货（裸卖Call）：" class="headerlink" title="你没现货（裸卖Call）："></a>你没现货（裸卖Call）：</h3><ul><li><p>买方行权，你又没股票，券商就会在市场上 <strong>以市价帮你买入股票，再以行权价卖出</strong>；</p></li><li><p>你相当于用 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="27.275ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 12055.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(2500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">市</text></g><g data-mml-node="mi" transform="translate(3500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">场</text></g><g data-mml-node="mi" transform="translate(4500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">价</text></g><g data-mml-node="mi" transform="translate(5500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">买</text></g><g data-mml-node="mi" transform="translate(6500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">入</text></g><g data-mml-node="mi" transform="translate(7500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">股</text></g><g data-mml-node="mi" transform="translate(8500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">票</text></g><g data-mml-node="mo" transform="translate(9777.8,0)"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(11055.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g></g></g></svg></mjx-container>165 行权价卖出 → 每股亏 $8；</p></li><li><p>再减去你当初收的期权费，比如 $8.40，那你还剩下 0.40 的“利润”；</p><ul><li>但如果股价涨得更猛，比如涨到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="26.018ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 11500 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(2500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">那</text></g><g data-mml-node="mi" transform="translate(3500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">你</text></g><g data-mml-node="mi" transform="translate(4500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">就</text></g><g data-mml-node="mi" transform="translate(5500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">惨</text></g><g data-mml-node="mi" transform="translate(6500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">了</text></g><g data-mml-node="mi" transform="translate(7500,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(8500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">每</text></g><g data-mml-node="mi" transform="translate(9500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">股</text></g><g data-mml-node="mi" transform="translate(10500,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">亏</text></g></g></g></svg></mjx-container>25！</li></ul></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;期权链：你的“期权菜单”&quot;&gt;&lt;a href=&quot;#期权链：你的“期权菜单”&quot; class=&quot;headerlink&quot; title=&quot;期权链：你的“期权菜单”&quot;&gt;&lt;/a&gt;期权链：你的“期权菜单”&lt;/h1&gt;&lt;p&gt;期权链（Option</summary>
        
      
    
    
    
    <category term="金融" scheme="https://jayli19707.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="期权" scheme="https://jayli19707.github.io/tags/%E6%9C%9F%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>期权：一张未来买卖的优惠券</title>
    <link href="https://jayli19707.github.io/2025/07/18/%E6%9C%9F%E6%9D%83%EF%BC%9A%E4%B8%80%E5%BC%A0%E6%9C%AA%E6%9D%A5%E4%B9%B0%E5%8D%96%E7%9A%84%E4%BC%98%E6%83%A0%E5%88%B8/"/>
    <id>https://jayli19707.github.io/2025/07/18/%E6%9C%9F%E6%9D%83%EF%BC%9A%E4%B8%80%E5%BC%A0%E6%9C%AA%E6%9D%A5%E4%B9%B0%E5%8D%96%E7%9A%84%E4%BC%98%E6%83%A0%E5%88%B8/</id>
    <published>2025-07-17T17:30:00.000Z</published>
    <updated>2025-07-17T17:18:22.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、期权是什么？"><a href="#一、期权是什么？" class="headerlink" title="一、期权是什么？"></a>一、期权是什么？</h1><p>期权（Options）是一种金融合约，给你在未来某个时间以特定价格买入或卖出某只股票的<strong>权利</strong>，但<strong>没有义务</strong>。换句话说，期权就像一张“优惠券”，让你可以选择是否以约定的价格执行交易。</p><p>类比：想象你在商场看到一款iPhone，当前价格是1000美元。你觉得它可能会涨价，于是花10美元买了一张“未来以1000美元买iPhone的优惠券”，有效期1个月。</p><p>如果1个月后iPhone涨到1200美元，你可以用1000美元买到它，再以1200美元卖出，赚200美元利润（扣除10美元券费，净赚190美元）。</p><p>如果iPhone跌到800美元，你可以选择不用这张券，损失只是10美元的券费。</p><p>期权就是类似的逻辑，只不过它针对的是股票，比如苹果（AAPL）、特斯拉（TSLA）或指数ETF（如SPY）。它让你用小钱（券费）博取大收益，同时风险有限。</p><h1 id="二、期权的两大类型：Call和Put"><a href="#二、期权的两大类型：Call和Put" class="headerlink" title="二、期权的两大类型：Call和Put"></a>二、期权的两大类型：Call和Put</h1><p><strong>期权（Option）是一种金融合约，它给予买方一种“权利”，但不是义务；而卖方则承担对应的“义务”。</strong></p><p>期权分为两种：Call期权（看涨期权）和Put期权（看跌期权）。它们分别对应你对股价的两种预测：上涨或下跌。</p><p><strong>以下均是买方视角</strong></p><h2 id="1、-Call期权：押注股价上涨"><a href="#1、-Call期权：押注股价上涨" class="headerlink" title="1、 Call期权：押注股价上涨"></a>1、 Call期权：押注股价上涨</h2><p>定义：Call期权给你以特定价格（行权价）买入股票的权利。</p><p>适用场景：你认为某只股票会涨。</p><p>案例：</p><p>假设特斯拉（TSLA）当前股价是300美元。你买了一份行权价310美元、1个月后到期的Call期权，期权费（Premium）是5美元/股。因为期权合约通常以100股为单位，所以总费用是5 × 100 = 500美元。</p><p>到期时：</p><p>股价涨到350美元：你可以用310美元买入TSLA，再以350美元卖出，每股赚40美元，扣除5美元期权费，净赚35美元/股（总利润3500美元）。</p><p>股价跌到280美元：期权作废，你不用行权，损失期权费500美元。</p><h2 id="2、Put期权：押注股价下跌"><a href="#2、Put期权：押注股价下跌" class="headerlink" title="2、Put期权：押注股价下跌"></a>2、Put期权：押注股价下跌</h2><p>定义：Put期权给你以特定价格（行权价）卖出股票的权利。</p><p>适用场景：你认为某只股票会跌。</p><p>案例：还是TSLA，股价300美元。你买了一份行权价290美元、1个月后到期的Put期权，期权费是4美元/股，总费用4 × 100 = 400美元。</p><p>到期时：股价跌到260美元：你可以用290美元卖出TSLA（相当于以290美元卖给别人，别人再以260美元补仓），每股赚30美元，扣除4美元期权费，净赚26美元/股（总利润2600美元）。</p><p>股价涨到320美元：期权作废，你损失期权费400美元。</p><p>总结：Call = 看涨，赚股价上涨的钱。Put = 看跌，赚股价下跌的钱。</p><p>买期权的最大风险 = 期权费，潜在收益可能很高（尤其Call）</p><h1 id="三、期权的四个核心术语"><a href="#三、期权的四个核心术语" class="headerlink" title="三、期权的四个核心术语"></a>三、期权的四个核心术语</h1><p>要玩转期权，必须搞懂以下四个关键概念：</p><p>行权价（Strike Price）：</p><p>期权合约约定的买卖价格。例如，TSLA的310美元Call，行权价就是310美元。</p><p>行权价有多种选择：高于、等于或低于当前股价，分别叫虚值（OTM）、平值（ATM）、实值（ITM）。</p><p>实值：Call的行权价 &lt; 当前股价（例如，TSLA 300美元，行权价290美元）。</p><p>虚值：Call的行权价 &gt; 当前股价（例如，行权价320美元）。</p><p>平值：行权价 ≈ 当前股价。</p><p>到期日（Expiration Date）：期权有效的时间，过了这天，期权要么行权，要么作废。</p><p>常见到期日：1周、1个月、3个月，甚至1-2年。</p><p>期权费（Premium）：购买期权需要支付的费用，由市场供需决定，受股价、波动率和剩余时间影响。</p><p>例如，5美元/股的期权费，买1份合约（100股）就是500美元。</p><p>标的股票（Underlying Stock）：期权对应的股票或ETF，例如TSLA、AAPL、SPY。</p><h1 id="四、期权为什么吸引人？三大优势"><a href="#四、期权为什么吸引人？三大优势" class="headerlink" title="四、期权为什么吸引人？三大优势"></a>四、期权为什么吸引人？三大优势</h1><p>期权之所以在美股市场大受欢迎，尤其对小散户（像关注TSLA、BTC的），有以下三大魅力：</p><p>低成本，高杠杆：买100股TSLA（300美元/股）需要3万美元，但买1份Call期权只需500美元，就能控制100股的收益权。</p><p>如果股价涨10%，股票赚3000美元，期权可能翻倍（500美元变1000美元），杠杆放大回报。</p><p>风险有限：买期权的最大损失是期权费（例如，500美元），不像股票可能亏到本金全无。这让期权适合想“以小博大”的投资者。</p><p>灵活性：期权可以看涨（Call）、看跌（Put），还能组合策略（后面几集会讲）。</p><p>适合各种市场环境：牛市、熊市、震荡市。</p><p>案例：假设TSLA即将发布新款Cybertruck，市场预期股价大涨。你可以用500美元买Call期权，押注上涨，潜在赚几倍回报，而风险仅限500美元。</p><h1 id="五、期权的风险：不是“稳赚不赔”"><a href="#五、期权的风险：不是“稳赚不赔”" class="headerlink" title="五、期权的风险：不是“稳赚不赔”"></a>五、期权的风险：不是“稳赚不赔”</h1><p>虽然期权很诱人，但它不是“印钞机”。以下是初学者要知道的三大风险：</p><p>时间压力：期权有到期日，如果到期时股价没达到目标，期权可能一文不值。</p><p>例如，TSLA Call（行权价310美元）到期时股价只有305美元，500美元期权费全亏。</p><p>高波动性：期权价格随股价、波动率剧烈变化，可能一天涨50%或跌80%。这既是机会，也是风险。</p><p>全损可能：买虚值期权（例如，TSLA 350美元Call）需要股价暴涨才赚钱，失败概率高，容易全损。</p><p>建议：期权适合用“玩得起的钱”尝试，初期别All in</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;一、期权是什么？&quot;&gt;&lt;a href=&quot;#一、期权是什么？&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="金融" scheme="https://jayli19707.github.io/categories/%E9%87%91%E8%9E%8D/"/>
    
    
    <category term="期权" scheme="https://jayli19707.github.io/tags/%E6%9C%9F%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Datawhale-二分类任务</title>
    <link href="https://jayli19707.github.io/2025/07/17/Datawhale-%E4%BA%8C%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/"/>
    <id>https://jayli19707.github.io/2025/07/17/Datawhale-%E4%BA%8C%E5%88%86%E7%B1%BB%E4%BB%BB%E5%8A%A1/</id>
    <published>2025-07-17T05:54:00.347Z</published>
    <updated>2025-07-18T14:14:16.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="比赛简介"><a href="#比赛简介" class="headerlink" title="比赛简介"></a>比赛简介</h1><p>「<a href="https://challenge.xfyun.cn/h5/detail?type=subscriber-addition-2025&ch=dwsfyc25-1">用户新增预测挑战赛</a>」是由科大讯飞主办的一项数据科学竞赛，旨在通过机器学习方法<strong>预测用户是否为新增用户</strong></p><p>比赛属于二分类任务，评价指标采用F1分数，分数越高表示模型性能越好。</p><p>如果你有一份带标签的表格型数据，只要目标是分类、回归或排序，那么 <strong>LightGBM 都是最强机器学习模型之一，默认首选</strong>。</p><h1 id="赛题建模的价值"><a href="#赛题建模的价值" class="headerlink" title="赛题建模的价值"></a>赛题建模的价值</h1><p>用户新增预测是分析 <strong>用户使用场景</strong> 以及 <strong>预测用户增长情况</strong> 的关键步骤，有助于进行其后续产品和应用的迭代升级，主要有对行业和技术有如下价值：</p><p><strong>行业价值：</strong></p><ul><li><p>精准预测用户增长趋势，优化产品迭代方向</p></li><li><p>降低用户获取成本，提高营销转化率</p></li><li><p>为AI能力落地提供量化评估依据</p></li></ul><p><strong>技术价值：</strong></p><ul><li><p>解决实际业务场景中的用户增长预测问题</p></li><li><p>验证AI在用户行为分析领域的有效性</p></li><li><p>建立可复用的用户增长预测方法论</p></li></ul><h1 id="赛题要求："><a href="#赛题要求：" class="headerlink" title="赛题要求："></a>赛题要求：</h1><p>参与算法赛事，一定要仔细理解赛事的 <strong>输入-输出</strong> 究竟是什么，尤其是<strong>提交的格式</strong></p><p><strong>输入数据：</strong></p><ul><li><p>用户行为事件记录</p></li><li><p>15个原始特征字段</p></li><li><p>关键字段： <code>udmap</code> (JSON)、 <code>common_ts</code> (时间戳)</p></li></ul><p><strong>输出要求：</strong></p><ul><li><p>预测用户是否为新增 ( <code>is_new_did</code> )</p></li><li><p>提交格式：CSV文件包含一列，字段名为<code>is_new_did</code>，值为<code>0/1</code></p><ul><li><p><code>0</code> 表示不是新增用户</p></li><li><p><code>1</code> 表示是新增用户</p></li></ul></li></ul><h1 id="原始数据初步预览"><a href="#原始数据初步预览" class="headerlink" title="原始数据初步预览"></a>原始数据初步预览</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250712143029706.png" alt="image.png"></p><p>其中：</p><ul><li><p><code>mid</code>为用户行为模块id,</p></li><li><p><code>eid</code>为用户行为事件id,</p></li></ul><p>解析一下两者的区别：</p><ul><li><p><strong><code>mid</code>（模块ID）</strong>：是<strong>一类行为的编号</strong>，表示用户在做什么“类型”的事情，比如：</p><ul><li><p>mid = 1：表示“浏览商品模块”</p></li><li><p>mid = 2：表示“搜索模块”</p></li><li><p>mid = 3：表示“结算模块”</p></li></ul><p>  所以它更像是一个<strong>大分类</strong>，告诉我们用户当前在哪个模块里操作。  </p></li><li><p><strong><code>eid</code>（事件ID）</strong>：是<strong>具体某个行为的编号</strong>，它属于某个模块（mid），但粒度更细，比如：</p><ul><li><p>在“浏览商品模块”中（mid=1），可能有：</p><ul><li><p>eid = 101：点击商品详情</p></li><li><p>eid = 102：滑动商品列表</p></li></ul></li><li><p>在“搜索模块”中（mid=2），可能有：</p><ul><li><p>eid = 201：输入关键词</p></li><li><p>eid = 202：点击搜索按钮</p></li></ul></li></ul></li><li><p><code>did</code>为用户id,</p></li><li><p><code>device_brand</code>为设备品牌/厂商,</p></li><li><p><code>ntt</code>为网络类型,</p></li><li><p><code>operator</code>为运营商,</p></li><li><p><code>common_country</code>为国家,</p></li><li><p><code>common_province</code>为省份,</p></li><li><p><code>common_city</code>为城市,</p></li><li><p><code>appver</code>为应用版本,</p></li><li><p><code>channel</code>为应用渠道,</p></li><li><p><code>common_ts</code>为事件发生时间（毫秒时间戳）,</p></li><li><p><code>os_type</code>用于判断Android还是iOS,</p></li><li><p><code>udmap</code>为事件自定义属性（标准json文本，内含botId助手ID和pluginId插件ID）</p></li><li><p><code>is_new_did</code>为预测目标，即是否为新增用户</p></li></ul><h1 id="分析训练集与测试集用户重叠度"><a href="#分析训练集与测试集用户重叠度" class="headerlink" title="分析训练集与测试集用户重叠度"></a>分析训练集与测试集用户重叠度</h1><p>然后我们可以通过 经验/资料查阅肉眼观测/代码 等手段，对 <strong>赛事提供的数据</strong> 有大致的理解和把握:</p><p>提取了训练集和测试集中的所有唯一用户ID，分别组成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_dids = <span class="built_in">set</span>(train_df[<span class="string">'did'</span>].unique())</span><br><span class="line">test_dids = <span class="built_in">set</span>(test_df[<span class="string">'did'</span>].unique())</span><br></pre></td></tr></table></figure><p>计算两者交集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overlap_dids = train_dids &amp; test_dids</span><br></pre></td></tr></table></figure><p>统计数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num_overlap = <span class="built_in">len</span>(overlap_dids)</span><br><span class="line">num_train = <span class="built_in">len</span>(train_dids)</span><br><span class="line">num_test = <span class="built_in">len</span>(test_dids)</span><br></pre></td></tr></table></figure><p>计算比例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ratio_in_train = num_overlap / num_train</span><br><span class="line">ratio_in_test = num_overlap / num_test</span><br></pre></td></tr></table></figure><p>我们通过数据探索的代码，有一些关键发现：</p><ul><li><p><strong>测试集</strong>中<strong>93%的用户</strong>出现在<strong>训练集</strong>中</p></li><li><p><strong>训练集</strong>中88%的用户<code>is_new_did</code>为 0</p></li></ul><h1 id="建模初步思路"><a href="#建模初步思路" class="headerlink" title="建模初步思路"></a>建模初步思路</h1><ul><li><p><strong>数据处理与特征工程：</strong> 如处理缺失值、异常值，解析JSON字段，从时间戳中提取特征（年、月、日、小时等），以及构造新的特征以提升模型表现。</p></li><li><p><strong>分类模型与集成学习：</strong> 了解常用的分类算法（如逻辑回归、决策树、随机森林等），特别是梯度提升树（如LightGBM）的原理和使用。LightGBM是微软开发的高效梯度提升框架，具有训练速度快、内存占用低和精度高等优点。</p></li><li><p><strong>模型评估与指标：</strong> 掌握二分类问题的评估指标，如精确率（Precision）、召回率（Recall）和F1分数的定义及计算方法。F1分数是精确率和召回率的调和均值，在正负样本不均衡时比准确率更有参考意义。</p></li><li><p><strong>交叉验证：</strong> 理解交叉验证的作用，能够使用分层K折交叉验证来评估模型性能，避免因随机划分导致的偏差。</p></li><li><p><strong>超参数调优：</strong> 熟悉如何调整模型的超参数（如学习率、树的深度等）以提高模型效果，常用方法包括网格搜索、随机搜索和贝叶斯优化等。</p></li><li><p><strong>结果提交与分析：</strong> 了解竞赛提交的格式要求，能够将模型预测结果生成符合要求的CSV文件提交，并通过排行榜成绩分析模型改进方向。</p></li></ul><h1 id="解题-要点和难点"><a href="#解题-要点和难点" class="headerlink" title="解题 要点和难点"></a>解题 要点和难点</h1><ul><li><p>用户行为事件数据 → 用户级别预测</p></li><li><p>高维稀疏特征（设备/地域/行为ID）<br>  像 <code>device_brand</code>, <code>common_city</code>, <code>mid</code>, <code>eid</code> 这类字段，有成百上千种取值。用 One-hot 编码会变成高维稀疏矩阵，容易导致模型训练慢、过拟合，必须小心处理，比如可以做频率编码、embedding、或仅保留Top-N</p></li><li><p>正负样本不均衡（新增用户占比较少）<br>  <code>is_new_did</code> 的 0 和 1 不平衡，大多数是老用户（0）。这会让模型“只学会预测0”，所以需要：</p></li><li><p>采样策略（欠采样、过采样）</p><ul><li>比如统计：</li><li>用户一共触发了几个行为（行为数量）</li><li>用户用过哪些网络、在哪些城市</li><li>用户行为的时间分布（首次时间、活跃时段等）</li></ul></li><li><p>这是建模效果优劣的关键步骤。</p></li><li><p>合理评价指标（如AUC或F1，而不是Accuracy）</p></li><li><p>使用内置样本权重的模型（如 LightGBM）</p></li><li><p>用户行为聚合：如何将事件级数据转化为用户特征<br>  数据是以“行为事件”为单位的，比如用户点击了某个按钮，这样的行为记录很多，但我们的目标是预测“某个用户是否是新用户”，所以我们需要<strong>将多条事件数据合并成一个用户级别的数据</strong>，这是一个“从行到列”的特征聚合问题。</p></li><li><p>时间敏感特征：用户行为模式随时间变化<br>  比如一个用户一开始很频繁，后面沉寂，也许是老用户；新用户行为更集中在某几个小时；时间戳可以提取：</p><ul><li>小时、星期几、行为密度</li><li>首次行为和最后一次行为的间隔</li><li>是否在特定时间段活跃（如晚上活跃）</li></ul></li></ul><h2 id="解题思考过程"><a href="#解题思考过程" class="headerlink" title="解题思考过程"></a>解题思考过程</h2><p>关键决策点：</p><ol><li><p>选择树模型而非神经网络（训练速度/特征处理）</p></li><li><p>优先构造简单的时间特征而非复杂特征工程</p></li></ol><p>参考资料：</p><ul><li><p>LightGBM官方文档（分类任务参数配置）</p></li><li><p>时序特征工程最佳实践（FeatureTools库）</p></li></ul><h1 id="Baseline方案的设计思路"><a href="#Baseline方案的设计思路" class="headerlink" title="Baseline方案的设计思路"></a>Baseline方案的设计思路</h1><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250712161157877.png" alt="image.png"></p><h2 id="核心函数1：交叉验证建模"><a href="#核心函数1：交叉验证建模" class="headerlink" title="核心函数1：交叉验证建模"></a>核心函数1：交叉验证建模</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">n_folds = <span class="number">5</span></span><br><span class="line">kf = StratifiedKFold(n_splits=n_folds, shuffle=<span class="literal">True</span>, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fold, (train_idx, val_idx) <span class="keyword">in</span> <span class="built_in">enumerate</span>(kf.split(X_train, y_train)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"\n======= Fold <span class="subst">{fold+<span class="number">1</span>}</span>/<span class="subst">{n_folds}</span> ======="</span>)</span><br><span class="line">    X_tr, X_val = X_train.iloc[train_idx], X_train.iloc[val_idx]</span><br><span class="line">    y_tr, y_val = y_train.iloc[train_idx], y_train.iloc[val_idx]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建数据集（指定类别特征）</span></span><br><span class="line">    train_set = lgb.Dataset(X_tr, label=y_tr)</span><br><span class="line">    val_set = lgb.Dataset(X_val, label=y_val)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模型训练</span></span><br><span class="line">    model = lgb.train(</span><br><span class="line">        params,train_set,</span><br><span class="line">        num_boost_round=<span class="number">5000</span>,</span><br><span class="line">        valid_sets=[train_set, val_set],</span><br><span class="line">        callbacks=[</span><br><span class="line">            lgb.early_stopping(stopping_rounds=<span class="number">200</span>, verbose=<span class="literal">False</span>),</span><br><span class="line">            lgb.log_evaluation(period=<span class="number">200</span>)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="细节补充（什么是k-fold-cross-validation）："><a href="#细节补充（什么是k-fold-cross-validation）：" class="headerlink" title="细节补充（什么是k-fold cross-validation）："></a>细节补充（什么是k-fold cross-validation）：</h3><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250712162416834.png" alt="image.png"></p><h3 id="根据题型还要有的改进点："><a href="#根据题型还要有的改进点：" class="headerlink" title="根据题型还要有的改进点："></a>根据题型还要有的改进点：</h3><p>使用<strong>StratifiedKFold</strong><br>如果你在处理的是分类问题，并且正负样本比例不平衡（比如“新增用户”只占很少），那你用的 <code>StratifiedKFold</code> 就更进一步了，它在划分每一份的时候，还会<strong>确保正负样本的比例一致</strong>，这能避免某一折验证集全是负样本，导致模型评估不准。</p><h2 id="核心函数2：目标优化函数"><a href="#核心函数2：目标优化函数" class="headerlink" title="核心函数2：目标优化函数"></a>核心函数2：目标优化函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_optimal_threshold</span>(<span class="params">y_true, y_pred_proba</span>):</span><br><span class="line">    <span class="string">"""寻找最大化F1分数的阈值"""</span></span><br><span class="line">    best_threshold = <span class="number">0.5</span></span><br><span class="line">    best_f1 = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> threshold <span class="keyword">in</span> [<span class="number">0.1</span>,<span class="number">0.15</span>,<span class="number">0.2</span>,<span class="number">0.25</span>,<span class="number">0.3</span>,<span class="number">0.35</span>,<span class="number">0.4</span>]:</span><br><span class="line">        y_pred = (y_pred_proba &gt;= threshold).astype(<span class="built_in">int</span>)</span><br><span class="line">        f1 = f1_score(y_true, y_pred)</span><br><span class="line">        <span class="keyword">if</span> f1 &gt; best_f1:</span><br><span class="line">            best_f1 = f1</span><br><span class="line">            best_threshold = threshold</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> best_threshold, best_f1</span><br></pre></td></tr></table></figure><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>在二分类模型中，很多模型（比如 LightGBM、XGBoost）输出的不是“0”或“1”的标签，而是一个概率（比如这个样本属于正类的概率是 0.73）<br>但我们最终要做出决策：到底是正类（1）还是负类（0）？这就需要设置一个“阈值”来做转换<br>例如：默认是用 0.5，当预测概率大于 0.5 就认为是正类。但这个阈值不是固定的，<strong>在样本不均衡或业务目标特殊时，调整阈值可以显著提升 F1 等指标。</strong></p><p><strong>设计特点：</strong></p><ol><li>候选范围选择<ul><li><p>聚焦 0.1-0.4：适用于正例稀少的场景（如欺诈检测）</p></li><li><p>若正例比例高，可扩展范围至 <code>np.arange(0.05, 0.95, 0.05)</code></p></li></ul></li><li>数值稳定性<ul><li><p>避免使用 <code>np.ptp</code> 等可能受异常值影响的指标</p></li><li><p>离散化搜索简单高效，复杂度 O(n)</p></li></ul></li></ol><h1 id="合并数据做特征工程（补充）"><a href="#合并数据做特征工程（补充）" class="headerlink" title="合并数据做特征工程（补充）"></a>合并数据做特征工程（补充）</h1><h2 id="1-类别特征编码一致性"><a href="#1-类别特征编码一致性" class="headerlink" title="1. 类别特征编码一致性"></a>1. <strong>类别特征编码一致性</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> feature <span class="keyword">in</span> cat_features:</span><br><span class="line">    le = LabelEncoder()</span><br><span class="line">    all_values = pd.concat([train_df[feature], test_df[feature]]).astype(<span class="built_in">str</span>)</span><br><span class="line">    le.fit(all_values)</span><br><span class="line">    <span class="comment"># 确保训练集和测试集使用相同的编码映射</span></span><br></pre></td></tr></table></figure><ul><li><p><code>le.fit(values)</code> 这一步是“学习”阶段：它会扫描 <code>values</code> 中所有不同的取值，按<strong>字典序排序</strong>，然后给每个唯一类别分配一个整数标签（从 0 开始）。这些映射规则保存在 <code>le.classes_</code> 属性里。</p></li><li><p>然后用 <code>le.transform(...)</code> 把原始列中的每个值，根据这个映射规则变成整数（比如 <code>['banana', 'apple']</code> → <code>[1, 0]</code>）。</p></li><li><p>最后，这些编码后的数字会“<strong>回填到数据集的原列里</strong>”，替换掉原来的字符串</p></li></ul><p><strong>关键问题</strong>：如果分别编码，可能出现：</p><ul><li>训练集中 <code>device_brand='Apple'</code> 编码为 <code>0</code></li><li>测试集中 <code>device_brand='Apple'</code> 编码为 <code>1</code></li><li>导致模型无法正确识别相同的设备品牌</li></ul><h2 id="2-统计特征的完整性"><a href="#2-统计特征的完整性" class="headerlink" title="2. 统计特征的完整性"></a>2. <strong>统计特征的完整性</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于合并数据计算统计特征</span></span><br><span class="line">brand_stats = full_df.groupby(<span class="string">'device_brand'</span>).agg({</span><br><span class="line">    <span class="string">'did'</span>: <span class="string">'nunique'</span>,</span><br><span class="line">    <span class="string">'hour'</span>: [<span class="string">'mean'</span>, <span class="string">'std'</span>],</span><br><span class="line">    <span class="string">'dayofweek'</span>: <span class="string">'mean'</span></span><br><span class="line">}).reset_index()</span><br></pre></td></tr></table></figure><p><strong>优势</strong>：</p><ul><li>统计更准确（基于更大的样本）</li><li>避免训练集和测试集统计分布不一致</li><li>提高特征的泛化能力</li></ul><h2 id="3-数据泄露检查"><a href="#3-数据泄露检查" class="headerlink" title="3. 数据泄露检查"></a>3. <strong>数据泄露检查</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意：标签信息只在训练集中存在</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"正样本比例: <span class="subst">{train_df[<span class="string">'is_new_did'</span>].mean():<span class="number">.4</span>f}</span>"</span>)</span><br></pre></td></tr></table></figure><p><strong>安全性</strong>：</p><ul><li>测试集中的 <code>is_new_did</code> 列为 <code>NaN</code></li><li>只使用特征信息，不使用标签信息</li><li><strong>不会造成数据泄露</strong></li></ul><h1 id="聚合的意义（补充）"><a href="#聚合的意义（补充）" class="headerlink" title="聚合的意义（补充）"></a>聚合的意义（补充）</h1><p>原始数据的真实结构：</p><p> <strong>一行 ≠ 一个用户的所有行为</strong><br> <strong>一行 = 一次用户行为事件，不是用户全部行为</strong></p><p>从代码中可以看出：</p><ul><li>训练集大小: <strong>(3,429,925, 15)</strong> - 343万条记录</li><li>唯一用户数: <strong>270,837</strong> 个用户</li><li>这意味着：<strong>平均每个用户有 12.7 条记录</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 证明：每个用户有多条记录</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"总记录数: <span class="subst">{<span class="built_in">len</span>(train_df)}</span>"</span>)           <span class="comment"># 3,429,925</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"唯一用户数: <span class="subst">{<span class="built_in">len</span>(train_df[<span class="string">'did'</span>].unique())}</span>"</span>)  <span class="comment"># 270,837</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"平均每用户记录数: <span class="subst">{<span class="built_in">len</span>(train_df) / <span class="built_in">len</span>(train_df[<span class="string">'did'</span>].unique()):<span class="number">.1</span>f}</span>"</span>)  <span class="comment"># 12.7</span></span><br></pre></td></tr></table></figure><p> 🔍 具体例子说明<br> <strong>原始数据长这样：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    did      eid    common_ts      device_brand  hour  is_new_did</span><br><span class="line">0   user001  100    1640000000000  Apple         14    1</span><br><span class="line">1   user001  200    1640000001000  Apple         14    1</span><br><span class="line">2   user001  300    1640000002000  Apple         15    1</span><br><span class="line">3   user001  100    1640000003000  Apple         16    1</span><br><span class="line">4   user002  100    1640000000500  Samsung       10    0</span><br><span class="line">5   user002  150    1640000001500  Samsung       11    0</span><br><span class="line">6   user003  200    1640000002000  Xiaomi        20    1</span><br></pre></td></tr></table></figure><p> <strong>问题是什么？</strong></p><p><strong>每一行只代表用户的一次行为事件</strong>，而不是用户的全部行为！</p><ul><li>第0行：用户001在14:00触发了事件100</li><li>第1行：用户001在14:00触发了事件200  </li><li>第2行：用户001在15:00触发了事件300</li><li>第3行：用户001在16:00又触发了事件100</li><li></li></ul><p><strong>我们需要用户级别的特征！</strong></p><h2 id="🎯-为什么要聚合？"><a href="#🎯-为什么要聚合？" class="headerlink" title="🎯 为什么要聚合？"></a>🎯 为什么要聚合？</h2><h3 id="1-单行信息不足"><a href="#1-单行信息不足" class="headerlink" title="1. 单行信息不足"></a><strong>1. 单行信息不足</strong></h3><ul><li>单行只能告诉我们：这个用户在某个时间点做了什么</li><li>无法告诉我们：这个用户的整体行为模式</li></ul><h3 id="2-用户级别特征更重要"><a href="#2-用户级别特征更重要" class="headerlink" title="2. 用户级别特征更重要"></a><strong>2. 用户级别特征更重要</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有聚合的情况下，我们只知道：</span></span><br><span class="line"><span class="comment"># - 用户001在14:00触发了事件100</span></span><br><span class="line"><span class="comment"># - 用户001使用Apple设备</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 有了聚合后，我们还知道：</span></span><br><span class="line"><span class="comment"># - 用户001总共触发了4次事件 (frequency)</span></span><br><span class="line"><span class="comment"># - 用户001使用了3种不同事件类型 (monetary)  </span></span><br><span class="line"><span class="comment"># - 用户001最后一次活动在16:00 (recency)</span></span><br><span class="line"><span class="comment"># - 用户001的活跃时间跨度是2小时</span></span><br></pre></td></tr></table></figure><h3 id="3-模型需要用户画像"><a href="#3-模型需要用户画像" class="headerlink" title="3. 模型需要用户画像"></a><strong>3. 模型需要用户画像</strong></h3><ul><li><strong>活跃用户</strong>: 高频次、多事件类型、最近活跃</li><li><strong>不活跃用户</strong>: 低频次、单一事件、很久没活跃</li></ul><h2 id="💡-实际价值"><a href="#💡-实际价值" class="headerlink" title="💡 实际价值"></a>💡 实际价值</h2><h3 id="聚合特征能回答的问题："><a href="#聚合特征能回答的问题：" class="headerlink" title="聚合特征能回答的问题："></a><strong>聚合特征能回答的问题：</strong></h3><ol><li><strong>这个用户活跃吗？</strong> → <code>frequency</code> (行为频次)</li><li><strong>这个用户最近活跃吗？</strong> → <code>recency</code> (最近活跃时间)</li><li><strong>这个用户行为多样吗？</strong> → <code>monetary</code> (不同事件类型数)</li><li><strong>这个用户是重度用户吗？</strong> → 综合RFM得分</li></ol><h3 id="这些特征对预测”新用户”很重要："><a href="#这些特征对预测”新用户”很重要：" class="headerlink" title="这些特征对预测”新用户”很重要："></a><strong>这些特征对预测”新用户”很重要：</strong></h3><ul><li><strong>新用户</strong>: 通常频次低、事件类型少、最近注册</li><li><strong>老用户</strong>: 通常频次高、事件类型多、历史悠久</li></ul><h2 id="🎯-总结"><a href="#🎯-总结" class="headerlink" title="🎯 总结"></a>🎯 总结</h2><p><strong>聚合的核心价值：</strong></p><ul><li>将用户的<strong>多次行为</strong>汇总成<strong>用户画像</strong></li><li>从<strong>事件级别</strong>提升到<strong>用户级别</strong>的特征</li><li>为模型提供<strong>更丰富的用户行为信息</strong></li></ul><p><strong>没有聚合</strong>：只知道用户做了什么<br><strong>有了聚合</strong>：知道用户是什么样的人</p><h1 id="Baseline方案的优缺点"><a href="#Baseline方案的优缺点" class="headerlink" title="Baseline方案的优缺点"></a>Baseline方案的优缺点</h1><h2 id="方案优点："><a href="#方案优点：" class="headerlink" title="方案优点："></a><strong>方案优点：</strong></h2><ol><li><p>数据预处理完整</p><ul><li><p>时间特征提取：将毫秒时间戳转换为 <code>day</code> 、 <code>dayofweek</code> 、 <code>hour</code> 等可解释的时序特征，捕捉用户行为的周期性规律。</p></li><li><p>类别特征编码：对 <code>device_brand</code> 、 <code>operator</code> 等高基数类别特征使用 <code>LabelEncoder</code> 进行编码，避免了独热编码导致的维度爆炸问题。</p></li><li><p>交叉验证策略：采用 <code>StratifiedKFold</code> 分层交叉验证，确保训练集和验证集的类别分布一致性，减少模型偏差。</p></li></ul></li><li><p>模型选择合理</p><ul><li><p>使用LightGBM作为基模型，适合高维稀疏数据，且对类别特征处理友好（如 <code>udmap</code> 中的JSON字段）。</p></li><li><p>阈值优化：通过动态调整分类阈值（ <code>find_optimal_threshold</code> ）最大化F1分数，适应类别不平衡问题（新增用户比例较低）。</p></li></ul></li><li><p>特征重要性分析</p><ul><li>输出特征重要性（ <code>gain</code> ），帮助识别关键特征（如 <code>udmap</code> 中的插件ID或助手ID），为后续特征优化提供方向。</li></ul></li></ol><h2 id="方案不足："><a href="#方案不足：" class="headerlink" title="方案不足："></a><strong>方案不足：</strong></h2><ol><li><p>特征工程深度不足</p><ul><li><p>未充分挖掘 <code>udmap</code> 字段中的JSON信息（如 <code>botId</code> 、 <code>pluginId</code> ），仅将其作为类别特征处理，未提取组合特征（如 <code>botId+pluginId</code> 的交互）。</p></li><li><p>忽略用户行为序列模式（如用户访问频次、事件路径），未能构建基于时间窗口的统计特征（如24小时内访问次数、连续登录天数）。</p></li></ul></li><li><p>模型调参空间有限</p><ul><li><p>参数固定（如 <code>max_depth=12</code> 、 <code>num_leaves=63</code> ），未通过网格搜索或贝叶斯优化探索更优参数组合。</p></li><li><p>未尝试集成模型（如CatBoost、XGBoost）或模型融合策略（如Stacking）提升泛化能力</p></li></ul></li></ol><h2 id="进阶要点1：如何挖掘用户行为信息"><a href="#进阶要点1：如何挖掘用户行为信息" class="headerlink" title="进阶要点1：如何挖掘用户行为信息"></a>进阶要点1：如何挖掘用户行为信息</h2><p><strong>时间序列特征：</strong></p><ul><li>滑动窗口统计：计算用户在最近7天、30天内的行为频次（如 <code>eid</code> 事件发生次数）、活跃时长（连续登录天数）。</li><li>示例代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按用户分组，按时间排序</span></span><br><span class="line">train_df.sort_values([<span class="string">'did'</span>, <span class="string">'common_ts'</span>], inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算用户历史行为频次（滑动窗口）</span></span><br><span class="line">train_df[<span class="string">'user_event_count'</span>] = train_df.groupby(<span class="string">'did'</span>)[<span class="string">'eid'</span>].transform(<span class="string">'cumcount'</span>) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="RFM特征："><a href="#RFM特征：" class="headerlink" title="RFM特征："></a>RFM特征：</h3><ul><li><p>Recency（最近一次行为时间）：计算用户最近一次行为距离当前时间的天数。</p></li><li><p>Frequency（行为频率）：用户总行为次数。</p></li><li><p>Monetary（行为价值）：假设某些事件（如 <code>eid</code> ）有经济价值，可定义虚拟价值字段。</p></li><li><p>示例代码：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="comment"># 3.1 RFM 特征构建</span></span><br><span class="line"><span class="comment"># 我们在 full_df 上计算这些聚合特征，因为它包含了所有用户的所有行为</span></span><br><span class="line">max_ts = full_df[<span class="string">'ts'</span>].<span class="built_in">max</span>()</span><br><span class="line">rfm_agg = full_df.groupby(<span class="string">'did'</span>).agg({</span><br><span class="line">    <span class="string">'ts'</span>: <span class="keyword">lambda</span> x: (max_ts - x.<span class="built_in">max</span>()).days, <span class="comment"># Recency</span></span><br><span class="line">    <span class="string">'eid'</span>: <span class="string">'count'</span>, <span class="comment"># Frequency</span></span><br><span class="line">    <span class="string">'mid'</span>: <span class="string">'nunique'</span>, <span class="comment"># 行为深度</span></span><br><span class="line">    <span class="string">'common_ts'</span>: [<span class="string">'min'</span>, <span class="string">'max'</span>] <span class="comment"># 首次和末次行为时间</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 列名扁平化处理</span></span><br><span class="line"><span class="comment"># 将多级索引 ('common_ts', 'min') 合并为单级 'common_ts_min'</span></span><br><span class="line">rfm_agg.columns = [<span class="string">'_'</span>.join(col).strip() <span class="keyword">for</span> col <span class="keyword">in</span> rfm_agg.columns.values]</span><br><span class="line">rfm_agg = rfm_agg.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3 特征重命名</span></span><br><span class="line">rfm_agg.rename(columns={</span><br><span class="line">    <span class="string">'ts_&lt;lambda&gt;'</span>: <span class="string">'recency'</span>,</span><br><span class="line">    <span class="string">'eid_count'</span>: <span class="string">'frequency'</span>,</span><br><span class="line">    <span class="string">'mid_nunique'</span>: <span class="string">'mid_nunique'</span>,</span><br><span class="line">    <span class="string">'common_ts_min'</span>: <span class="string">'first_action_ts'</span>,</span><br><span class="line">    <span class="string">'common_ts_max'</span>: <span class="string">'last_action_ts'</span></span><br><span class="line">}, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.4 派生新特征</span></span><br><span class="line"><span class="comment"># 计算首次和末次行为的时间跨度（单位：秒）</span></span><br><span class="line">rfm_agg[<span class="string">'action_timespan_seconds'</span>] = (rfm_agg[<span class="string">'last_action_ts'</span>] - rfm_agg[<span class="string">'first_action_ts'</span>]) / <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.5 合并RFM特征到 train_df 和 test_df</span></span><br><span class="line"><span class="comment"># 为了确保后续流程的变量一致性，我们直接在 train_df 和 test_df 上合并</span></span><br><span class="line">train_df = pd.merge(train_df, rfm_agg, on=<span class="string">'did'</span>, how=<span class="string">'left'</span>)</span><br><span class="line">test_df = pd.merge(test_df, rfm_agg, on=<span class="string">'did'</span>, how=<span class="string">'left'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.6 清理不再需要的 ts 列</span></span><br><span class="line"><span class="keyword">for</span> df <span class="keyword">in</span> [train_df, test_df]:</span><br><span class="line">    df.drop([<span class="string">'ts'</span>], axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>聚类之前，我们通常需要构造用户画像，也就是将“用户在某一时刻做了一件事”这一行级别的记录，<strong>转化为用户级别的特征向量</strong>（也可以理解为把行为日志「压缩」成特征摘要），RFM 就是一种典型方式（Recency 最近行为时间、Frequency 总行为次数、Monetary 用户价值或活跃度等）。因为你的原始数据是按行为记录来组织的，每一行是某个用户某个时间的行为，所以我们必须在 <code>full_df</code>（通常是训练集和测试集拼接后）中 <strong>以用户ID为单位聚合</strong>，计算出这些用户级的特征。</p><p>这一步就是对每个用户的所有行为求统计量：比如用户最后一次行为距现在多长时间、行为次数是多少、涉及的内容有多少种、最早和最晚的时间戳等。<strong>这些值都是用户的静态画像特征，适合用于聚类或训练模型</strong>。</p><p>但问题来了：原始的 <code>train_df</code> 和 <code>test_df</code> 还是按行为来组织的，而我们刚刚生成的是每个用户一行的 <code>rfm_agg</code>。所以我们需要 <strong>把这些用户特征“广播”回去合并到每条行为记录中</strong>（也就是你看到的 merge 操作），使得后续训练模型时，每条行为记录都能携带所属用户的画像。</p><p>这一步很关键，它是“先聚合再拆开”的意思：<strong>先在完整数据集上聚合用户级特征，再分别合并到训练集和测试集中</strong>。这样做是因为：</p><ol><li><p>RFM 特征是用户静态特征，不应该因训练/测试划分而不同；</p></li><li><p>若只用 <code>train_df</code> 聚合，会导致测试集中部分用户特征缺失；</p></li><li><p>若不合并，而是直接聚类用户，会失去原始行为粒度的信息，无法训练分类模型。</p></li></ol><hr><p>总结一句话就是：<strong>聚类或RFM特征是“以用户为单位的全局视角”，而行为数据是“以行为为单位的局部视角”。我们需要通过聚合（groupby）+ merge（合并）来建立两者之间的桥梁</strong>。这种设计让你既能提取用户画像，又能在每条行为记录中使用这些聚类信息做模型训练</p><h3 id="组合特征与高阶交互"><a href="#组合特征与高阶交互" class="headerlink" title="组合特征与高阶交互"></a>组合特征与高阶交互</h3><p>目标：通过特征交叉和非线性组合，捕捉复杂模式。<br>方法：</p><ul><li>类别特征交叉：<ul><li>将 <code>device_brand</code> 与 <code>os_type</code> 组合（如 <code>Android_Samsung</code> ），反映设备-系统的用户偏好。</li><li>示例代码：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_df[<span class="string">'device_os'</span>] = train_df[<span class="string">'device_brand'</span>].astype(<span class="built_in">str</span>) + <span class="string">'_'</span> + train_df[<span class="string">'os_type'</span>].astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><ul><li>数值特征分桶与交叉：<ul><li>将将 <code>common_ts</code> 分桶为时间段（如早高峰、晚高峰），与 <code>hour</code> 特征交叉，分析用户在特定时段的行为差异。</li><li>示例代码：</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分桶：将时间戳转换为时间段（如0-6: 0, 6-12:1...）</span></span><br><span class="line">train_df[<span class="string">'time_bucket'</span>] = pd.cut(train_df[<span class="string">'hour'</span>], bins=[<span class="number">0</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">18</span>,<span class="number">24</span>], labels=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="进阶要点2：选择什么样的建模思路"><a href="#进阶要点2：选择什么样的建模思路" class="headerlink" title="进阶要点2：选择什么样的建模思路"></a>进阶要点2：选择什么样的建模思路</h2><h3 id="1、按-did-聚合后的分层建模"><a href="#1、按-did-聚合后的分层建模" class="headerlink" title="1、按 did 聚合后的分层建模"></a><strong>1、按</strong> <code>did</code> <strong>聚合后的分层建模</strong></h3><p><strong>核心思想：</strong><br>将问题拆解为两层：用户层和事件层，通过分层建模捕捉用户级特征与事件级特征的交互。<br><strong>具体步骤：</strong></p><ol><li>用户层建模：<ul><li>对每个 <code>did</code> 进行特征聚合（如行为频次、时间分布、RFM特征等），训练一个用户级模型（如LightGBM/XGBoost），预测该 <code>did</code> 的标签（或概率）。</li><li>例如：使用每个 <code>did</code> 的累计行为次数、最近一次行为时间间隔等作为输入特征。</li></ul></li><li>事件层建模：<ul><li>在事件级别（即原始样本）引入用户级预测结果作为特征，构建混合模型。</li><li>例如：将用户级模型的输出（如预测概率）与事件级特征（如 <code>eid</code> 、时间戳、设备信息）拼接，输入到最终模型（如神经网络或集成树）中进行预测。<br><strong>优势：</strong></li></ul></li></ol><ul><li>用户层模型可捕捉全局用户行为模式，事件层模型可结合局部事件特征，提升模型鲁棒性。</li><li>对于测试集中重复的 <code>did</code> ，用户层预测结果可直接复用，减少冗余计算。</li></ul><h3 id="2、半监督学习策略"><a href="#2、半监督学习策略" class="headerlink" title="2、半监督学习策略"></a><strong>2、半监督学习策略</strong></h3><p><strong>核心思想：</strong></p><p>利用测试数据中重复的 <code>did</code> （部分标签已知但不唯一）作为伪标签，结合训练数据进行半监督训练。</p><p><strong>具体步骤：</strong></p><ol><li>筛选伪标签：<ul><li>对测试集中重复的 <code>did</code> ，若其在训练集中有多个样本且标签一致，可直接使用该标签作为伪标签。</li><li>若标签不一致，可通过以下方式处理：<ul><li>投票机制：选择训练集中该 <code>did</code> 的多数类标签。</li><li>置信度阈值：对预测概率较高的样本（如阈值&gt;0.95）生成伪标签。</li></ul></li></ul></li></ol><p><strong>优势：</strong></p><ul><li><p>利用测试数据中的隐式信息（重复 <code>did</code> 的已知标签），提升模型泛化能力。</p></li><li><p>对标签不唯一的场景，通过置信度筛选降低噪声风险。</p></li></ul><h3 id="3、动态标签映射与修正"><a href="#3、动态标签映射与修正" class="headerlink" title="3、动态标签映射与修正"></a>3、动态标签映射与修正</h3><p><strong>核心思想：</strong><br>针对测试集中重复的 <code>did</code> ，动态修正其预测标签，结合训练数据中的历史行为模式。<br><strong>具体步骤：</strong></p><ol><li>标签冲突检测：<ul><li><p>对于测试集中某个 <code>did</code> ，若其在训练集中有多个标签，统计标签分布（如出现次数、时间趋势）。</p></li><li><p>例如：若某 <code>did</code> 在训练集中同时存在0和1标签，但1标签集中在近期事件中，则优先选择1作为预测值。</p></li></ul></li><li>动态修正策略：<ul><li><p>时间加权平均：根据训练集中 <code>did</code> 的标签时间分布，加权计算预测值。</p></li><li><p>行为相似度匹配：将测试样本与训练集中该 <code>did</code> 的相似行为样本匹配，提取标签分布。</p></li></ul></li></ol><p><strong>优势：</strong></p><ul><li><p>精细化处理标签不唯一的场景，避免简单投票导致的偏差。</p></li><li><p>结合时间动态性和行为相似性，提升预测的合理性。</p></li></ul><h1 id="最终模型改进"><a href="#最终模型改进" class="headerlink" title="最终模型改进"></a>最终模型改进</h1><ol><li><p>用户层建模：（0.63-&gt;0.86）</p><ul><li>对每个 <code>did</code> 进行特征聚合（如行为频次、时间分布、RFM特征等），训练一个用户级模型（如LightGBM/XGBoost），预测该 <code>did</code> 的标签（或概率）。</li></ul></li><li><p>修改模型调参空间(0.86-&gt;0.94)</p><ul><li>参数固定（如 <code>max_depth=12</code> 、 <code>num_leaves=63</code> ），未通过网格搜索或贝叶斯优化探索更优参数组合。</li></ul></li><li><p>解析udmap和联合其他特征做特征工程：（0.94-0.95）</p><ul><li>未充分挖掘 <code>udmap</code> 字段中的JSON信息</li></ul></li><li><p>修复数据泄露问题<br> RFM特征是在 full_df 上聚合的，可能无意间“偷看了测试集”。我立即调整逻辑，确保所有特征只基于训练集统计。<br> 📉 分数略降，但汇总能力更真实可靠！</p></li><li><p>udmap 探掘 &amp; 组合特征（0.94 ➔ 0.95）<br>开始深入 JSON 字段 <code>udmap</code>，探索了 <code>botId</code>, <code>pluginId</code> 等关键信息，还构造了组合特征：</p><ul><li><p><code>device_brand + os_type</code></p></li><li><p><code>hour</code> + 活跃时段</p></li></ul><p>虽然提升不大，但对理解数据有很大帮助🧠</p></li><li><p>第五步：规则提分策略（0.95 ➔ 0.97）</p></li></ol><pre><code>670K测试用户里，**93%在训练集里出现过**——我灵机一動✨：将 `did` 直接作为特征加入模型，让模型学会“重复用户 = 老用户 = 0” 的强规则🚀 结果：F1爆炸提升至**0.97**！</code></pre><h2 id="网格搜索-Grid-Search"><a href="#网格搜索-Grid-Search" class="headerlink" title="网格搜索 (Grid Search)"></a><strong>网格搜索 (Grid Search)</strong></h2><ul><li><p><strong>适用场景</strong>: 参数空间较小，需要全面探索</p></li><li><p><strong>优势</strong>: 保证找到搜索范围内的最优组合</p></li><li><p><strong>时间复杂度</strong>: O(n^k) - n为每个参数的候选值数，k为参数个数</p></li><li><p><strong>实现</strong>: 分两阶段搜索，先结构参数后正则化参数</p></li></ul><h3 id="核心结构参数-影响最大"><a href="#核心结构参数-影响最大" class="headerlink" title="核心结构参数 (影响最大)"></a>核心结构参数 (影响最大)</h3><ol><li><p><strong>max_depth</strong> &amp; <strong>num_leaves</strong>: 控制模型复杂度，防止过拟合</p></li><li><p><strong>learning_rate</strong>: 控制训练速度和最终性能的平衡</p></li><li><p><strong>min_child_samples</strong>: 叶子节点最小样本数，影响泛化能力</p></li></ol><h3 id="正则化参数-精细调节"><a href="#正则化参数-精细调节" class="headerlink" title="正则化参数 (精细调节)"></a>正则化参数 (精细调节)</h3><ol start="4"><li><p><strong>feature_fraction</strong>: 特征采样比例，防止过拟合</p></li><li><p><strong>bagging_fraction</strong> &amp; <strong>bagging_freq</strong>: 样本采样，提高鲁棒性</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250718021907038.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250718034328455.png" alt="image.png"></p><h2 id="特征的重要性："><a href="#特征的重要性：" class="headerlink" title="特征的重要性："></a>特征的重要性：</h2><p>一开始的相关性矩阵（如皮尔逊相关系数）<strong>可以提供一定的参考</strong>，但它<strong>不能充分或准确判断特征对模型预测的“重要性”</strong>，原因如下：</p><ol><li><p><strong>相关性只是线性关联</strong>：相关系数（如 Pearson）只衡量两个变量之间的<strong>线性关系</strong>。如果一个特征与目标变量有非线性关系（例如 U 型、对数型等），它可能在相关性矩阵中显示“相关性弱”，但在非线性模型（如 LightGBM）中却是一个重要特征。</p></li><li><p><strong>不能考虑特征交互</strong>：相关性分析是逐个特征和标签的“单变量分析”，不考虑特征之间的联合作用。而像 LightGBM 这样的树模型可以利用多个特征之间的组合关系（交叉特征）来进行分裂和判断。</p></li><li><p><strong>对目标变量的影响可能被遮蔽</strong>：某些变量与目标变量本身相关性不强，但它与其他强变量结合后具有很强的预测力。相关性矩阵无法体现这种“边际贡献”或“条件重要性”。</p></li></ol><p>相关性矩阵可以用于初筛（如去除明显冗余的高度相关特征），但无法替代模型训练后的特征重要性分析。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;比赛简介&quot;&gt;&lt;a href=&quot;#比赛简介&quot; class=&quot;headerlink&quot; title=&quot;比赛简介&quot;&gt;&lt;/a&gt;比赛简介&lt;/h1&gt;&lt;p&gt;「&lt;a</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="二分类" scheme="https://jayli19707.github.io/tags/%E4%BA%8C%E5%88%86%E7%B1%BB/"/>
    
    <category term="特征工程" scheme="https://jayli19707.github.io/tags/%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>机器学习-深入理解 ChatGPT</title>
    <link href="https://jayli19707.github.io/2025/07/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20ChatGPT/"/>
    <id>https://jayli19707.github.io/2025/07/17/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20ChatGPT/</id>
    <published>2025-07-17T05:30:00.000Z</published>
    <updated>2025-07-17T07:14:16.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入理解-ChatGPT：预训练（Pre-train）的奥秘"><a href="#深入理解-ChatGPT：预训练（Pre-train）的奥秘" class="headerlink" title="深入理解 ChatGPT：预训练（Pre-train）的奥秘"></a>深入理解 ChatGPT：预训练（Pre-train）的奥秘</h2><p>今天我们来深入探讨 ChatGPT 背后的核心技术之一：<strong>预训练（Pre-train）</strong>。这不仅是理解 ChatGPT 强大能力的关键，也是当前大模型领域的热门话题。</p><h3 id="什么是预训练？"><a href="#什么是预训练？" class="headerlink" title="什么是预训练？"></a>什么是预训练？</h3><p>预训练，又被称为<strong>自监督学习（Self-supervised Learning）<strong>或构建</strong>基石模型（Foundation Model）</strong>。它在 ChatGPT 的命名中占据了“P”的位置，代表着“Pre-trained”。</p><p>简单来说，ChatGPT 的核心功能是<strong>文本接龙</strong>。它是一个函数，能够根据输入生成连贯的文本。这个函数的能力并非凭空而来，而是通过以下两种方式获得的：</p><ul><li><p><strong>人类老师的教导</strong>：提供大量的输入-输出对，让模型学习正确的响应。</p></li><li><p><strong>网络上的海量数据</strong>：通过自监督学习从无标签数据中提取知识。</p></li></ul><h3 id="传统机器学习的局限性"><a href="#传统机器学习的局限性" class="headerlink" title="传统机器学习的局限性"></a>传统机器学习的局限性</h3><p>在传统的监督学习中，例如英中翻译系统，我们需要收集大量的<strong>成对的（paired）中英对照例句</strong>。人类老师需要明确告诉机器，输入“I eat an apple”应该输出“我吃苹果”。机器通过这些成对数据来学习翻译函数。</p><p>然而，这种方式存在一个显著的局限性：<strong>人类老师能够提供的成对数据是极其有限的</strong>。如果训练数据中从未出现过“喜马拉雅山”这个词，那么即使机器学会了翻译，它也无法回答“世界第一高峰是哪座山”这样的问题。这意味着，仅仅依靠人类标注的有限数据，模型的知识和能力将非常有限。</p><h3 id="预训练如何解决数据稀疏问题？"><a href="#预训练如何解决数据稀疏问题？" class="headerlink" title="预训练如何解决数据稀疏问题？"></a>预训练如何解决数据稀疏问题？</h3><p>为了克服传统监督学习的局限性，预训练技术应运而生。它的核心思想是<strong>无痛地制造大量成对数据</strong>。</p><p>具体来说，网络上的每一段文字都可以被用来训练模型进行文本接龙。例如，对于句子“世界第一高峰是喜马拉雅山”，我们可以将前半部分“世界第一高峰是”作为输入，将后半部分“喜马拉雅山”作为输出，让模型学习这种接龙关系。同样，对于“今天天气真好，我要出去玩”，模型会学习到“今天天气真好”后面应该接“逗号”。</p><p>通过这种方式，模型可以从海量的无标签文本数据中学习语言的模式和知识，而无需人工标注。</p><h3 id="GPT-系列模型的发展"><a href="#GPT-系列模型的发展" class="headerlink" title="GPT 系列模型的发展"></a>GPT 系列模型的发展</h3><p>ChatGPT 的成功离不开其前身 GPT 系列模型的发展：</p><ul><li><p><strong>GPT-1 (2018)</strong>：最初的 GPT 模型相对较小，拥有 1.17 亿参数，训练数据量为 1GB。</p></li><li><p><strong>GPT-2 (2019)</strong>：GPT-2 的规模是 GPT-1 的 10 倍，拥有 15 亿参数，训练数据量达到 40GB。GPT-2 已经展现出回答问题和文本摘要的能力，这在当时引起了学界的轰动。</p></li><li><p><strong>GPT-3 (2020)</strong>：GPT-3 的规模更是达到了 GPT-2 的 100 倍，拥有 1750 亿参数，训练数据量高达 570GB。570GB 的文本数据相当于把《哈利波特》全集读了 30 万遍。GPT-3 甚至能够生成代码，因为它在预训练过程中接触了大量的代码和注释。</p></li></ul><h3 id="预训练的巨大帮助：多语言能力"><a href="#预训练的巨大帮助：多语言能力" class="headerlink" title="预训练的巨大帮助：多语言能力"></a>预训练的巨大帮助：多语言能力</h3><p>预训练带来的一个惊人效果是模型的<strong>多语言能力</strong>。</p><p>研究发现，在多种语言上进行预训练后，模型可以展现出**零样本（Zero-shot）**的跨语言迁移能力。这意味着，你只需要在某种语言（例如英语）上训练模型完成某个任务（例如阅读理解），它就能自动在其他语言（例如中文）上执行相同的任务，而无需额外的翻译或特定语言的训练。</p><p>例如，在 DRCD 中文阅读理解数据集上，一个在 104 种语言上进行预训练的 BERT 模型，即使只在英文阅读理解任务上进行微调，其在中文阅读理解任务上的表现也与直接在中文上微调的模型相近。这表明，预训练让模型学会了将不同人类语言内化为同一种内部表示，从而实现了跨语言的知识迁移。</p><h3 id="ChatGPT-的训练流程：三步走"><a href="#ChatGPT-的训练流程：三步走" class="headerlink" title="ChatGPT 的训练流程：三步走"></a>ChatGPT 的训练流程：三步走</h3><p>ChatGPT 的强大能力是分阶段训练的结果，主要包括以下三个步骤：</p><ol><li><p><strong>预训练（Pre-train）</strong>：</p><ul><li><p>模型通过阅读海量的网络文本数据，学习文本接龙的能力。</p></li><li><p>这个阶段是<strong>自监督学习</strong>，无需人工标注，模型从数据中自动生成训练信号。</p></li><li><p>例如，GPT-3 就是通过预训练获得的基石模型。</p></li></ul></li><li><p><strong>监督学习（Supervised Learning）</strong>：</p><ul><li><p>在预训练的基础上，引入人类老师进行<strong>微调（Fine-tune）</strong>。</p></li><li><p>人类老师提供高质量的输入-输出对，纠正模型在预训练中可能学到的不符合人类意图的回答。</p></li><li><p>例如，当用户问“台湾最高的山是哪座？”，人类老师会明确告诉模型输出“玉山”。</p></li></ul></li><li><p><strong>强化学习（Reinforcement Learning, RL）</strong>：</p><ul><li><p>为了进一步提升模型的对话质量和安全性，引入强化学习。</p></li><li><p>在这个阶段，人类不再直接提供正确答案，而是对模型的回答进行<strong>好坏评价（点赞或点踩）</strong>。</p></li><li><p>这种方式更省力，也更适用于那些没有明确“正确答案”的问题，例如“请帮我写诗赞美AI”。</p></li></ul></li></ol><h3 id="预训练的“前世记忆”"><a href="#预训练的“前世记忆”" class="headerlink" title="预训练的“前世记忆”"></a>预训练的“前世记忆”</h3><p>尽管经过了监督学习和强化学习的微调，ChatGPT 有时仍然会展现出预训练阶段的**“前世记忆”**。</p><p>例如，当你输入“今天天气真不错”时，ChatGPT 可能会回复一段以逗号开头的文本，例如“，温暖的阳光照耀着大地，微风轻拂…”。这表明它仍然在执行文本接龙的任务，试图将你的输入作为某个长句的开头，并继续生成后续内容，而不是像人类一样直接开始一个新句子。这提醒我们，即使模型能力强大，其底层逻辑仍然是基于预训练阶段学到的模式。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;深入理解-ChatGPT：预训练（Pre-train）的奥秘&quot;&gt;&lt;a href=&quot;#深入理解-ChatGPT：预训练（Pre-train）的奥秘&quot; class=&quot;headerlink&quot; title=&quot;深入理解</summary>
        
      
    
    
    
    <category term="机器学习" scheme="https://jayli19707.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-41.缺失的第一个正数</title>
    <link href="https://jayli19707.github.io/2025/07/16/Leetcode-41.%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/"/>
    <id>https://jayli19707.github.io/2025/07/16/Leetcode-41.%E7%BC%BA%E5%A4%B1%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B0/</id>
    <published>2025-07-16T15:30:00.000Z</published>
    <updated>2025-07-16T15:52:23.029Z</updated>
    
    <content type="html"><![CDATA[<p>问题的本质是 “存在性查询”，而存在性查询的最优数据结构是哈希表</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250716231139479.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">firstMissingPositive</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">        nums.sort()</span><br><span class="line"></span><br><span class="line">        a=<span class="built_in">set</span>(nums)</span><br><span class="line"></span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> a:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">            i+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>思路很简单：直接把数组排序后，丢到set里面，如果正数的i，不在set里面，说明就是缺少它。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;问题的本质是 “存在性查询”，而存在性查询的最优数据结构是哈希表&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-238.除自身以为的数组相乘</title>
    <link href="https://jayli19707.github.io/2025/07/15/Leetcode-238.%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E4%B8%BA%E7%9A%84%E6%95%B0%E7%BB%84%E7%9B%B8%E4%B9%98/"/>
    <id>https://jayli19707.github.io/2025/07/15/Leetcode-238.%E9%99%A4%E8%87%AA%E8%BA%AB%E4%BB%A5%E4%B8%BA%E7%9A%84%E6%95%B0%E7%BB%84%E7%9B%B8%E4%B9%98/</id>
    <published>2025-07-15T08:30:00.000Z</published>
    <updated>2025-07-15T08:30:00.900Z</updated>
    
    <content type="html"><![CDATA[<p>用两个prefix和suffix记录前后缀的乘积</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250715161324586.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">productExceptSelf</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line"></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        answer=[<span class="number">1</span>]*n</span><br><span class="line"></span><br><span class="line">        prefix = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line"></span><br><span class="line">            answer[i]=prefix</span><br><span class="line"></span><br><span class="line">            prefix*=nums[i]</span><br><span class="line"></span><br><span class="line">        suffix = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span>  <span class="built_in">range</span>(n-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">            answer[j]=answer[j]*suffix</span><br><span class="line"></span><br><span class="line">            suffix*=nums[j]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><p>注意：题目限制复杂度了，所以不能使用双循环，本题巧妙的地方在于，用了前缀积和后缀积储存该数组前后的乘积。注意上部分的循环和下部分循环有轻微不一样，就是下部分的循环直接乘answer即可保证了连贯。</p><h3 id="空间复杂度分析的标准约定："><a href="#空间复杂度分析的标准约定：" class="headerlink" title="空间复杂度分析的标准约定："></a>空间复杂度分析的标准约定：</h3><p>在算法分析中，<strong>空间复杂度指的是“额外使用的空间”，不包括输入和输出所占用的空间</strong>。这是因为：</p><ul><li><p>输入和输出是你<strong>无论如何都必须要有的</strong>。</p></li><li><p>空间复杂度衡量的是：<strong>你为了解决这个问题，额外用的内存</strong>是多少。</p></li></ul><p>所以：</p><ul><li><p>如果你要返回一个长度为 n 的数组 <code>answer</code>，那这个空间是题目要求必须有的，不算在“额外空间”中；</p></li><li><p>只有那些你<strong>为了计算结果</strong>而额外创建的辅助结构才算</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;用两个prefix和suffix记录前后缀的乘积&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Leetcode-198.轮转数组</title>
    <link href="https://jayli19707.github.io/2025/07/14/Leetcode-198.%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
    <id>https://jayli19707.github.io/2025/07/14/Leetcode-198.%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84/</id>
    <published>2025-07-14T12:30:00.000Z</published>
    <updated>2025-07-14T12:14:00.833Z</updated>
    
    <content type="html"><![CDATA[<p>核心是数组切片</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250714201054457.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotate</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        <span class="string">"""n=len(nums)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        for i in range(k):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            a=nums[-1]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            for j in range(n-1,0,-1):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                nums[j]=nums[j-1]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            nums[0]=a"""</span></span><br><span class="line"></span><br><span class="line">        n=<span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        k=k%n</span><br><span class="line"></span><br><span class="line">        nums[:]=nums[-k:]+nums[:-k]</span><br></pre></td></tr></table></figure><p>解决题目的关键是将数组切片，从第k部分切开即可，注意当k大于n时要取模。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;核心是数组切片&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-56.合并区间</title>
    <link href="https://jayli19707.github.io/2025/07/13/Leetcode-56.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
    <id>https://jayli19707.github.io/2025/07/13/Leetcode-56.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</id>
    <published>2025-07-13T08:30:00.000Z</published>
    <updated>2025-07-13T08:26:17.224Z</updated>
    
    <content type="html"><![CDATA[<p>核心理解：<br>两个区间 [a, b] 和 [c, d] 重叠的完整数学条件是：<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.39ex" height="1.882ex" role="img" focusable="false" viewBox="0 -694 2382.6 832"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1862.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>（第一个区间的起点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container> 第二个区间的终点）<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="4.967ex" height="1.882ex" role="img" focusable="false" viewBox="0 -694 2195.6 832"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(710.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1766.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>（第二个区间的起点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewBox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g></g></g></svg></mjx-container> 第一个区间的终点）<br>而排序的核心作用就是通过调整区间顺序，消除对 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="5.39ex" height="1.882ex" role="img" focusable="false" viewBox="0 -694 2382.6 832"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1862.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container> 的显式判断，使得我们只需关注 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="4.967ex" height="1.882ex" role="img" focusable="false" viewBox="0 -694 2195.6 832"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(710.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(1766.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container> 这一个条件。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250713160251416.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">self, intervals: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> intervals:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        intervals.sort(key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        merge=[intervals[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> current <span class="keyword">in</span> intervals[<span class="number">1</span>:]:</span><br><span class="line"></span><br><span class="line">            last=merge[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> last[<span class="number">1</span>] &gt;= current[<span class="number">0</span>]:</span><br><span class="line"></span><br><span class="line">                last[<span class="number">1</span>]=<span class="built_in">max</span>(last[<span class="number">1</span>],current[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                merge.append(current)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge</span><br></pre></td></tr></table></figure><p>题目分析：<br>本题的核心是处理一个二维的数组。<br>先将区间按左端点排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intervals.sort(key = <span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250713161828069.png" alt="image.png"></p><p>剩下的步骤只需要完成比较curret和last<br>如果current[0]小于last[1]，就说明可以合并，更新的时候只用把last[1]更新成max<br>(current[1],last[1])即可<br>如果current[0]大于last[1]，直接append current即可。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;核心理解：&lt;br&gt;两个区间 [a, b] 和 [c, d] 重叠的完整数学条件是：&lt;br&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.312ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;5.39ex&quot; height=&quot;1.882ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 2382.6 832&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(806.8,0)&quot;&gt;&lt;path data-c=&quot;2264&quot; d=&quot;M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1862.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;（第一个区间的起点 &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.312ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;1.76ex&quot; height=&quot;1.751ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -636 778 774&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2264&quot; d=&quot;M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt; 第二个区间的终点）&lt;br&gt;&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.312ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;4.967ex&quot; height=&quot;1.882ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 2195.6 832&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(710.8,0)&quot;&gt;&lt;path data-c=&quot;2264&quot; d=&quot;M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1766.6,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt;（第二个区间的起点 &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.312ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;1.76ex&quot; height=&quot;1.751ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -636 778 774&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2264&quot; d=&quot;M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt; 第一个区间的终点）&lt;br&gt;而排序的核心作用就是通过调整区间顺序，消除对 &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.312ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;5.39ex&quot; height=&quot;1.882ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 2382.6 832&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(806.8,0)&quot;&gt;&lt;path data-c=&quot;2264&quot; d=&quot;M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1862.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt; 的显式判断，使得我们只需关注 &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot;&gt;&lt;svg style=&quot;vertical-align: -0.312ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;4.967ex&quot; height=&quot;1.882ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 2195.6 832&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(710.8,0)&quot;&gt;&lt;path data-c=&quot;2264&quot; d=&quot;M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1766.6,0)&quot;&gt;&lt;path data-c=&quot;1D44F&quot; d=&quot;M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/mjx-container&gt; 这一个条件。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-53.最大子数组之和</title>
    <link href="https://jayli19707.github.io/2025/07/12/Leetcode-53.%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>https://jayli19707.github.io/2025/07/12/Leetcode-53.%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2025-07-12T15:30:00.000Z</published>
    <updated>2025-07-13T08:26:27.260Z</updated>
    
    <content type="html"><![CDATA[<p>本题采用 Kadane 算法，维护当前子数组最大值与全局最大值。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/JAYLI19707/blog-pic@master/20250713011710335.png" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSubArray</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        max_array=current_array=nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:]:</span><br><span class="line">            current_array=<span class="built_in">max</span>(i,current_array+i)</span><br><span class="line">            max_array=<span class="built_in">max</span>(max_array,current_array)</span><br><span class="line">        <span class="keyword">return</span> max_array</span><br></pre></td></tr></table></figure><p>题目解析：<br>核心思路是一个局部数组，一个全局数组。<br>局部数组还有一个巧妙的想法就是之分两种情况：<br>第一种只拿当前这个数组，也就是从这个数组开始。<br>第二种前面的子数组之和，加上当前这个数组。<br>理由分析：<br>如果前面子数组之和是负数，那我不如拿max（这个数组，前面子数组之和）。<br>如果前面子数组之和是正的，那我直接前面子数组加这个数组是最大的。<br>然后全局数组负责记录最大的之和</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本题采用 Kadane 算法，维护当前子数组最大值与全局最大值。&lt;/p&gt;</summary>
    
    
    
    <category term="Leetcode" scheme="https://jayli19707.github.io/categories/Leetcode/"/>
    
    
  </entry>
  
</feed>
